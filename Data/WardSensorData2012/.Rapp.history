SimSaveMean <- apply(SimSave, MARGIN=3, FUN=mean)
SimSaveMean
SimSave
SimSaveMean <- apply(SimSave, MARGIN=1, FUN=mean)
SimSaveMean
SimSaveMean <- apply(SimSave, MARGIN=2, FUN=mean)
SimSaveMean
SimSaveMean <- apply(SimSave, MARGIN=c(1,2), FUN=mean)
SimSaveMean
dev.new()#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), bty="l", cex.axis=1.25)#
plot(JunkVarianceS, SimSaveMean[,1])#
plot(JunkVarianceS, SimSaveMean[,2])#
plot(JunkVarianceS, SimSaveMean[,3])#
plot(JunkVarianceS, SimSaveMean[,4])#
plot(JunkVarianceS, SimSaveMean[,5])#
plot(JunkVarianceS, SimSaveMean[,6])
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), bty="l", cex.axis=1.25)#
plot(JunkVarianceS, SimSaveMean[,1])#
plot(JunkVarianceS, SimSaveMean[,2])#
plot(JunkVarianceS, SimSaveMean[,3])#
plot(JunkVarianceS, SimSaveMean[,4])#
plot(JunkVarianceS, SimSaveMean[,5])#
plot(JunkVarianceS, SimSaveMean[,6])
JunkVarianceS
?seq
JunkVarianceS <- seq(-6, 6, length.out=10)
JunkVarianceS
JunkVarianceS <- 10^seq(-6, 6, length.out=10)
JunkVarianceS
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.25)#
plot(JunkVarianceS, SimSaveMean[,1], xlab="", ylab="", xaxt="n")#
mtext("AR(1)", side=2, line=3, cex=1.5)#
plot(JunkVarianceS, SimSaveMean[,2], xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,3], xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,5], xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], xlab="", ylab="")
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.5)#
plot(JunkVarianceS, SimSaveMean[,1], xlab="", ylab="", xaxt="n")#
mtext("AR(1)", side=2, line=3, cex=1.5)#
plot(JunkVarianceS, SimSaveMean[,2], xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,3], xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,5], xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], xlab="", ylab="")
?par
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.5, xlog=TRUE)#
plot(JunkVarianceS, SimSaveMean[,1], xlab="", ylab="", xaxt="n")#
mtext("AR(1)", side=2, line=3, cex=1.5)#
plot(JunkVarianceS, SimSaveMean[,2], xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,3], xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,5], xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], xlab="", ylab="")
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.5)#
plot(JunkVarianceS, SimSaveMean[,1], xlab="", ylab="", xaxt="n", xlog=TRUE)#
mtext("AR(1)", side=2, line=3, cex=1.5)#
plot(JunkVarianceS, SimSaveMean[,2], xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,3], xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,5], xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], xlab="", ylab="")
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.5, log="x")
graphics.off()
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.5)#
plot(JunkVarianceS, SimSaveMean[,1], xlab="", ylab="", xaxt="n", log="x")#
mtext("AR(1)", side=2, line=3, cex=1.5)#
plot(JunkVarianceS, SimSaveMean[,2], xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,3], xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,5], xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], xlab="", ylab="")
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.5)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext("AR(1)", side=2, line=3, cex=1.5)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.5)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext("Variance", side=2, line=3, cex=1.5)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext("AR(1)", side=2, line=4, cex=1.5)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")
mtext(expression(R^2~True~vs*.~Chl*"-"*italic(a)), side=1, line=3)
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.5)
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.4)
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext("Variance", side=2, line=3, cex=1.4)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext("AR(1)", side=2, line=3, cex=1.4)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.4)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
dev.new(height=5, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(4,4,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext("Variance", side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext("AR(1)", side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
#
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext(expression(Varaince~(R^2)), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext(expression(AR(1)~(R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
#
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext(expression(Varaince~(R^2)), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext(expression(AR(1)~(R^2), side=2, line=3, cex=1.25))#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext(expression(Varaince~(R^2)), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext(expression(AR(1)~(R^2)), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
#
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext(expression(Variance~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(2,2,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(3,3,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
#Ryan Batt#
#26-April-2012#
#Steve suggested using a toy model to assess how the noise can mask a squeal signal in metabolism, when the signal is seen in Chl#
#
# =============================================================#
# = Steve's suggested "simplest toy model of the GPP problem" =#
# =============================================================#
#Squeal Signal for Chl:#
#Chl[t+1] = Phi[t]*Chl[t] + Eps[t]#
#Phi[t] = 1 - exp(-K_Phi*t)  #Note that Phi grows asymptotically to 1#
#Sigma2_Eps[t] = K_Eps*t #The variance of the Chl autoregressive process grows over time#
#
#GPP + Junk Noise#
#DO[t+1] = K_GPP*DO[t] - K_DO*(DO[t] - DO[1]) + Junk[t]#
#Metab_hat = DO[t+1] - DO[t]#
#
rm(list=ls())#
graphics.off()#
require("zoo")#
#
# ===============#
# = Set Options =#
# ===============#
RepsPerVar <- 5#
JunkVarianceS <- 10^seq(-6, 1, length.out=10)#
NStepsDefault <- 1000#
WindowSize <- 40#
RollTimeIndex <- 1:(NStepsDefault - (WindowSize-1))#
#
#
# ==================#
# = Load Functions =#
# ==================#
Ar1 <-function(x){#
	Nrmlzd <- x-mean(x)#
	Y <- (x-mean(x))[-1]#
	return(lm(Nrmlzd[-1] ~ Nrmlzd[-length(x)])$coef[[2]])#
}#
#
Ar1_Detrended <-function(x){#
	#First detrend, if needed#
	Model <- lm(x~c(1:length(x)))#
	Summary <- coef(summary(Model))#
	Slope <- Summary[2,1]#
	PValue <- Summary[2,4]#
	if(PValue<0.05){#
		Xnew <- x-(Slope*c(1:length(x)))#
	}else{#
		Xnew <- x#
	}#
	#Calculate AR(1)#
	Nrmlzd <- Xnew-mean(Xnew)#
	return(lm(Nrmlzd[-1] ~ Nrmlzd[-length(Xnew)])$coef[[2]])#
}#
#
Chl_Model <- function(K_Phi=-(log(0.5*(-0.95 + 1)))/(Nsteps), K_Eps=1E-5, K_DO=0.5, Junk_Var=JunkVariance, Nsteps=NStepsDefault){#
	Time <- 1:Nsteps#
	Chl_0 <- 5 #A reasonable concentration of chlorophyll for Peter Lake in units of μg/L#
	DO_0 <- 250 #A reasonable concentration of dissolved oxygen when O2 is near saturation at a typical temperature in Peter Lake, in units of μmols/L (is equal to 8 mg/L)#
	#
	Chl <- c(Chl_0,rep(NA,Nsteps-1))#
	DO <- c(DO_0, rep(NA, Nsteps-1))#
	#
	Phi <- 1 - 0.5*exp(-K_Phi*Time)#
	Sigma2_Eps <- K_Eps*Time#
	#
	K_GPP_t <- rep(NA,Nsteps)#
	Junk <- rnorm(n=Nsteps, mean=0, sd=sqrt(Junk_Var))#
	Metab_hat <- rep(NA,Nsteps-1)#
	#
	for(i in 1:(Nsteps-1)){#
		Eps <- rnorm(n=1, mean=0, sd=sqrt(Sigma2_Eps[i]))#
		Chl[i+1] <- Phi[i]*Chl[i] + Eps + Chl_0*(1-Phi[i]) #AR(1) plus noise model, with changing AR(1) coefficient and centered around a time series mean of Chl_0#
		#
		K_GPP_t[i] <- 1+log(Chl[i]/Chl_0) #The idea here is to allow [DO] to grow with the log ratio of current chlorophyll to the inital value of chlorophyll (supporting the notion that the system is at equilibrium when Chlorophyll and DO are at their initial values--- when chlorophyll is higher than its initial value, DO will increase; when chlorophyll is lower than its initial value, DO will decrease)#
		DO[i+1] <- K_GPP_t[i]*DO[i] -K_DO*(DO[i]-DO_0) + Junk[i]#
		Metab_hat[i] <- DO[i+1] - DO[i]#FIXME this should probably just be Metab_hat[i], but I did the +1 so that the last value wasn't NA#
		#
	}#
	return(list("Chl"=matrix(data=c(Time,Chl), ncol=2),"K_GPP_t"=matrix(data=c(Time,K_GPP_t), ncol=2), "DO"=matrix(data=c(Time,DO), ncol=2), "Metab_hat"=matrix(data=c(Time[-length(Time)],Metab_hat), ncol=2), "True_Sigma2_Eps"=matrix(data=c(Time,Sigma2_Eps), ncol=2), "True_Phi"=matrix(data=c(Time,Phi), ncol=2)))#
	#
	#
}#
#
RepJunk_Combo <- expand.grid(1:RepsPerVar,JunkVarianceS)#
SimSave <- array(dim=c(length(JunkVarianceS), 6, RepsPerVar))#
#
StartLoopTime <- proc.time()#
for(i in 1:nrow(RepJunk_Combo)){#
	Sim <- Chl_Model(Junk_Var=RepJunk_Combo[i,2])#
	ChlVar <- rollapplyr(Sim[[1]][-1,2], width=WindowSize, by=1, FUN=var)#
	ChlAR1 <- rollapplyr(Sim[[1]][-1,2], width=WindowSize, by=1, FUN=Ar1_Detrended)#
	MetabVar <- rollapplyr(Sim[[4]][,2], width=WindowSize, by=1, FUN=var)#
	MetabAR1 <- rollapplyr(Sim[[4]][,2], width=WindowSize, by=1, FUN=Ar1_Detrended)#
	#
	TrueRollVar <- Sim[[5]][is.element(Sim[[5]][,1], RollTimeIndex),2][-1]#
	TrueRollAR1 <- Sim[[6]][is.element(Sim[[6]][,1], RollTimeIndex),2][-1]#
	#
	R2_TrueChl_Var <- summary(lm(TrueRollVar~sqrt(ChlVar)))$adj.r.squared#
	R2_TrueChl_AR1 <- summary(lm(TrueRollAR1~ChlAR1))$adj.r.squared#
	R2_TrueMetab_Var <- summary(lm(TrueRollVar~sqrt(MetabVar)))$adj.r.squared#
	R2_TrueMetab_AR1 <- summary(lm(TrueRollAR1~MetabAR1))$adj.r.squared#
	R2_MetabChl_Var <- summary(lm(sqrt(ChlVar)~sqrt(MetabVar)))$adj.r.squared#
	R2_MetabChl_AR1 <- summary(lm(ChlAR1~MetabAR1))$adj.r.squared#
	#
	SimSave[ceiling(i/RepsPerVar), ,RepJunk_Combo[i,1]] <- c(R2_TrueChl_Var, R2_TrueChl_AR1, R2_TrueMetab_Var, R2_TrueMetab_AR1, R2_MetabChl_Var, R2_MetabChl_AR1)#
	#
	LoopProgress <- i/nrow(RepJunk_Combo)#
	LoopElapsed <- (proc.time() - StartLoopTime)[[3]]/60#
	print(c("Elapsed"=round(LoopElapsed,1),"%Complete"=round(LoopProgress*100,1), "ETA"=round(LoopElapsed/LoopProgress-LoopElapsed,1)))#
}#
#
SimSaveMean <- apply(SimSave, MARGIN=c(1,2), FUN=mean)#
#
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(3,3,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
SimSaveMean
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(3,3,0,0), bty="l", cex.axis=1.4, ylim=c(0,1))#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n")#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="")#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n")#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(3,3,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="", ylim=c(0,1))#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="", ylim=c(0,1))#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="", ylim=c(0,1))#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
#Ryan Batt#
#26-April-2012#
#Steve suggested using a toy model to assess how the noise can mask a squeal signal in metabolism, when the signal is seen in Chl#
#
# =============================================================#
# = Steve's suggested "simplest toy model of the GPP problem" =#
# =============================================================#
#Squeal Signal for Chl:#
#Chl[t+1] = Phi[t]*Chl[t] + Eps[t]#
#Phi[t] = 1 - exp(-K_Phi*t)  #Note that Phi grows asymptotically to 1#
#Sigma2_Eps[t] = K_Eps*t #The variance of the Chl autoregressive process grows over time#
#
#GPP + Junk Noise#
#DO[t+1] = K_GPP*DO[t] - K_DO*(DO[t] - DO[1]) + Junk[t]#
#Metab_hat = DO[t+1] - DO[t]#
#
rm(list=ls())#
graphics.off()#
require("zoo")#
#
# ===============#
# = Set Options =#
# ===============#
RepsPerVar <- 10#
JunkVarianceS <- 10^seq(-9, 9, length.out=20)#
NStepsDefault <- 1000#
WindowSize <- 40#
RollTimeIndex <- 1:(NStepsDefault - (WindowSize-1))#
#
#
# ==================#
# = Load Functions =#
# ==================#
Ar1 <-function(x){#
	Nrmlzd <- x-mean(x)#
	Y <- (x-mean(x))[-1]#
	return(lm(Nrmlzd[-1] ~ Nrmlzd[-length(x)])$coef[[2]])#
}#
#
Ar1_Detrended <-function(x){#
	#First detrend, if needed#
	Model <- lm(x~c(1:length(x)))#
	Summary <- coef(summary(Model))#
	Slope <- Summary[2,1]#
	PValue <- Summary[2,4]#
	if(PValue<0.05){#
		Xnew <- x-(Slope*c(1:length(x)))#
	}else{#
		Xnew <- x#
	}#
	#Calculate AR(1)#
	Nrmlzd <- Xnew-mean(Xnew)#
	return(lm(Nrmlzd[-1] ~ Nrmlzd[-length(Xnew)])$coef[[2]])#
}#
#
Chl_Model <- function(K_Phi=-(log(0.5*(-0.95 + 1)))/(Nsteps), K_Eps=1E-5, K_DO=0.5, Junk_Var=JunkVariance, Nsteps=NStepsDefault){#
	Time <- 1:Nsteps#
	Chl_0 <- 5 #A reasonable concentration of chlorophyll for Peter Lake in units of μg/L#
	DO_0 <- 250 #A reasonable concentration of dissolved oxygen when O2 is near saturation at a typical temperature in Peter Lake, in units of μmols/L (is equal to 8 mg/L)#
	#
	Chl <- c(Chl_0,rep(NA,Nsteps-1))#
	DO <- c(DO_0, rep(NA, Nsteps-1))#
	#
	Phi <- 1 - 0.5*exp(-K_Phi*Time)#
	Sigma2_Eps <- K_Eps*Time#
	#
	K_GPP_t <- rep(NA,Nsteps)#
	Junk <- rnorm(n=Nsteps, mean=0, sd=sqrt(Junk_Var))#
	Metab_hat <- rep(NA,Nsteps-1)#
	#
	for(i in 1:(Nsteps-1)){#
		Eps <- rnorm(n=1, mean=0, sd=sqrt(Sigma2_Eps[i]))#
		Chl[i+1] <- Phi[i]*Chl[i] + Eps + Chl_0*(1-Phi[i]) #AR(1) plus noise model, with changing AR(1) coefficient and centered around a time series mean of Chl_0#
		#
		K_GPP_t[i] <- 1+log(Chl[i]/Chl_0) #The idea here is to allow [DO] to grow with the log ratio of current chlorophyll to the inital value of chlorophyll (supporting the notion that the system is at equilibrium when Chlorophyll and DO are at their initial values--- when chlorophyll is higher than its initial value, DO will increase; when chlorophyll is lower than its initial value, DO will decrease)#
		DO[i+1] <- K_GPP_t[i]*DO[i] -K_DO*(DO[i]-DO_0) + Junk[i]#
		Metab_hat[i] <- DO[i+1] - DO[i]#FIXME this should probably just be Metab_hat[i], but I did the +1 so that the last value wasn't NA#
		#
	}#
	return(list("Chl"=matrix(data=c(Time,Chl), ncol=2),"K_GPP_t"=matrix(data=c(Time,K_GPP_t), ncol=2), "DO"=matrix(data=c(Time,DO), ncol=2), "Metab_hat"=matrix(data=c(Time[-length(Time)],Metab_hat), ncol=2), "True_Sigma2_Eps"=matrix(data=c(Time,Sigma2_Eps), ncol=2), "True_Phi"=matrix(data=c(Time,Phi), ncol=2)))#
	#
	#
}#
#
RepJunk_Combo <- expand.grid(1:RepsPerVar,JunkVarianceS)#
SimSave <- array(dim=c(length(JunkVarianceS), 6, RepsPerVar))#
#
StartLoopTime <- proc.time()#
for(i in 1:nrow(RepJunk_Combo)){#
	Sim <- Chl_Model(Junk_Var=RepJunk_Combo[i,2])#
	ChlVar <- rollapplyr(Sim[[1]][-1,2], width=WindowSize, by=1, FUN=var)#
	ChlAR1 <- rollapplyr(Sim[[1]][-1,2], width=WindowSize, by=1, FUN=Ar1_Detrended)#
	MetabVar <- rollapplyr(Sim[[4]][,2], width=WindowSize, by=1, FUN=var)#
	MetabAR1 <- rollapplyr(Sim[[4]][,2], width=WindowSize, by=1, FUN=Ar1_Detrended)#
	#
	TrueRollVar <- Sim[[5]][is.element(Sim[[5]][,1], RollTimeIndex),2][-1]#
	TrueRollAR1 <- Sim[[6]][is.element(Sim[[6]][,1], RollTimeIndex),2][-1]#
	#
	R2_TrueChl_Var <- summary(lm(TrueRollVar~sqrt(ChlVar)))$adj.r.squared#
	R2_TrueChl_AR1 <- summary(lm(TrueRollAR1~ChlAR1))$adj.r.squared#
	R2_TrueMetab_Var <- summary(lm(TrueRollVar~sqrt(MetabVar)))$adj.r.squared#
	R2_TrueMetab_AR1 <- summary(lm(TrueRollAR1~MetabAR1))$adj.r.squared#
	R2_MetabChl_Var <- summary(lm(sqrt(ChlVar)~sqrt(MetabVar)))$adj.r.squared#
	R2_MetabChl_AR1 <- summary(lm(ChlAR1~MetabAR1))$adj.r.squared#
	#
	SimSave[ceiling(i/RepsPerVar), ,RepJunk_Combo[i,1]] <- c(R2_TrueChl_Var, R2_TrueChl_AR1, R2_TrueMetab_Var, R2_TrueMetab_AR1, R2_MetabChl_Var, R2_MetabChl_AR1)#
	#
	LoopProgress <- i/nrow(RepJunk_Combo)#
	LoopElapsed <- (proc.time() - StartLoopTime)[[3]]/60#
	print(c("Elapsed"=round(LoopElapsed,1),"%Complete"=round(LoopProgress*100,1), "ETA"=round(LoopElapsed/LoopProgress-LoopElapsed,1)))#
}#
#
SimSaveMean <- apply(SimSave, MARGIN=c(1,2), FUN=mean)#
#
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(3,3,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="", ylim=c(0,1))#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="", ylim=c(0,1))#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="", ylim=c(0,1))#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
#Ryan Batt#
#26-April-2012#
#Steve suggested using a toy model to assess how the noise can mask a squeal signal in metabolism, when the signal is seen in Chl#
#
# =============================================================#
# = Steve's suggested "simplest toy model of the GPP problem" =#
# =============================================================#
#Squeal Signal for Chl:#
#Chl[t+1] = Phi[t]*Chl[t] + Eps[t]#
#Phi[t] = 1 - exp(-K_Phi*t)  #Note that Phi grows asymptotically to 1#
#Sigma2_Eps[t] = K_Eps*t #The variance of the Chl autoregressive process grows over time#
#
#GPP + Junk Noise#
#DO[t+1] = K_GPP*DO[t] - K_DO*(DO[t] - DO[1]) + Junk[t]#
#Metab_hat = DO[t+1] - DO[t]#
#
rm(list=ls())#
graphics.off()#
require("zoo")#
#
# ===============#
# = Set Options =#
# ===============#
RepsPerVar <- 40#
JunkVarianceS <- 10^seq(-9, 9, length.out=100)#
NStepsDefault <- 1000#
WindowSize <- 40#
RollTimeIndex <- 1:(NStepsDefault - (WindowSize-1))#
#
#
# ==================#
# = Load Functions =#
# ==================#
Ar1 <-function(x){#
	Nrmlzd <- x-mean(x)#
	Y <- (x-mean(x))[-1]#
	return(lm(Nrmlzd[-1] ~ Nrmlzd[-length(x)])$coef[[2]])#
}#
#
Ar1_Detrended <-function(x){#
	#First detrend, if needed#
	Model <- lm(x~c(1:length(x)))#
	Summary <- coef(summary(Model))#
	Slope <- Summary[2,1]#
	PValue <- Summary[2,4]#
	if(PValue<0.05){#
		Xnew <- x-(Slope*c(1:length(x)))#
	}else{#
		Xnew <- x#
	}#
	#Calculate AR(1)#
	Nrmlzd <- Xnew-mean(Xnew)#
	return(lm(Nrmlzd[-1] ~ Nrmlzd[-length(Xnew)])$coef[[2]])#
}#
#
Chl_Model <- function(K_Phi=-(log(0.5*(-0.95 + 1)))/(Nsteps), K_Eps=1E-5, K_DO=0.5, Junk_Var=JunkVariance, Nsteps=NStepsDefault){#
	Time <- 1:Nsteps#
	Chl_0 <- 5 #A reasonable concentration of chlorophyll for Peter Lake in units of μg/L#
	DO_0 <- 250 #A reasonable concentration of dissolved oxygen when O2 is near saturation at a typical temperature in Peter Lake, in units of μmols/L (is equal to 8 mg/L)#
	#
	Chl <- c(Chl_0,rep(NA,Nsteps-1))#
	DO <- c(DO_0, rep(NA, Nsteps-1))#
	#
	Phi <- 1 - 0.5*exp(-K_Phi*Time)#
	Sigma2_Eps <- K_Eps*Time#
	#
	K_GPP_t <- rep(NA,Nsteps)#
	Junk <- rnorm(n=Nsteps, mean=0, sd=sqrt(Junk_Var))#
	Metab_hat <- rep(NA,Nsteps-1)#
	#
	for(i in 1:(Nsteps-1)){#
		Eps <- rnorm(n=1, mean=0, sd=sqrt(Sigma2_Eps[i]))#
		Chl[i+1] <- Phi[i]*Chl[i] + Eps + Chl_0*(1-Phi[i]) #AR(1) plus noise model, with changing AR(1) coefficient and centered around a time series mean of Chl_0#
		#
		K_GPP_t[i] <- 1+log(Chl[i]/Chl_0) #The idea here is to allow [DO] to grow with the log ratio of current chlorophyll to the inital value of chlorophyll (supporting the notion that the system is at equilibrium when Chlorophyll and DO are at their initial values--- when chlorophyll is higher than its initial value, DO will increase; when chlorophyll is lower than its initial value, DO will decrease)#
		DO[i+1] <- K_GPP_t[i]*DO[i] -K_DO*(DO[i]-DO_0) + Junk[i]#
		Metab_hat[i] <- DO[i+1] - DO[i]#FIXME this should probably just be Metab_hat[i], but I did the +1 so that the last value wasn't NA#
		#
	}#
	return(list("Chl"=matrix(data=c(Time,Chl), ncol=2),"K_GPP_t"=matrix(data=c(Time,K_GPP_t), ncol=2), "DO"=matrix(data=c(Time,DO), ncol=2), "Metab_hat"=matrix(data=c(Time[-length(Time)],Metab_hat), ncol=2), "True_Sigma2_Eps"=matrix(data=c(Time,Sigma2_Eps), ncol=2), "True_Phi"=matrix(data=c(Time,Phi), ncol=2)))#
	#
	#
}#
#
RepJunk_Combo <- expand.grid(1:RepsPerVar,JunkVarianceS)#
SimSave <- array(dim=c(length(JunkVarianceS), 6, RepsPerVar))#
#
StartLoopTime <- proc.time()#
for(i in 1:nrow(RepJunk_Combo)){#
	Sim <- Chl_Model(Junk_Var=RepJunk_Combo[i,2])#
	ChlVar <- rollapplyr(Sim[[1]][-1,2], width=WindowSize, by=1, FUN=var)#
	ChlAR1 <- rollapplyr(Sim[[1]][-1,2], width=WindowSize, by=1, FUN=Ar1_Detrended)#
	MetabVar <- rollapplyr(Sim[[4]][,2], width=WindowSize, by=1, FUN=var)#
	MetabAR1 <- rollapplyr(Sim[[4]][,2], width=WindowSize, by=1, FUN=Ar1_Detrended)#
	#
	TrueRollVar <- Sim[[5]][is.element(Sim[[5]][,1], RollTimeIndex),2][-1]#
	TrueRollAR1 <- Sim[[6]][is.element(Sim[[6]][,1], RollTimeIndex),2][-1]#
	#
	R2_TrueChl_Var <- summary(lm(TrueRollVar~sqrt(ChlVar)))$adj.r.squared#
	R2_TrueChl_AR1 <- summary(lm(TrueRollAR1~ChlAR1))$adj.r.squared#
	R2_TrueMetab_Var <- summary(lm(TrueRollVar~sqrt(MetabVar)))$adj.r.squared#
	R2_TrueMetab_AR1 <- summary(lm(TrueRollAR1~MetabAR1))$adj.r.squared#
	R2_MetabChl_Var <- summary(lm(sqrt(ChlVar)~sqrt(MetabVar)))$adj.r.squared#
	R2_MetabChl_AR1 <- summary(lm(ChlAR1~MetabAR1))$adj.r.squared#
	#
	SimSave[ceiling(i/RepsPerVar), ,RepJunk_Combo[i,1]] <- c(R2_TrueChl_Var, R2_TrueChl_AR1, R2_TrueMetab_Var, R2_TrueMetab_AR1, R2_MetabChl_Var, R2_MetabChl_AR1)#
	#
	LoopProgress <- i/nrow(RepJunk_Combo)#
	LoopElapsed <- (proc.time() - StartLoopTime)[[3]]/60#
	print(c("Elapsed"=round(LoopElapsed,1),"%Complete"=round(LoopProgress*100,1), "ETA"=round(LoopElapsed/LoopProgress-LoopElapsed,1)))#
}#
#
SimSaveMean <- apply(SimSave, MARGIN=c(1,2), FUN=mean)#
#
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(3,3,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="", ylim=c(0,1))#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="", ylim=c(0,1))#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="", ylim=c(0,1))#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)
save.image("/Users/Battrd/Documents/School&Work/WiscResearch/SquealMetabolism/ToyModel_v1.1.RData")
SimSaveMean
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		test(x=5,y=95,labels='Click to End',cex=3)#
		abline(v=10)#
		abline(h=90)#
		dummy<-locator(1)#
		if(dummy$x<10 & dummy$y>90){#
			break#
		}#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=5,y=95,labels='Click to End',cex=3)#
		abline(v=10)#
		abline(h=90)#
		dummy<-locator(1)#
		if(dummy$x<10 & dummy$y>90){#
			break#
		}#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=5,y=95,labels='Click',cex=1);text(x=5,y=95,labels='To',cex=1);text(x=5,y=95,labels='End',cex=1)#
		abline(v=10)#
		abline(h=90)#
		dummy<-locator(1)#
		if(dummy$x<10 & dummy$y>90){#
			break#
		}#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=5,y=100,labels='Click',cex=1);text(x=5,y=95,labels='To',cex=1);text(x=5,y=90,labels='End',cex=1)#
		abline(v=10)#
		abline(h=90)#
		dummy<-locator(1)#
		if(dummy$x<10 & dummy$y>90){#
			break#
		}#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}#
	#
par(bg='blue',mar=c(0,0,0,0))#
plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
text(x=50,y=50,labels='Beast Mode!',cex=4,col='yellow')#
text(x=50,y=5,labels=paste('Total=',total),cex=6,col='yellow')
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=0,y=100,labels='Click',cex=2);text(x=0,y=95,labels='To',cex=2);text(x=0,y=90,labels='End',cex=2)#
		abline(v=10)#
		abline(h=90)#
		dummy<-locator(1)#
		if(dummy$x<10 & dummy$y>90){#
			break#
		}#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}#
	#
par(bg='blue',mar=c(0,0,0,0))#
plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
text(x=50,y=75,labels='Beast Mode!',cex=8,col='yellow')#
text(x=50,y=50,labels=paste('Total=',total),cex=6,col='yellow')
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=2,y=97
>>
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=2,y=97>>
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=2,y=97,labels='Click',cex=2);text(x=0,y=95,labels='To',cex=2);text(x=2,y=93,labels='End',cex=2)#
		abline(v=10)#
		abline(h=90)#
		dummy<-locator(1)#
		if(dummy$x<10 & dummy$y>90){#
			break#
		}#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}#
	#
par(bg='blue',mar=c(0,0,0,0))#
plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
text(x=50,y=75,labels='Beast Mode!',cex=6,col='yellow')#
text(x=50,y=50,labels=paste('Total=',total),cex=5,col='yellow')
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=2,y=100,labels='End',cex=3)#
		abline(v=10)#
		abline(h=90)#
		dummy<-locator(1)#
		if(dummy$x<10 & dummy$y>90){#
			break#
		}#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}#
	#
par(bg='blue',mar=c(0,0,0,0))#
plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
text(x=50,y=75,labels='Beast Mode!',cex=6,col='yellow')#
text(x=50,y=50,labels=paste('Total=',total),cex=5,col='yellow')
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=5,y=97,labels='End',cex=3)#
		abline(v=10)#
		abline(h=90)#
		dummy<-locator(1)#
		if(dummy$x<10 & dummy$y>90){#
			break#
		}#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}#
	#
par(bg='blue',mar=c(0,0,0,0))#
plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
text(x=50,y=75,labels='Beast Mode!',cex=6,col='yellow')#
text(x=50,y=50,labels=paste('Total=',total),cex=5,col='yellow')
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=2.5,y=97,labels='End',cex=2.7)#
		abline(v=10)#
		abline(h=90)#
		dummy<-locator(1)#
		if(dummy$x<10 & dummy$y>90){#
			break#
		}#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}#
	#
par(bg='blue',mar=c(0,0,0,0))#
plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
text(x=50,y=75,labels='Beast Mode!',cex=6,col='yellow')#
text(x=50,y=50,labels=paste('Total=',total),cex=5,col='yellow')
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=2.5,y=97,labels='End',cex=2.7)#
		dummy<-locator(1)#
		if(dummy$x<10 & dummy$y>90){#
			break#
		}#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}#
	#
par(bg='blue',mar=c(0,0,0,0))#
plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
text(x=50,y=75,labels='Beast Mode!',cex=6,col='yellow')#
text(x=50,y=50,labels=paste('Total=',total),cex=5,col='yellow')
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		text(x=50,y=10,labels=c('Warning: Please Consult a Physician Before Undertaking This Fucking Insane Exercise Routine'),cex=2)#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<4)#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=3,y=98.5,labels='End',cex=2.7)#
		dummy<-locator(1)#
		if(dummy$x<10 & dummy$y>90){#
			break#
		}#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}#
	#
par(bg='blue',mar=c(0,0,0,0))#
plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
text(x=50,y=75,labels='Beast Mode!',cex=6,col='yellow')#
text(x=50,y=50,labels=paste('Total=',total),cex=5,col='yellow')
par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		text(x=50,y=c(15,10),labels=c('Warning: Please Consult a Physician Before Undertaking','This Fucking Insane Exercise Routine'),cex=2)
par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		text(x=50,y=c(15,10,5),labels=c('Warning:', 'Please Consult a Physician Before Undertaking','This Fucking Insane Exercise Routine'),cex=c(4,2,2))
par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		text(x=50,y=c(18,10,5),labels=c('Warning:', 'Please Consult a Physician Before Undertaking','This Fucking Insane Exercise Routine'),cex=c(4,2,2))
par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		text(x=50,y=c(18,10,5),labels=c('Warning:', 'Please Consult a Physician Before Undertaking','This Fucking Insane Exercise Routine'),cex=c(4,2,2),col=c('yellow','black','black'))
par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		text(x=50,y=c(18,10,5),labels=c('Warning:', 'Please Consult a Physician Before Undertaking','This Fucking Insane Exercise Routine'),cex=c(4,1.7,1.7),col=c('yellow','black','black'))
par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)
?polygon()
polygon(x=c(85,85,95,95),y=c(5,95,5,95),border='black')
par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		polygon(x=c(85,85,95,95),y=c(5,95,95,5),border='black')
polygon(x=c(85,85,95,95),y=c(5,95,95,5),border='black',lwd=3)
polygon(x=c(85,85,95,95),y=c(5,95,95,5),border='black',lwd=5)
InspirationalPhrases<-c("Nice Work!","Oh Yeah!","You're a BEAST!")#
TodaysSet<-sample(rep(seq(1,13),4),52,replace=FALSE)#
total<-c()#
#Instructions when you stop#
for(i in 1:52){#
	if(i==1){#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c('Click Here to Start'),cex=5)#
		text(x=50,y=c(18,10,5),labels=c('Warning:', 'Please Consult a Physician Before Undertaking','This Fucking Insane Exercise Routine'),cex=c(4,1.7,1.7),col=c('yellow','black','black'))#
		#
		dummy<-locator(1)#
		StartDelay<-Sys.time()#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		while(difftime(Sys.time(),StartDelay)<3){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),StartDelay)<5){}#
		par(bg='green')#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		#
		dummy<-locator(1)#
		total<-sum(c(total,TodaysSet[i]))#
		#
		start<-Sys.time()#
	}else{#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		polygon(x=c(85,85,95,95),y=c(5,95,95,5),border='black',lwd=4)#
		while(difftime(Sys.time(),start)<4){#
			t1<-difftime(Sys.time(),start)#
			polygon(x=c(85,85,95,95),y=c(5,90*(t1/10),90*(t1/10),5),col='darkred')#
		}#
		par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		while(difftime(Sys.time(),start)<8){}#
		text(x=50,y=97,labels='Ready',cex=3)#
		while(difftime(Sys.time(),start)<10){}#
		par(bg='green',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=c(TodaysSet[i]),cex=40,offset=0)#
		text(x=50,y=97,labels='Go!',cex=3)#
		text(x=3,y=98.5,labels='End',cex=2.7)#
		dummy<-locator(1)#
		if(dummy$x<10 & dummy$y>90){#
			break#
		}#
		total<-sum(c(total,TodaysSet[i]))#
		start<-Sys.time()#
	}	#
}#
	#
par(bg='blue',mar=c(0,0,0,0))#
plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
text(x=50,y=75,labels='Beast Mode!',cex=6,col='yellow')#
text(x=50,y=50,labels=paste('Total=',total),cex=5,col='yellow')
par(bg='red',mar=c(0,0,0,0))#
		plot(x=1,y=1,type='n',xlim=c(0,100),ylim=c(0,100),axes=FALSE,xlab='',ylab='')#
		text(x=50,y=50,labels=InspirationalPhrases[runif(1,1,length(InspirationalPhrases))],cex=4)#
		text(x=50,y=5,labels=paste('Total=',total),cex=2.3)#
		polygon(x=c(85,85,95,95),y=c(5,95,95,5),border='black',lwd=4)
load("/Users/battrd/Documents/School&Work/WiscResearch/SquealMetabolism/ToyModel_v1.1.RData")
#Ryan Batt#
#26-April-2012#
#Steve suggested using a toy model to assess how the noise can mask a squeal signal in metabolism, when the signal is seen in Chl#
#
# =============================================================#
# = Steve's suggested "simplest toy model of the GPP problem" =#
# =============================================================#
#Squeal Signal for Chl:#
#Chl[t+1] = Phi[t]*Chl[t] + Eps[t]#
#Phi[t] = 1 - exp(-K_Phi*t)  #Note that Phi grows asymptotically to 1#
#Sigma2_Eps[t] = K_Eps*t #The variance of the Chl autoregressive process grows over time#
#
#GPP + Junk Noise#
#DO[t+1] = K_GPP*DO[t] - K_DO*(DO[t] - DO[1]) + Junk[t]#
#Metab_hat = DO[t+1] - DO[t]#
#
rm(list=ls())#
graphics.off()#
require("zoo")#
#
# ===============#
# = Set Options =#
# ===============#
RepsPerVar <- 150#
JunkVarianceS <- 10^seq(-4, 5, length.out=250)#
NStepsDefault <- 1000#
WindowSize <- 40#
RollTimeIndex <- 1:(NStepsDefault - (WindowSize-1))#
#
#
# ==================#
# = Load Functions =#
# ==================#
Ar1 <-function(x){#
	Nrmlzd <- x-mean(x)#
	Y <- (x-mean(x))[-1]#
	return(lm(Nrmlzd[-1] ~ Nrmlzd[-length(x)])$coef[[2]])#
}#
#
Ar1_Detrended <-function(x){#
	#First detrend, if needed#
	Model <- lm(x~c(1:length(x)))#
	Summary <- coef(summary(Model))#
	Slope <- Summary[2,1]#
	PValue <- Summary[2,4]#
	if(PValue<0.05){#
		Xnew <- x-(Slope*c(1:length(x)))#
	}else{#
		Xnew <- x#
	}#
	#Calculate AR(1)#
	Nrmlzd <- Xnew-mean(Xnew)#
	return(lm(Nrmlzd[-1] ~ Nrmlzd[-length(Xnew)])$coef[[2]])#
}#
#
Ar1_Fast <- function(x){#CHANGED 29Apr2012 _v1.2, yes, this helps quite a bit.#
	X_Pred <- matrix(data=c(rep(1,length(x)-1), x[-length(x)]),ncol=2)#
	CorMat <- solve(t(X_Pred)%*%X_Pred) #(X'X)^-1#
	Beta <- CorMat%*%t(X_Pred)%*%x[-1]#
	return(Beta[2,1])#
}#
#
# ===============================================================#
# = This is why I'm using Ar1_Fast (I <3 Matrix Algebra now...) =#
# ===============================================================#
# system.time(for(i in 1:10000){Ar1_Fast(Big)})#
# system.time(for(i in 1:10000){Ar1(Big)})#
# system.time(for(i in 1:10000){Ar1_Detrended(Big)})#
#
#
Chl_Model <- function(K_Phi=-(log(0.5*(-0.95 + 1)))/(Nsteps), K_Eps=1E-5, K_DO=0.5, Junk_Var=JunkVariance, Nsteps=NStepsDefault+1){#
	Time <- 1:(Nsteps)#
	Chl_0 <- 5 #A reasonable concentration of chlorophyll for Peter Lake in units of μg/L#
	DO_0 <- 250 #A reasonable concentration of dissolved oxygen when O2 is near saturation at a typical temperature in Peter Lake, in units of μmols/L (is equal to 8 mg/L)#
	#
	Chl <- c(Chl_0,rep(NA,Nsteps-1))#
	DO <- c(DO_0, rep(NA, Nsteps-1))#
	#
	Phi <- 1 - 0.5*exp(-K_Phi*Time)#
	Sigma2_Eps <- K_Eps*Time#
	#
	K_GPP_t <- rep(NA,Nsteps)#
	Junk <- rnorm(n=Nsteps, mean=0, sd=sqrt(Junk_Var))#
	Metab_hat <- c(rep(NA,Nsteps))#
	#
	for(i in 1:(Nsteps-1)){#
		Eps <- rnorm(n=1, mean=0, sd=sqrt(Sigma2_Eps[i]))#
		Chl[i+1] <- Phi[i]*Chl[i] + Eps + Chl_0*(1-Phi[i]) #AR(1) plus noise model, with changing AR(1) coefficient and centered around a time series mean of Chl_0#
		#
		K_GPP_t[i] <- 1+log(Chl[i]/Chl_0) #The idea here is to allow [DO] to grow with the log ratio of current chlorophyll to the inital value of chlorophyll (supporting the notion that the system is at equilibrium when Chlorophyll and DO are at their initial values--- when chlorophyll is higher than its initial value, DO will increase; when chlorophyll is lower than its initial value, DO will decrease)#
		DO[i+1] <- K_GPP_t[i]*DO[i] -K_DO*(DO[i]-DO_0) + Junk[i]#
		Metab_hat[i] <- DO[i+1] - DO[i]#FIXME this should probably just be Metab_hat[i], but I did the +1 so that the last value wasn't NA#
		#
	}#
	return(matrix(data=c("Chl"=Chl, "K_GPP_t"=K_GPP_t, "DO"=DO, "Metab_hat"=Metab_hat, "True_Sigma2_Eps"=Sigma2_Eps, "True_Phi"=Phi), ncol=6)[-max(Time),])	#
}#
#
RepJunk_Combo <- expand.grid(1:RepsPerVar,JunkVarianceS)#
SimSave <- array(dim=c(length(JunkVarianceS), 6, RepsPerVar))#
AllSimsSaved <- array(dim=c(NStepsDefault, 6, length(JunkVarianceS), RepsPerVar)) #CHANGED adding code to save the full time series from the simulations, not just the statistics#
AllSimsStatsSaved <- array(dim=c(max(RollTimeIndex), 6, length(JunkVarianceS), RepsPerVar))#
#
StartLoopTime <- proc.time()#
for(i in 1:nrow(RepJunk_Combo)){#
	Sim <- Chl_Model(Junk_Var=RepJunk_Combo[i,2])#
	AllSimsSaved[,,ceiling(i/RepsPerVar),RepJunk_Combo[i,1]] <- matrix(data=Sim, ncol=6) #CHANGED saving the full time series#
	#
	ChlVar <- rollapplyr(Sim[,1], width=WindowSize, by=1, FUN=var)#
	ChlAR1 <- rollapplyr(Sim[,1], width=WindowSize, by=1, FUN=Ar1_Fast)#
	MetabVar <- rollapplyr(Sim[,4], width=WindowSize, by=1, FUN=var)#
	MetabAR1 <- rollapplyr(Sim[,4], width=WindowSize, by=1, FUN=Ar1_Fast)#
	#
	TrueRollVar <- Sim[is.element(c(1:NStepsDefault), RollTimeIndex),5]#
	TrueRollAR1 <- Sim[is.element(c(1:NStepsDefault), RollTimeIndex),6]#
	#
	AllSimsStatsSaved[,,ceiling(i/RepsPerVar),RepJunk_Combo[i,1]] <- matrix(data=c(TrueRollVar, TrueRollAR1, ChlVar, ChlAR1, MetabVar, MetabAR1), ncol=6)#
	#
	R2_TrueChl_Var <- summary(lm(TrueRollVar~sqrt(ChlVar)))$adj.r.squared#
	R2_TrueChl_AR1 <- summary(lm(TrueRollAR1~ChlAR1))$adj.r.squared#
	R2_TrueMetab_Var <- summary(lm(TrueRollVar~sqrt(MetabVar)))$adj.r.squared#
	R2_TrueMetab_AR1 <- summary(lm(TrueRollAR1~MetabAR1))$adj.r.squared#
	R2_MetabChl_Var <- summary(lm(sqrt(ChlVar)~sqrt(MetabVar)))$adj.r.squared#
	R2_MetabChl_AR1 <- summary(lm(ChlAR1~MetabAR1))$adj.r.squared#
	#
	SimSave[ceiling(i/RepsPerVar), ,RepJunk_Combo[i,1]] <- c(R2_TrueChl_Var, R2_TrueChl_AR1, R2_TrueMetab_Var, R2_TrueMetab_AR1, R2_MetabChl_Var, R2_MetabChl_AR1)#
	#
	LoopProgress <- i/nrow(RepJunk_Combo)#
	LoopElapsed <- (proc.time() - StartLoopTime)[[3]]/60#
	print(c("Elapsed"=round(LoopElapsed,1),"%Complete"=round(LoopProgress*100,1), "ETA"=round(LoopElapsed/LoopProgress-LoopElapsed,1)))#
}#
#
SimSaveMean <- apply(SimSave, MARGIN=c(1,2), FUN=mean)#
#
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(3,3,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
#abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="", ylim=c(0,1))#
#abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
#abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="", ylim=c(0,1))#
#abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
#abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="", ylim=c(0,1))#
#abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
#
#
#use col2rgb and rgb to make colors#
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(3,3,0,0), bty="l", cex.axis=1.4, pch=21)#
plot(JunkVarianceS, SimSave[,1,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSave[,2,1], log="x", xlab="", ylab="", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSave[,3,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
plot(JunkVarianceS, SimSave[,4,1], log="x", xlab="", ylab="", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSave[,5,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
plot(JunkVarianceS, SimSave[,6,1], log="x", xlab="", ylab="", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
#
for(i in 2:RepsPerVar){#
	par(mfg=c(1,1))#
	points(JunkVarianceS, SimSave[,1,i],  xlab="", ylab="", xaxt="n", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
	par(mfg=c(2,1))#
	points(JunkVarianceS, SimSave[,2,i],  xlab="", ylab="", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
	par(mfg=c(1,2))#
	points(JunkVarianceS, SimSave[,3,i],  xlab="", ylab="", xaxt="n", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
	par(mfg=c(2,2))#
	points(JunkVarianceS, SimSave[,4,i],  xlab="", ylab="", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
	par(mfg=c(1,3))#
	points(JunkVarianceS, SimSave[,5,i],  xlab="", ylab="", xaxt="n", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
	par(mfg=c(2,3))#
	points(JunkVarianceS, SimSave[,6,i],  xlab="", ylab="", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")	#
}#
##
#
#zooming in on the part of interest#
# dev.new(height=4, width=7)#
# par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(3,3,0,0), bty="l", cex.axis=1.4)#
# plot(JunkVarianceS[25:80], SimSaveMean[25:80,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
# #abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
# mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
# plot(JunkVarianceS[25:80], SimSaveMean[25:80,2], log="x", xlab="", ylab="", ylim=c(0,1))#
# #abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
# mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
# mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
# plot(JunkVarianceS[25:80], SimSaveMean[25:80,3], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
# #abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
# plot(JunkVarianceS[25:80], SimSaveMean[25:80,4], log="x", xlab="", ylab="", ylim=c(0,1))#
# #abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
# mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
# plot(JunkVarianceS[25:80], SimSaveMean[25:80,5], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
# #abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
# plot(JunkVarianceS[25:80], SimSaveMean[25:80,6], log="x", xlab="", ylab="", ylim=c(0,1))#
# #abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
# mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
#
# =====================================================================================================================================#
# = Plot every time series for the Junk Variance value that produces the peak correlation between true AR(1) and the Metabolism AR(1) =#
# =====================================================================================================================================#
MaxAR1 <-9# which(SimSaveMean[,4]==max(SimSaveMean[,4]))#
BelowMax <- MaxAR1-0.5*MaxAR1#
AboveMax <- MaxAR1+0.5*MaxAR1#
#
SimsYlims52 <- apply(AllSimsSaved[,,MaxAR1,], MARGIN=c(2), FUN=range)#
SimsMean52 <- apply(AllSimsSaved[,,MaxAR1,], MARGIN=c(1,2), FUN=mean)#
# JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))]#
dev.new(height=7, width=7)#
par(mfrow=c(2,2), family="Times", mar=c(4,4,1,1), oma=c(0,0,4,0), cex.axis=1.25, bty="l")#
#
plot(1:NStepsDefault, AllSimsSaved[,1,MaxAR1,1], ylim=SimsYlims52[,1], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,1,MaxAR1,i], col="#D3D3D370")}#
lines(1:NStepsDefault, SimsMean52[,1], col="black")#
legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~(mu*g~L^-1))), cex=1.25, inset=-.05)#
#
plot(1:NStepsDefault, AllSimsSaved[,2,MaxAR1,1], ylim=SimsYlims52[,2], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,2,MaxAR1,i], col="#D3D3D370")}#
lines(1:NStepsDefault, SimsMean52[,2], col="black")#
legend("topleft", bty="n", legend=expression(bold(K[GPP*", "*t])), cex=1.25, inset=-.05)#
#
plot(1:NStepsDefault, AllSimsSaved[,3,MaxAR1,1], ylim=SimsYlims52[,3], type="l", xlab="", ylab="", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,3,MaxAR1,i], col="#D3D3D370")}#
lines(1:NStepsDefault, SimsMean52[,3], col="black")#
legend("topleft", bty="n", legend=expression(bold(DO~(mu*mol~L^-1))), cex=1.25, inset=-.05)#
#
plot(1:NStepsDefault, AllSimsSaved[,4,MaxAR1,1], ylim=SimsYlims52[,4], type="l", xlab="", ylab="", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,4,MaxAR1,i], col="#D3D3D370")}#
lines(1:NStepsDefault, SimsMean52[,4], col="black")#
legend("topleft", bty="n", legend=expression(bold(hat(M)~(mu*mol~L^-1~Delta*t^-1))), cex=1.25, inset=-.05)#
#
mtext(paste("Junk Variance = ", round(JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))], 2), sep=""), side=3, outer=TRUE, cex=1.25, font=2, line=2)#
#
#
#
#
# =================================================================================================================================================#
# = Plot the rolling window statistics for the Junk Variance value that produces the peak correlation between true AR(1) and the Metabolism AR(1) =#
# =================================================================================================================================================#
SimsStatsYlims52 <- apply(AllSimsStatsSaved[,,MaxAR1,], MARGIN=c(2), FUN=range)#
SimsStatsMean52 <- apply(AllSimsStatsSaved[,,MaxAR1,], MARGIN=c(1,2), FUN=mean)#
#
dev.new(height=4.5, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,4,1,1), oma=c(0,0,4,0), cex.axis=1.25, bty="l")#
#
plot(RollTimeIndex, AllSimsStatsSaved[,1,MaxAR1,1], ylim=SimsStatsYlims52[,1], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
lines(RollTimeIndex, SimsStatsMean52[,1], col="black")#
legend("topleft", bty="n", legend=expression(bold(True~sigma^2)), cex=1.25, inset=-.05)#
#
plot(RollTimeIndex, AllSimsStatsSaved[,2,MaxAR1,1], ylim=SimsStatsYlims52[,2], type="l", xlab="", ylab="", xaxt="s", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,2,MaxAR1,i], col="#D3D3D370")}#
lines(RollTimeIndex, SimsStatsMean52[,2], col="black")#
legend("topleft", bty="n", legend=expression(bold(True~phi1[1])), cex=1.25, inset=-.05)#
#
plot(RollTimeIndex, AllSimsStatsSaved[,3,MaxAR1,1], ylim=SimsStatsYlims52[,3], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,3,MaxAR1,i], col="#D3D3D370")}#
lines(RollTimeIndex, SimsStatsMean52[,3], col="black")#
legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~sigma^2)), cex=1.25, inset=-.05)#
#
plot(RollTimeIndex, AllSimsStatsSaved[,4,MaxAR1,1], ylim=SimsStatsYlims52[,4], type="l", xlab="", ylab="", xaxt="s", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,4,MaxAR1,i], col="#D3D3D370")}#
lines(RollTimeIndex, SimsStatsMean52[,4], col="black")#
legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~phi1[1])), cex=1.25, inset=-.05)#
#
plot(RollTimeIndex, AllSimsStatsSaved[,5,MaxAR1,1], ylim=SimsStatsYlims52[,5], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,5,MaxAR1,i], col="#D3D3D370")}#
lines(RollTimeIndex, SimsStatsMean52[,5], col="black")#
legend("topleft", bty="n", legend=expression(bold(hat(M)~sigma^2)), cex=1.25, inset=-.05)#
#
plot(RollTimeIndex, AllSimsStatsSaved[,6,MaxAR1,1], ylim=SimsStatsYlims52[,6], type="l", xlab="", ylab="", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,6,MaxAR1,i], col="#D3D3D370")}#
lines(RollTimeIndex, SimsStatsMean52[,6], col="black")#
legend("topleft", bty="n", legend=expression(bold(hat(M)~phi1[1])), cex=1.25, inset=-.05)#
#
mtext(paste("Junk Variance = ", round(JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))], 2), sep=""), side=3, outer=TRUE, cex=1.25, font=3, line=2)#
#
#
#
#
save.image("/Users/Battrd/Documents/School&Work/WiscResearch/SquealMetabolism/ToyModel_v1.3.RData")
dev.new(height=7, width=7)#
par(mfrow=c(2,2), family="Times", mar=c(4,4,1,1), oma=c(0,0,4,0), cex.axis=1.25, bty="l")#
#
plot(1:NStepsDefault, AllSimsSaved[,1,MaxAR1,1], ylim=SimsYlims52[,1], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,1,MaxAR1,i], col="#D3D3D370")}#
lines(1:NStepsDefault, SimsMean52[,1], col="black")#
legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~(mu*g~L^-1))), cex=1.25, inset=-.05)#
#
plot(1:NStepsDefault, AllSimsSaved[,2,MaxAR1,1], ylim=SimsYlims52[,2], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,2,MaxAR1,i], col="#D3D3D370")}#
lines(1:NStepsDefault, SimsMean52[,2], col="black")#
legend("topleft", bty="n", legend=expression(bold(K[GPP*", "*t])), cex=1.25, inset=-.05)#
#
plot(1:NStepsDefault, AllSimsSaved[,3,MaxAR1,1], ylim=SimsYlims52[,3], type="l", xlab="", ylab="", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,3,MaxAR1,i], col="#D3D3D370")}#
lines(1:NStepsDefault, SimsMean52[,3], col="black")#
legend("topleft", bty="n", legend=expression(bold(DO~(mu*mol~L^-1))), cex=1.25, inset=-.05)#
#
plot(1:NStepsDefault, AllSimsSaved[,4,MaxAR1,1], ylim=SimsYlims52[,4], type="l", xlab="", ylab="", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,4,MaxAR1,i], col="#D3D3D370")}#
lines(1:NStepsDefault, SimsMean52[,4], col="black")#
legend("topleft", bty="n", legend=expression(bold(hat(M)~(mu*mol~L^-1~Delta*t^-1))), cex=1.25, inset=-.05)#
#
mtext(paste("Junk Variance = ", round(JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))], 2), sep=""), side=3, outer=TRUE, cex=1.25, font=3, line=2)
BelowMax
AboveMax
MaxAR1
MaxAR1 <-which(SimSaveMean[,4]==max(SimSaveMean[,4]))#
BelowMax <- MaxAR1-0.5*MaxAR1#
AboveMax <- MaxAR1+0.5*MaxAR1#
#
SimsYlims52 <- apply(AllSimsSaved[,,MaxAR1,], MARGIN=c(2), FUN=range)#
SimsMean52 <- apply(AllSimsSaved[,,MaxAR1,], MARGIN=c(1,2), FUN=mean)#
# JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))]#
dev.new(height=7, width=7)#
par(mfrow=c(2,2), family="Times", mar=c(4,4,1,1), oma=c(0,0,4,0), cex.axis=1.25, bty="l")#
#
plot(1:NStepsDefault, AllSimsSaved[,1,MaxAR1,1], ylim=SimsYlims52[,1], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,1,MaxAR1,i], col="#D3D3D370")}#
lines(1:NStepsDefault, SimsMean52[,1], col="black")#
legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~(mu*g~L^-1))), cex=1.25, inset=-.05)#
#
plot(1:NStepsDefault, AllSimsSaved[,2,MaxAR1,1], ylim=SimsYlims52[,2], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,2,MaxAR1,i], col="#D3D3D370")}#
lines(1:NStepsDefault, SimsMean52[,2], col="black")#
legend("topleft", bty="n", legend=expression(bold(K[GPP*", "*t])), cex=1.25, inset=-.05)#
#
plot(1:NStepsDefault, AllSimsSaved[,3,MaxAR1,1], ylim=SimsYlims52[,3], type="l", xlab="", ylab="", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,3,MaxAR1,i], col="#D3D3D370")}#
lines(1:NStepsDefault, SimsMean52[,3], col="black")#
legend("topleft", bty="n", legend=expression(bold(DO~(mu*mol~L^-1))), cex=1.25, inset=-.05)#
#
plot(1:NStepsDefault, AllSimsSaved[,4,MaxAR1,1], ylim=SimsYlims52[,4], type="l", xlab="", ylab="", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,4,MaxAR1,i], col="#D3D3D370")}#
lines(1:NStepsDefault, SimsMean52[,4], col="black")#
legend("topleft", bty="n", legend=expression(bold(hat(M)~(mu*mol~L^-1~Delta*t^-1))), cex=1.25, inset=-.05)#
#
mtext(paste("Junk Variance = ", round(JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))], 2), sep=""), side=3, outer=TRUE, cex=1.25, font=3, line=2)#
#
#
#
#
# =================================================================================================================================================#
# = Plot the rolling window statistics for the Junk Variance value that produces the peak correlation between true AR(1) and the Metabolism AR(1) =#
# =================================================================================================================================================#
SimsStatsYlims52 <- apply(AllSimsStatsSaved[,,MaxAR1,], MARGIN=c(2), FUN=range)#
SimsStatsMean52 <- apply(AllSimsStatsSaved[,,MaxAR1,], MARGIN=c(1,2), FUN=mean)#
#
dev.new(height=4.5, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(4,4,1,1), oma=c(0,0,4,0), cex.axis=1.25, bty="l")#
#
plot(RollTimeIndex, AllSimsStatsSaved[,1,MaxAR1,1], ylim=SimsStatsYlims52[,1], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
lines(RollTimeIndex, SimsStatsMean52[,1], col="black")#
legend("topleft", bty="n", legend=expression(bold(True~sigma^2)), cex=1.25, inset=-.05)#
#
plot(RollTimeIndex, AllSimsStatsSaved[,2,MaxAR1,1], ylim=SimsStatsYlims52[,2], type="l", xlab="", ylab="", xaxt="s", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,2,MaxAR1,i], col="#D3D3D370")}#
lines(RollTimeIndex, SimsStatsMean52[,2], col="black")#
legend("topleft", bty="n", legend=expression(bold(True~phi1[1])), cex=1.25, inset=-.05)#
#
plot(RollTimeIndex, AllSimsStatsSaved[,3,MaxAR1,1], ylim=SimsStatsYlims52[,3], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,3,MaxAR1,i], col="#D3D3D370")}#
lines(RollTimeIndex, SimsStatsMean52[,3], col="black")#
legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~sigma^2)), cex=1.25, inset=-.05)#
#
plot(RollTimeIndex, AllSimsStatsSaved[,4,MaxAR1,1], ylim=SimsStatsYlims52[,4], type="l", xlab="", ylab="", xaxt="s", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,4,MaxAR1,i], col="#D3D3D370")}#
lines(RollTimeIndex, SimsStatsMean52[,4], col="black")#
legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~phi1[1])), cex=1.25, inset=-.05)#
#
plot(RollTimeIndex, AllSimsStatsSaved[,5,MaxAR1,1], ylim=SimsStatsYlims52[,5], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,5,MaxAR1,i], col="#D3D3D370")}#
lines(RollTimeIndex, SimsStatsMean52[,5], col="black")#
legend("topleft", bty="n", legend=expression(bold(hat(M)~sigma^2)), cex=1.25, inset=-.05)#
#
plot(RollTimeIndex, AllSimsStatsSaved[,6,MaxAR1,1], ylim=SimsStatsYlims52[,6], type="l", xlab="", ylab="", col="#D3D3D370")#
for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,6,MaxAR1,i], col="#D3D3D370")}#
lines(RollTimeIndex, SimsStatsMean52[,6], col="black")#
legend("topleft", bty="n", legend=expression(bold(hat(M)~phi1[1])), cex=1.25, inset=-.05)#
#
mtext(paste("Junk Variance = ", round(JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))], 2), sep=""), side=3, outer=TRUE, cex=1.25, font=3, line=2)
MaxAR1
BelowMax
MaxAR1 <-which(SimSaveMean[,4]==max(SimSaveMean[,4]))#
BelowMax <- MaxAR1-0.5*MaxAR1#
AboveMax <- MaxAR1+0.5*MaxAR1#
#
TheRightJunk <- c(MaxAR1, BelowMax, AboveMax)
#
for(i in 1:3){#
	SimsYlims52 <- apply(AllSimsSaved[,,TheRightJunk[i],], MARGIN=c(2), FUN=range)#
	SimsMean52 <- apply(AllSimsSaved[,,TheRightJunk[i],], MARGIN=c(1,2), FUN=mean)#
	# JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))]#
	dev.new(height=7, width=7)#
	par(mfrow=c(2,2), family="Times", mar=c(4,4,1,1), oma=c(0,0,4,0), cex.axis=1.25, bty="l")#
#
	plot(1:NStepsDefault, AllSimsSaved[,1,TheRightJunk[i],1], ylim=SimsYlims52[,1], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,1,TheRightJunk[i],i], col="#D3D3D370")}#
	lines(1:NStepsDefault, SimsMean52[,1], col="black")#
	legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~(mu*g~L^-1))), cex=1.25, inset=-.05)#
#
	plot(1:NStepsDefault, AllSimsSaved[,2,TheRightJunk[i],1], ylim=SimsYlims52[,2], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,2,TheRightJunk[i],i], col="#D3D3D370")}#
	lines(1:NStepsDefault, SimsMean52[,2], col="black")#
	legend("topleft", bty="n", legend=expression(bold(K[GPP*", "*t])), cex=1.25, inset=-.05)#
#
	plot(1:NStepsDefault, AllSimsSaved[,3,TheRightJunk[i],1], ylim=SimsYlims52[,3], type="l", xlab="", ylab="", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,3,TheRightJunk[i],i], col="#D3D3D370")}#
	lines(1:NStepsDefault, SimsMean52[,3], col="black")#
	legend("topleft", bty="n", legend=expression(bold(DO~(mu*mol~L^-1))), cex=1.25, inset=-.05)#
#
	plot(1:NStepsDefault, AllSimsSaved[,4,TheRightJunk[i],1], ylim=SimsYlims52[,4], type="l", xlab="", ylab="", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,4,TheRightJunk[i],i], col="#D3D3D370")}#
	lines(1:NStepsDefault, SimsMean52[,4], col="black")#
	legend("topleft", bty="n", legend=expression(bold(hat(M)~(mu*mol~L^-1~Delta*t^-1))), cex=1.25, inset=-.05)#
#
	mtext(paste("Junk Variance = ", round(JunkVarianceS[TheRightJunk[i]], 2), sep=""), side=3, outer=TRUE, cex=1.25, font=3, line=2)#
#
#
#
#
	# =================================================================================================================================================#
	# = Plot the rolling window statistics for the Junk Variance value that produces the peak correlation between true AR(1) and the Metabolism AR(1) =#
	# =================================================================================================================================================#
	SimsStatsYlims52 <- apply(AllSimsStatsSaved[,,TheRightJunk[i],], MARGIN=c(2), FUN=range)#
	SimsStatsMean52 <- apply(AllSimsStatsSaved[,,TheRightJunk[i],], MARGIN=c(1,2), FUN=mean)#
#
	dev.new(height=4.5, width=7)#
	par(mfcol=c(2,3), family="Times", mar=c(4,4,1,1), oma=c(0,0,4,0), cex.axis=1.25, bty="l")#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,1,TheRightJunk[i],1], ylim=SimsStatsYlims52[,1], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	lines(RollTimeIndex, SimsStatsMean52[,1], col="black")#
	legend("topleft", bty="n", legend=expression(bold(True~sigma^2)), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,2,TheRightJunk[i],1], ylim=SimsStatsYlims52[,2], type="l", xlab="", ylab="", xaxt="s", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,2,TheRightJunk[i],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,2], col="black")#
	legend("topleft", bty="n", legend=expression(bold(True~phi1[1])), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,3,TheRightJunk[i],1], ylim=SimsStatsYlims52[,3], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,3,TheRightJunk[i],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,3], col="black")#
	legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~sigma^2)), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,4,TheRightJunk[i],1], ylim=SimsStatsYlims52[,4], type="l", xlab="", ylab="", xaxt="s", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,4,TheRightJunk[i],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,4], col="black")#
	legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~phi1[1])), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,5,TheRightJunk[i],1], ylim=SimsStatsYlims52[,5], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,5,TheRightJunk[i],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,5], col="black")#
	legend("topleft", bty="n", legend=expression(bold(hat(M)~sigma^2)), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,6,TheRightJunk[i],1], ylim=SimsStatsYlims52[,6], type="l", xlab="", ylab="", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,6,TheRightJunk[i],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,6], col="black")#
	legend("topleft", bty="n", legend=expression(bold(hat(M)~phi1[1])), cex=1.25, inset=-.05)#
#
	mtext(paste("Junk Variance = ", round(JunkVarianceS[TheRightJunk[i]], 2), sep=""), side=3, outer=TRUE, cex=1.25, font=3, line=2)#
}
	SimsStatsYlims52 <- apply(AllSimsStatsSaved[,,TheRightJunk[i],], MARGIN=c(2), FUN=range)
SimsStatsYlims52
TheRightJunk[i]
TheRightJunk <- c(MaxAR1, BelowMax, AboveMax)
TheRightJunk
TheRightJunk[i]
i
MaxAR1 <-which(SimSaveMean[,4]==max(SimSaveMean[,4]))#
BelowMax <- MaxAR1-0.5*MaxAR1#
AboveMax <- MaxAR1+0.5*MaxAR1#
#
TheRightJunk <- c(MaxAR1, BelowMax, AboveMax)#
#
#
for(j in 1:3){#
	SimsYlims52 <- apply(AllSimsSaved[,,TheRightJunk[j],], MARGIN=c(2), FUN=range)#
	SimsMean52 <- apply(AllSimsSaved[,,TheRightJunk[j],], MARGIN=c(1,2), FUN=mean)#
	# JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))]#
	dev.new(height=7, width=7)#
	par(mfrow=c(2,2), family="Times", mar=c(4,4,1,1), oma=c(0,0,4,0), cex.axis=1.25, bty="l")#
#
	plot(1:NStepsDefault, AllSimsSaved[,1,TheRightJunk[j],1], ylim=SimsYlims52[,1], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,1,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(1:NStepsDefault, SimsMean52[,1], col="black")#
	legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~(mu*g~L^-1))), cex=1.25, inset=-.05)#
#
	plot(1:NStepsDefault, AllSimsSaved[,2,TheRightJunk[j],1], ylim=SimsYlims52[,2], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,2,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(1:NStepsDefault, SimsMean52[,2], col="black")#
	legend("topleft", bty="n", legend=expression(bold(K[GPP*", "*t])), cex=1.25, inset=-.05)#
#
	plot(1:NStepsDefault, AllSimsSaved[,3,TheRightJunk[j],1], ylim=SimsYlims52[,3], type="l", xlab="", ylab="", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,3,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(1:NStepsDefault, SimsMean52[,3], col="black")#
	legend("topleft", bty="n", legend=expression(bold(DO~(mu*mol~L^-1))), cex=1.25, inset=-.05)#
#
	plot(1:NStepsDefault, AllSimsSaved[,4,TheRightJunk[j],1], ylim=SimsYlims52[,4], type="l", xlab="", ylab="", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,4,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(1:NStepsDefault, SimsMean52[,4], col="black")#
	legend("topleft", bty="n", legend=expression(bold(hat(M)~(mu*mol~L^-1~Delta*t^-1))), cex=1.25, inset=-.05)#
#
	mtext(paste("Junk Variance = ", round(JunkVarianceS[TheRightJunk[j]], 2), sep=""), side=3, outer=TRUE, cex=1.25, font=3, line=2)#
#
#
#
#
	# =================================================================================================================================================#
	# = Plot the rolling window statistics for the Junk Variance value that produces the peak correlation between true AR(1) and the Metabolism AR(1) =#
	# =================================================================================================================================================#
	SimsStatsYlims52 <- apply(AllSimsStatsSaved[,,TheRightJunk[j],], MARGIN=c(2), FUN=range)#
	SimsStatsMean52 <- apply(AllSimsStatsSaved[,,TheRightJunk[j],], MARGIN=c(1,2), FUN=mean)#
#
	dev.new(height=4.5, width=7)#
	par(mfcol=c(2,3), family="Times", mar=c(4,4,1,1), oma=c(0,0,4,0), cex.axis=1.25, bty="l")#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,1,TheRightJunk[j],1], ylim=SimsStatsYlims52[,1], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	lines(RollTimeIndex, SimsStatsMean52[,1], col="black")#
	legend("topleft", bty="n", legend=expression(bold(True~sigma^2)), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,2,TheRightJunk[j],1], ylim=SimsStatsYlims52[,2], type="l", xlab="", ylab="", xaxt="s", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,2,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,2], col="black")#
	legend("topleft", bty="n", legend=expression(bold(True~phi1[1])), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,3,TheRightJunk[j],1], ylim=SimsStatsYlims52[,3], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,3,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,3], col="black")#
	legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~sigma^2)), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,4,TheRightJunk[j],1], ylim=SimsStatsYlims52[,4], type="l", xlab="", ylab="", xaxt="s", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,4,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,4], col="black")#
	legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~phi1[1])), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,5,TheRightJunk[j],1], ylim=SimsStatsYlims52[,5], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,5,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,5], col="black")#
	legend("topleft", bty="n", legend=expression(bold(hat(M)~sigma^2)), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,6,TheRightJunk[j],1], ylim=SimsStatsYlims52[,6], type="l", xlab="", ylab="", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,6,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,6], col="black")#
	legend("topleft", bty="n", legend=expression(bold(hat(M)~phi1[1])), cex=1.25, inset=-.05)#
#
	mtext(paste("Junk Variance = ", round(JunkVarianceS[TheRightJunk[j]], 2), sep=""), side=3, outer=TRUE, cex=1.25, font=3, line=2)#
}
#Ryan Batt#
#26-April-2012#
#Steve suggested using a toy model to assess how the noise can mask a squeal signal in metabolism, when the signal is seen in Chl#
#
# =============================================================#
# = Steve's suggested "simplest toy model of the GPP problem" =#
# =============================================================#
#Squeal Signal for Chl:#
#Chl[t+1] = Phi[t]*Chl[t] + Eps[t]#
#Phi[t] = 1 - exp(-K_Phi*t)  #Note that Phi grows asymptotically to 1#
#Sigma2_Eps[t] = K_Eps*t #The variance of the Chl autoregressive process grows over time#
#
#GPP + Junk Noise#
#DO[t+1] = K_GPP*DO[t] - K_DO*(DO[t] - DO[1]) + Junk[t]#
#Metab_hat = DO[t+1] - DO[t]#
#
rm(list=ls())#
graphics.off()#
require("zoo")#
#
# ===============#
# = Set Options =#
# ===============#
RepsPerVar <- 10 #150#
JunkVarianceS <- 10^seq(-4, 5, length.out=10)#
NStepsDefault <- 1000#
WindowSize <- 40#
RollTimeIndex <- 1:(NStepsDefault - (WindowSize-1))#
#
#
# ==================#
# = Load Functions =#
# ==================#
Ar1 <-function(x){#
	Nrmlzd <- x-mean(x)#
	Y <- (x-mean(x))[-1]#
	return(lm(Nrmlzd[-1] ~ Nrmlzd[-length(x)])$coef[[2]])#
}#
#
Ar1_Detrended <-function(x){#
	#First detrend, if needed#
	Model <- lm(x~c(1:length(x)))#
	Summary <- coef(summary(Model))#
	Slope <- Summary[2,1]#
	PValue <- Summary[2,4]#
	if(PValue<0.05){#
		Xnew <- x-(Slope*c(1:length(x)))#
	}else{#
		Xnew <- x#
	}#
	#Calculate AR(1)#
	Nrmlzd <- Xnew-mean(Xnew)#
	return(lm(Nrmlzd[-1] ~ Nrmlzd[-length(Xnew)])$coef[[2]])#
}#
#
Ar1_Fast <- function(x){#CHANGED 29Apr2012 _v1.2, yes, this helps quite a bit.#
	X_Pred <- matrix(data=c(rep(1,length(x)-1), x[-length(x)]),ncol=2)#
	CorMat <- solve(t(X_Pred)%*%X_Pred) #(X'X)^-1#
	Beta <- CorMat%*%t(X_Pred)%*%x[-1]#
	return(Beta[2,1])#
}#
#
# ===============================================================#
# = This is why I'm using Ar1_Fast (I <3 Matrix Algebra now...) =#
# ===============================================================#
# system.time(for(i in 1:10000){Ar1_Fast(Big)})#
# system.time(for(i in 1:10000){Ar1(Big)})#
# system.time(for(i in 1:10000){Ar1_Detrended(Big)})#
#
#
# ======================================================#
# = This is the model used to generate all of the data =#
# ======================================================#
Chl_Model <- function(K_Phi=-(log(0.5*(-0.95 + 1)))/(Nsteps), K_Eps=1E-5, K_DO=0.5, Junk_Var=JunkVariance, Nsteps=NStepsDefault+1){#
	Time <- 1:(Nsteps)#
	Chl_0 <- 5 #A reasonable concentration of chlorophyll for Peter Lake in units of μg/L#
	DO_0 <- 250 #A reasonable concentration of dissolved oxygen when O2 is near saturation at a typical temperature in Peter Lake, in units of μmols/L (is equal to 8 mg/L)#
	#
	Chl <- c(Chl_0,rep(NA,Nsteps-1))#
	DO <- c(DO_0, rep(NA, Nsteps-1))#
	#
	Phi <- 1 - 0.5*exp(-K_Phi*Time)#
	Sigma2_Eps <- K_Eps*Time#
	#
	K_GPP_t <- rep(NA,Nsteps)#
	Junk <- rnorm(n=Nsteps, mean=0, sd=sqrt(Junk_Var))#
	Metab_hat <- c(rep(NA,Nsteps))#
	#
	for(i in 1:(Nsteps-1)){#
		Eps <- rnorm(n=1, mean=0, sd=sqrt(Sigma2_Eps[i]))#
		Chl[i+1] <- Phi[i]*Chl[i] + Eps + Chl_0*(1-Phi[i]) #AR(1) plus noise model, with changing AR(1) coefficient and centered around a time series mean of Chl_0#
		#
		K_GPP_t[i] <- 1+log(Chl[i]/Chl_0) #The idea here is to allow [DO] to grow with the log ratio of current chlorophyll to the inital value of chlorophyll (supporting the notion that the system is at equilibrium when Chlorophyll and DO are at their initial values--- when chlorophyll is higher than its initial value, DO will increase; when chlorophyll is lower than its initial value, DO will decrease)#
		DO[i+1] <- K_GPP_t[i]*DO[i] -K_DO*(DO[i]-DO_0) + Junk[i]#
		Metab_hat[i] <- DO[i+1] - DO[i]#
		#
	}#
	return(matrix(data=c("Chl"=Chl, "K_GPP_t"=K_GPP_t, "DO"=DO, "Metab_hat"=Metab_hat, "True_Sigma2_Eps"=Sigma2_Eps, "True_Phi"=Phi), ncol=6)[-max(Time),])	#
}#
#
RepJunk_Combo <- expand.grid(1:RepsPerVar,JunkVarianceS)#
SimSave <- array(dim=c(length(JunkVarianceS), 6, RepsPerVar))#
AllSimsSaved <- array(dim=c(NStepsDefault, 6, length(JunkVarianceS), RepsPerVar)) #CHANGED adding code to save the full time series from the simulations, not just the statistics#
AllSimsStatsSaved <- array(dim=c(max(RollTimeIndex), 6, length(JunkVarianceS), RepsPerVar))#
#
StartLoopTime <- proc.time()#
for(i in 1:nrow(RepJunk_Combo)){#
	Sim <- Chl_Model(Junk_Var=RepJunk_Combo[i,2])#
	AllSimsSaved[,,ceiling(i/RepsPerVar),RepJunk_Combo[i,1]] <- matrix(data=Sim, ncol=6) #CHANGED saving the full time series#
	#
	ChlVar <- rollapplyr(Sim[,1], width=WindowSize, by=1, FUN=var)#
	ChlAR1 <- rollapplyr(Sim[,1], width=WindowSize, by=1, FUN=Ar1_Fast)#
	MetabVar <- rollapplyr(Sim[,4], width=WindowSize, by=1, FUN=var)#
	MetabAR1 <- rollapplyr(Sim[,4], width=WindowSize, by=1, FUN=Ar1_Fast)#
	#
	TrueRollVar <- Sim[is.element(c(1:NStepsDefault), RollTimeIndex),5]#
	TrueRollAR1 <- Sim[is.element(c(1:NStepsDefault), RollTimeIndex),6]#
	#
	AllSimsStatsSaved[,,ceiling(i/RepsPerVar),RepJunk_Combo[i,1]] <- matrix(data=c(TrueRollVar, TrueRollAR1, ChlVar, ChlAR1, MetabVar, MetabAR1), ncol=6)#
	#
	R2_TrueChl_Var <- summary(lm(TrueRollVar~sqrt(ChlVar)))$adj.r.squared#
	R2_TrueChl_AR1 <- summary(lm(TrueRollAR1~ChlAR1))$adj.r.squared#
	R2_TrueMetab_Var <- summary(lm(TrueRollVar~sqrt(MetabVar)))$adj.r.squared#
	R2_TrueMetab_AR1 <- summary(lm(TrueRollAR1~MetabAR1))$adj.r.squared#
	R2_MetabChl_Var <- summary(lm(sqrt(ChlVar)~sqrt(MetabVar)))$adj.r.squared#
	R2_MetabChl_AR1 <- summary(lm(ChlAR1~MetabAR1))$adj.r.squared#
	#
	SimSave[ceiling(i/RepsPerVar), ,RepJunk_Combo[i,1]] <- c(R2_TrueChl_Var, R2_TrueChl_AR1, R2_TrueMetab_Var, R2_TrueMetab_AR1, R2_MetabChl_Var, R2_MetabChl_AR1)#
	#
	LoopProgress <- i/nrow(RepJunk_Combo)#
	LoopElapsed <- (proc.time() - StartLoopTime)[[3]]/60#
	print(c("Elapsed"=round(LoopElapsed,1),"%Complete"=round(LoopProgress*100,1), "ETA"=round(LoopElapsed/LoopProgress-LoopElapsed,1)))#
}#
#
SimSaveMean <- apply(SimSave, MARGIN=c(1,2), FUN=mean)#
#
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(3,3,0,0), bty="l", cex.axis=1.4)#
plot(JunkVarianceS, SimSaveMean[,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
#abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,2], log="x", xlab="", ylab="", ylim=c(0,1))#
#abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,3], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
#abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
plot(JunkVarianceS, SimSaveMean[,4], log="x", xlab="", ylab="", ylim=c(0,1))#
#abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSaveMean[,5], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
#abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
plot(JunkVarianceS, SimSaveMean[,6], log="x", xlab="", ylab="", ylim=c(0,1))#
#abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
#
#
#use col2rgb and rgb to make colors#
dev.new(height=4, width=7)#
par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(3,3,0,0), bty="l", cex.axis=1.4, pch=21)#
plot(JunkVarianceS, SimSave[,1,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
plot(JunkVarianceS, SimSave[,2,1], log="x", xlab="", ylab="", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSave[,3,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
plot(JunkVarianceS, SimSave[,4,1], log="x", xlab="", ylab="", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
plot(JunkVarianceS, SimSave[,5,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
plot(JunkVarianceS, SimSave[,6,1], log="x", xlab="", ylab="", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
#
for(i in 2:RepsPerVar){#
	par(mfg=c(1,1))#
	points(JunkVarianceS, SimSave[,1,i],  xlab="", ylab="", xaxt="n", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
	par(mfg=c(2,1))#
	points(JunkVarianceS, SimSave[,2,i],  xlab="", ylab="", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
	par(mfg=c(1,2))#
	points(JunkVarianceS, SimSave[,3,i],  xlab="", ylab="", xaxt="n", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
	par(mfg=c(2,2))#
	points(JunkVarianceS, SimSave[,4,i],  xlab="", ylab="", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
	par(mfg=c(1,3))#
	points(JunkVarianceS, SimSave[,5,i],  xlab="", ylab="", xaxt="n", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")#
	par(mfg=c(2,3))#
	points(JunkVarianceS, SimSave[,6,i],  xlab="", ylab="", ylim=c(0,1), bg="#D3D3D319", col="#D3D3D319")	#
}#
##
#
#zooming in on the part of interest#
# dev.new(height=4, width=7)#
# par(mfcol=c(2,3), family="Times", mar=c(3,3,1,1), oma=c(3,3,0,0), bty="l", cex.axis=1.4)#
# plot(JunkVarianceS[25:80], SimSaveMean[25:80,1], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
# #abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
# mtext(expression(Varaince~R^2), side=2, line=3, cex=1.25)#
# plot(JunkVarianceS[25:80], SimSaveMean[25:80,2], log="x", xlab="", ylab="", ylim=c(0,1))#
# #abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
# mtext(expression(AR(1)~R^2), side=2, line=3, cex=1.25)#
# mtext(expression(True~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
# plot(JunkVarianceS[25:80], SimSaveMean[25:80,3], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
# #abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
# plot(JunkVarianceS[25:80], SimSaveMean[25:80,4], log="x", xlab="", ylab="", ylim=c(0,1))#
# #abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
# mtext(expression(True~vs*.~hat(M)*etabolism), side=1, line=4, cex=1.25)#
# plot(JunkVarianceS[25:80], SimSaveMean[25:80,5], log="x", xlab="", ylab="", xaxt="n", ylim=c(0,1))#
# #abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
# plot(JunkVarianceS[25:80], SimSaveMean[25:80,6], log="x", xlab="", ylab="", ylim=c(0,1))#
# #abline(v=JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))])#
# mtext(expression(hat(M)*etabolism~vs*.~Chl*"-"*italic(a)), side=1, line=4, cex=1.25)#
#
# =====================================================================================================================================#
# = Plot every time series for the Junk Variance value that produces the peak correlation between true AR(1) and the Metabolism AR(1) =#
# =====================================================================================================================================#
MaxAR1 <-which(SimSaveMean[,4]==max(SimSaveMean[,4]))#
BelowMax <- MaxAR1-0.5*MaxAR1#
AboveMax <- MaxAR1+0.5*MaxAR1#
#
TheRightJunk <- c(MaxAR1, BelowMax, AboveMax)#
#
#
for(j in 1:3){#
	SimsYlims52 <- apply(AllSimsSaved[,,TheRightJunk[j],], MARGIN=c(2), FUN=range)#
	SimsMean52 <- apply(AllSimsSaved[,,TheRightJunk[j],], MARGIN=c(1,2), FUN=mean)#
	# JunkVarianceS[which(SimSaveMean[,4]==max(SimSaveMean[,4]))]#
	dev.new(height=7, width=7)#
	par(mfrow=c(2,2), family="Times", mar=c(4,4,1,1), oma=c(0,0,4,0), cex.axis=1.25, bty="l")#
#
	plot(1:NStepsDefault, AllSimsSaved[,1,TheRightJunk[j],1], ylim=SimsYlims52[,1], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,1,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(1:NStepsDefault, SimsMean52[,1], col="black")#
	legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~(mu*g~L^-1))), cex=1.25, inset=-.05)#
#
	plot(1:NStepsDefault, AllSimsSaved[,2,TheRightJunk[j],1], ylim=SimsYlims52[,2], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,2,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(1:NStepsDefault, SimsMean52[,2], col="black")#
	legend("topleft", bty="n", legend=expression(bold(K[GPP*", "*t])), cex=1.25, inset=-.05)#
#
	plot(1:NStepsDefault, AllSimsSaved[,3,TheRightJunk[j],1], ylim=SimsYlims52[,3], type="l", xlab="", ylab="", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,3,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(1:NStepsDefault, SimsMean52[,3], col="black")#
	legend("topleft", bty="n", legend=expression(bold(DO~(mu*mol~L^-1))), cex=1.25, inset=-.05)#
#
	plot(1:NStepsDefault, AllSimsSaved[,4,TheRightJunk[j],1], ylim=SimsYlims52[,4], type="l", xlab="", ylab="", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(1:NStepsDefault, AllSimsSaved[,4,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(1:NStepsDefault, SimsMean52[,4], col="black")#
	legend("topleft", bty="n", legend=expression(bold(hat(M)~(mu*mol~L^-1~Delta*t^-1))), cex=1.25, inset=-.05)#
#
	mtext(paste("Junk Variance = ", round(JunkVarianceS[TheRightJunk[j]], 2), sep=""), side=3, outer=TRUE, cex=1.25, font=3, line=2)#
#
#
#
#
	# =================================================================================================================================================#
	# = Plot the rolling window statistics for the Junk Variance value that produces the peak correlation between true AR(1) and the Metabolism AR(1) =#
	# =================================================================================================================================================#
	SimsStatsYlims52 <- apply(AllSimsStatsSaved[,,TheRightJunk[j],], MARGIN=c(2), FUN=range)#
	SimsStatsMean52 <- apply(AllSimsStatsSaved[,,TheRightJunk[j],], MARGIN=c(1,2), FUN=mean)#
#
	dev.new(height=4.5, width=7)#
	par(mfcol=c(2,3), family="Times", mar=c(4,4,1,1), oma=c(0,0,4,0), cex.axis=1.25, bty="l")#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,1,TheRightJunk[j],1], ylim=SimsStatsYlims52[,1], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	lines(RollTimeIndex, SimsStatsMean52[,1], col="black")#
	legend("topleft", bty="n", legend=expression(bold(True~sigma^2)), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,2,TheRightJunk[j],1], ylim=SimsStatsYlims52[,2], type="l", xlab="", ylab="", xaxt="s", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,2,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,2], col="black")#
	legend("topleft", bty="n", legend=expression(bold(True~phi1[1])), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,3,TheRightJunk[j],1], ylim=SimsStatsYlims52[,3], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,3,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,3], col="black")#
	legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~sigma^2)), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,4,TheRightJunk[j],1], ylim=SimsStatsYlims52[,4], type="l", xlab="", ylab="", xaxt="s", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,4,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,4], col="black")#
	legend("topleft", bty="n", legend=expression(bold(Chl*"-"*bolditalic(a)~phi1[1])), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,5,TheRightJunk[j],1], ylim=SimsStatsYlims52[,5], type="l", xlab="", ylab="", xaxt="n", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,5,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,5], col="black")#
	legend("topleft", bty="n", legend=expression(bold(hat(M)~sigma^2)), cex=1.25, inset=-.05)#
#
	plot(RollTimeIndex, AllSimsStatsSaved[,6,TheRightJunk[j],1], ylim=SimsStatsYlims52[,6], type="l", xlab="", ylab="", col="#D3D3D370")#
	for(i in 2:RepsPerVar){lines(RollTimeIndex, AllSimsStatsSaved[,6,TheRightJunk[j],i], col="#D3D3D370")}#
	lines(RollTimeIndex, SimsStatsMean52[,6], col="black")#
	legend("topleft", bty="n", legend=expression(bold(hat(M)~phi1[1])), cex=1.25, inset=-.05)#
#
	mtext(paste("Junk Variance = ", round(JunkVarianceS[TheRightJunk[j]], 2), sep=""), side=3, outer=TRUE, cex=1.25, font=3, line=2)#
}#
#
#
#
# save.image("/Users/Battrd/Documents/School&Work/WiscResearch/SquealMetabolism/ToyModel_v1.3.RData")
#Convert LTER Data to 14C-to-Sonde Data Frame
log10(0.5)
log10(0.05)
# as.POSIXct(UNDERC_Weather[,"Time"], format="%H:%M")
rm(list=ls())#
graphics.off()#
#
setwd("/Users/Battrd/Documents/School&Work/WiscResearch/SquealMetabolism")#
source("Conc2Sat.R")#
source("KO2.R")#
source("Sat2Conc.R")#
source("SatdConc.R")#
source("MyBookkeepingMetabolism.R")#
#
setwd("/Users/Battrd/Documents/School&Work/WiscResearch/WardSensorData2012")#
#
UNDERC_Weather <- rbind(read.csv("UNDERC_Weather_April2012.csv"), read.csv("UNDERC_Weather_May2012.csv"))#
names(UNDERC_Weather) <- c("Year", "DoY", "Time", "Wind", "PAR")#
#
HourChar <- as.character(ifelse(UNDERC_Weather[,"Time"]/100==24, "0",UNDERC_Weather[,"Time"]/100))#
WhichHourSingleDigit <- which(nchar(HourChar)==1)#
HourChar[WhichHourSingleDigit] <- paste("0",HourChar[WhichHourSingleDigit],sep="")#
UNDERC_Weather[,"Time"] <- paste(HourChar, "00", sep=":")#
# as.POSIXct(UNDERC_Weather[,"Time"], format="%H:%M")#
#
SondeA <- read.table("A14APR12.CDF", sep=",", header=TRUE, skip=0)[-1,]#
SondeB <- read.table("B14APR12.CDF", sep=",", header=TRUE, skip=0)[-1,]#
#
SondeA_DoY <- as.numeric(format.Date(as.POSIXct(SondeA[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA[,1], SondeA[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeA[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeB_DoY <- as.numeric(format.Date(as.POSIXct(SondeB[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB[,1], SondeB[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
#
K_A <- KO2(as.numeric(as.character(SondeA[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA_DoY)$y)#
KO2zmix_A <- K_A/approx(x=c(105,110,117,124),y=c(1.0,2.0,2.0,0.5), xout=SondeA_DoY, rule=2)$y#
DOsatd_A <- SatdConc(as.numeric(as.character(SondeA[,"Temp"])), 0.942*760)#
#
SondeA_Data4BK <- data.frame("Year"=rep(2012, length(SondeA_DoY)), "DoY"=trunc(SondeA_DoY), "Fract"=SondeA_DoY-trunc(SondeA_DoY), "Temp"=as.numeric(as.character(SondeA[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA[,"ODO."])), "DepID"=rep(1, length(SondeA_DoY)) )#
#
SondeB_Data4BK <- data.frame("Year"=rep(2012, length(SondeB_DoY)), "DoY"=trunc(SondeB_DoY), "Fract"=SondeB_DoY-trunc(SondeB_DoY), "Temp"=as.numeric(as.character(SondeB[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB[,"ODO."])), "DepID"=rep(1, length(SondeB_DoY)) )#
#
SondeA_BK <- Metabolism(Data=SondeA_Data4BK, zmix=approx(x=c(105,110,117,124),y=c(1.0,2.0,2.0,0.5), xout=SondeA_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA_DoY)$y)#
abline(v=114, col="darkblue")#
#
# SondeB_BK <- Metabolism(Data=SondeB_Data4BK, zmix=approx(x=c(105,110,117,124),y=c(1.0,2.0,2.0,0.5), xout=SondeB_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeB_DoY)$y)#
# abline(v=114, col="darkblue")#
#
# dev.new()#
# par(mar=c(3,3,1,1))#
# plot(SondeA_BK[,1], SondeA_BK[,3], type="o", lwd=2, bty="l")#
#
dev.new()#
boxplot(list("Pre-Manipulation"=SondeA_BK[1:9,3], "Aquashade"=SondeA_BK[10:19,3]), main="Ward Lake Epilimnetic GPP \n 15-Apr to 03-May", ylab=expression(mu*mol~O[2]~day^-1))#
#
t.test(SondeA_BK[1:9,3], SondeA_BK[10:19,3])#
#
#
Ward2010Light <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/WardLimno/WardWeekly2010.csv")#
Ward2010Light_DoY <- as.numeric(format.Date(as.POSIXct(Ward2010Light[,1], format="%d-%b-%y"), format="%j"))#
Ward2010_1percLight <- c(4.25, 4.5, 4.5, 4.25, 4.25, 4.25, 3.75, 4)#
#
Ward2012Light_DoY <- c(105, 110, 117, 124, 131, 138, 145)#
Ward2012_1percLight <- c(2.3, 2.8, 1.85, 1.75, 1.9, 1.9, 1.8)#
#
GuessLight <- approx(c(105,110,unique(Ward2010Light_DoY)), y=c(2.3,2.8,Ward2010_1percLight), xout=105:max(Ward2010Light_DoY))#
#
dev.new()#
plot(unique(Ward2010Light_DoY), Ward2010_1percLight, ylim=c(5,0), xlim=c(min(Ward2012Light_DoY), max(Ward2010Light_DoY)), type="o", lwd=2, ylab="Depth (m) of 1% Surface PAR", xlab="DoY")#
lines(GuessLight, lty="dotted", lwd=2)#
lines(Ward2012Light_DoY, Ward2012_1percLight, type="o", pch=22, lwd=2, col="blue")#
abline(v=114, col="darkblue")#
#
dev.new()#
plot(SondeA_DoY, as.numeric(SondeA[,"Chlorophyll"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")
SondeA_DoY
paste(0.0, "m", sep="")
as.character(0.0)
as.numeric("0.0")
as.numeric("1.0")
rm(list=ls())#
graphics.off()#
#
ThermDepths <- c("0.00", "0.25", "0.50", "0.75", "1.00", "1.50", "1.25", "1.75", "2.00", "2.50", "3.00")#
Base <- "PoorManWard"#
End <- "m.csv"#
TotalVec <- c()#
for(d in 1:2){#
	DataName <- paste(Base, d, sep="")#
	# assign(DataName, matrix(data=NA, ncol=11))#
	for(i in 1:11){#
	TotalVec <- c(TotalVec, read.csv(paste(Base, d, "-", ThermDepths[i], End, sep=""))[,3])#
	#
	}#
}
setwd("Users/Battrd/TheCascadeProject/PoorManData")
setwd("/Users/Battrd/TheCascadeProject/PoorManData")
ThermDepths <- c("0.00", "0.25", "0.50", "0.75", "1.00", "1.50", "1.25", "1.75", "2.00", "2.50", "3.00")#
Base <- "PoorManWard"#
End <- "m.csv"#
TotalVec <- c()#
for(d in 1:2){#
	DataName <- paste(Base, d, sep="")#
	# assign(DataName, matrix(data=NA, ncol=11))#
	for(i in 1:11){#
	TotalVec <- c(TotalVec, read.csv(paste(Base, d, "-", ThermDepths[i], End, sep=""))[,3])#
	#
	}#
}
d
i
?read.csv
	TotalVec <- c(TotalVec, read.csv(paste(Base, d, "-", ThermDepths[i], End, sep="", header=FALSE, skip=2))[,3])
	TotalVec <- c(TotalVec, read.csv(paste(Base, d, "-", ThermDepths[i], End, sep=""), header=FALSE, skip=2)[,3])
rm(list=ls())#
graphics.off()#
setwd("/Users/Battrd/TheCascadeProject/PoorManData")#
#
ThermDepths <- c("0.00", "0.25", "0.50", "0.75", "1.00", "1.50", "1.25", "1.75", "2.00", "2.50", "3.00")#
Base <- "PoorManWard"#
End <- "m.csv"#
TotalVec <- c()#
for(d in 1:2){#
	DataName <- paste(Base, d, sep="")#
	# assign(DataName, matrix(data=NA, ncol=11))#
	for(i in 1:11){#
	TotalVec <- c(TotalVec, read.csv(paste(Base, d, "-", ThermDepths[i], End, sep=""), header=FALSE, skip=2)[,3])#
	#
	}#
}
rm(list=ls())#
graphics.off()#
setwd("/Users/Battrd/TheCascadeProject/PoorManData")#
#
ThermDepths <- c("0.00", "0.25", "0.50", "0.75", "1.00", "1.50", "1.25", "1.75", "2.00", "2.50", "3.00")#
Base <- "PoorManWard"#
End <- "m.csv"#
TotalVec <- c()#
for(d in 1:2){#
	DataName <- paste(Base, d, sep="")#
	# assign(DataName, matrix(data=NA, ncol=11))#
	for(i in 1:11){#
	TotalVec <- c(TotalVec, read.csv(paste(Base, d, "-", ThermDepths[i], End, sep=""), header=FALSE, skip=2)[,3])#
	#
	}#
}
rm(list=ls())#
graphics.off()#
setwd("/Users/Battrd/TheCascadeProject/PoorManData")#
#
ThermDepths <- c("0.00", "0.25", "0.50", "0.75", "1.00", "1.50", "1.25", "1.75", "2.00", "2.50", "3.00")#
Base <- "PoorManWard"#
End <- "m.csv"#
TotalVec <- c()#
for(d in 1:2){#
	DataName <- paste(Base, d, sep="")#
	# assign(DataName, matrix(data=NA, ncol=11))#
	for(i in 1:11){#
	TotalVec <- c(TotalVec, read.csv(paste(Base, d, "-", ThermDepths[i], End, sep=""), header=FALSE, skip=2)[,3])#
	#
	}#
}
length(TotalVec)
DataName
rm(list=ls())#
graphics.off()#
setwd("/Users/Battrd/TheCascadeProject/PoorManData")#
#
ThermDepths <- c("0.00", "0.25", "0.50", "0.75", "1.00", "1.50", "1.25", "1.75", "2.00", "2.50", "3.00")#
Base <- "PoorManWard"#
End <- "m.csv"#
#
for(d in 1:2){#
	TotalVec <- c()#
	DataName <- paste(Base, d, sep="")#
	# assign(DataName, matrix(data=NA, ncol=11))#
	for(i in 1:11){#
	TotalVec <- c(TotalVec, read.csv(paste(Base, d, "-", ThermDepths[i], End, sep=""), header=FALSE, skip=2)[,3])#
	#
	}#
	assign(DataName, matrix(data=TotalVec, ncol=11))#
}
PoorManData1[1:10,]
i
length9ThermDepths
length(ThermDepths)
i=1
rm(list=ls())#
graphics.off()#
#
setwd("/Users/Battrd/Documents/School&Work/WiscResearch/SquealMetabolism")#
source("Conc2Sat.R")#
source("KO2.R")#
source("Sat2Conc.R")#
source("SatdConc.R")#
source("MyBookkeepingMetabolism.R")#
#
setwd("/Users/Battrd/Documents/School&Work/WiscResearch/WardSensorData2012")
UNDERC_Weather <- read.csv("UNDERC_Weather_2012.csv")
names(UNDERC_Weather) <- c("Year", "DoY", "Time", "Wind", "PAR")
HourChar <- as.character(ifelse(UNDERC_Weather[,"Time"]/100==24, "0",UNDERC_Weather[,"Time"]/100))
WhichHourSingleDigit <- which(nchar(HourChar)==1)
HourChar[WhichHourSingleDigit] <- paste("0",HourChar[WhichHourSingleDigit],sep="")
UNDERC_Weather[,"Time"] <- paste(HourChar, "00", sep=":")
#
Ward2012Light_DoY <- c(105, 110, 117, 124, 131, 138, 145, 152, 159, 163, 170)#
Ward2012_1percLight <- c(2.3, 2.8, 1.85, 1.75, 1.9, 1.9, 1.8, 1.75, 2.0, 1.5, 1.0)#
#
GuessLight <- approx(c(105,110,unique(Ward2010Light_DoY)), y=c(2.3,2.8,Ward2010_1percLight), xout=105:max(Ward2010Light_DoY))#
#
dev.new()#
plot(unique(Ward2010Light_DoY), Ward2010_1percLight, ylim=c(5,0), xlim=c(min(Ward2012Light_DoY), max(Ward2010Light_DoY)), type="o", lwd=2, ylab="Depth (m) of 1% Surface PAR", xlab="DoY")#
lines(GuessLight, lty="dotted", lwd=2)#
lines(Ward2012Light_DoY, Ward2012_1percLight, type="o", pch=22, lwd=2, col="blue")#
abline(v=114, col="darkblue")
#
Ward2010Light <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/WardLimno/WardWeekly2010.csv")#
Ward2010Light_DoY <- as.numeric(format.Date(as.POSIXct(Ward2010Light[,1], format="%d-%b-%y"), format="%j"))#
Ward2010_1percLight <- c(4.25, 4.5, 4.5, 4.25, 4.25, 4.25, 3.75, 4)#
#
Ward2012Light_DoY <- c(105, 110, 117, 124, 131, 138, 145, 152, 159, 163, 170)#
Ward2012_1percLight <- c(2.3, 2.8, 1.85, 1.75, 1.9, 1.9, 1.8, 1.75, 2.0, 1.5, 1.0)#
#
GuessLight <- approx(c(105,110,unique(Ward2010Light_DoY)), y=c(2.3,2.8,Ward2010_1percLight), xout=105:max(Ward2010Light_DoY))#
#
dev.new()#
plot(unique(Ward2010Light_DoY), Ward2010_1percLight, ylim=c(5,0), xlim=c(min(Ward2012Light_DoY), max(Ward2010Light_DoY)), type="o", lwd=2, ylab="Depth (m) of 1% Surface PAR", xlab="DoY")#
lines(GuessLight, lty="dotted", lwd=2)#
lines(Ward2012Light_DoY, Ward2012_1percLight, type="o", pch=22, lwd=2, col="blue")#
abline(v=114, col="darkblue")
#
Ward2012Light_DoY <- c(105, 110, 117, 124, 131, 138, 145, 152, 159, 163, 170)#
Ward2012_1percLight <- c(2.3, 2.8, 1.85, 1.75, 1.9, 1.9, 1.8, 1.75, 2.0, 1.5, 2.0)#
#
GuessLight <- approx(c(105,110,unique(Ward2010Light_DoY)), y=c(2.3,2.8,Ward2010_1percLight), xout=105:max(Ward2010Light_DoY))#
#
dev.new()#
plot(unique(Ward2010Light_DoY), Ward2010_1percLight, ylim=c(5,0), xlim=c(min(Ward2012Light_DoY), max(Ward2010Light_DoY)), type="o", lwd=2, ylab="Depth (m) of 1% Surface PAR", xlab="DoY")#
lines(GuessLight, lty="dotted", lwd=2)#
lines(Ward2012Light_DoY, Ward2012_1percLight, type="o", pch=22, lwd=2, col="blue")#
abline(v=114, col="darkblue")
SondeA2 <- read.table("A03May12.txt", sep=",", header=TRUE, skip=0)[-1,]
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=TRUE, skip=0)[-1,]
SondeA3 <- read.table("A03JUN12.txt", sep=",", header=TRUE, skip=0)[-1,]
SondeB3 <- read.table("B03JUN12.txt", sep=",", header=TRUE, skip=0)[-1,]
#
SondeA1_DoY <- as.numeric(format.Date(as.POSIXct(SondeA1[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA1[,1], SondeA1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(Sonde1A[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeB1_DoY <- as.numeric(format.Date(as.POSIXct(SondeB[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB1[,1], SondeB1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB1[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeA2_DoY <- as.numeric(format.Date(as.POSIXct(SondeA2[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA2[,1], SondeA2[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(Sonde1A[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeB2_DoY <- as.numeric(format.Date(as.POSIXct(SondeB[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB2[,1], SondeB2[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB2[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeA3_DoY <- as.numeric(format.Date(as.POSIXct(SondeA3[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA3[,1], SondeA3[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(Sonde1A[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeB3_DoY <- as.numeric(format.Date(as.POSIXct(SondeB[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB3[,1], SondeB3[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB3[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))
SondeA1_DoY <- as.numeric(format.Date(as.POSIXct(SondeA1[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA1[,1], SondeA1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(Sonde1A[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeB1_DoY <- as.numeric(format.Date(as.POSIXct(SondeB1[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB1[,1], SondeB1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB1[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeA2_DoY <- as.numeric(format.Date(as.POSIXct(SondeA2[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA2[,1], SondeA2[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(Sonde1A[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeB2_DoY <- as.numeric(format.Date(as.POSIXct(SondeB2[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB2[,1], SondeB2[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB2[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeA3_DoY <- as.numeric(format.Date(as.POSIXct(SondeA3[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA3[,1], SondeA3[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(Sonde1A[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeB3_DoY <- as.numeric(format.Date(as.POSIXct(SondeB3[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB3[,1], SondeB3[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB3[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))
SondeA1_DoY <- as.numeric(format.Date(as.POSIXct(SondeA1[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA1[,1], SondeA1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeA1[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))
SondeA1 <- read.table("A14APR12.CDF", sep=",", header=TRUE, skip=0)[-1,]#
SondeB1 <- read.table("B14APR12.CDF", sep=",", header=TRUE, skip=0)[-1,]#
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=TRUE, skip=0)[-1,]#
SondeB2 <- read.table("B03MAY12.txt", sep=",", header=TRUE, skip=0)[-1,]#
SondeA3 <- read.table("A03JUN12.txt", sep=",", header=TRUE, skip=0)[-1,]#
SondeB3 <- read.table("B03JUN12.txt", sep=",", header=TRUE, skip=0)[-1,]
SondeA1_DoY <- as.numeric(format.Date(as.POSIXct(SondeA1[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA1[,1], SondeA1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeA1[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))
SondeB1_DoY <- as.numeric(format.Date(as.POSIXct(SondeB1[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB1[,1], SondeB1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB1[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))
SondeA2_DoY <- as.numeric(format.Date(as.POSIXct(SondeA2[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA2[,1], SondeA2[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeA2[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))
SondeB2_DoY <- as.numeric(format.Date(as.POSIXct(SondeB2[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB2[,1], SondeB2[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB2[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))
SondeA3_DoY <- as.numeric(format.Date(as.POSIXct(SondeA3[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA3[,1], SondeA3[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeA3[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))
SondeB3_DoY <- as.numeric(format.Date(as.POSIXct(SondeB3[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB3[,1], SondeB3[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB3[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))
ZmixDays <- c(105, 110, 117, 124, 131, 138, 145, 152, 159, 163, 170)#
ZmixDepths <- c(1.0,2.0,2.0,0.5,0.5, 1.0, 1.0, 1.5, 0.5, 1.0, 1.0)
K_A1 <- KO2(as.numeric(as.character(SondeA1[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA1_DoY)$y)#
KO2zmix_A1 <- K_A1/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA1_DoY, rule=2)$y#
DOsatd_A1 <- SatdConc(as.numeric(as.character(SondeA1[,"Temp"])), 0.942*760)#
SondeA1_Data4BK <- data.frame("Year"=rep(2012, length(SondeA1_DoY)), "DoY"=trunc(SondeA1_DoY), "Fract"=SondeA1_DoY-trunc(SondeA1_DoY), "Temp"=as.numeric(as.character(SondeA1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA1[,"ODO."])), "DepID"=rep(1, length(SondeA1_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA1_BK <- Metabolism(Data=SondeA1_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA1_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA1_DoY)$y)#
abline(v=114, col="darkblue")
K_A2 <- KO2(as.numeric(as.character(SondeA2[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)#
KO2zmix_A2 <- K_A2/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y#
DOsatd_A2 <- SatdConc(as.numeric(as.character(SondeA2[,"Temp"])), 0.942*760)#
SondeA2_Data4BK <- data.frame("Year"=rep(2012, length(SondeA2_DoY)), "DoY"=trunc(SondeA2_DoY), "Fract"=SondeA2_DoY-trunc(SondeA2_DoY), "Temp"=as.numeric(as.character(SondeA2[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA2[,"ODO."])), "DepID"=rep(1, length(SondeA2_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA2_BK <- Metabolism(Data=SondeA2_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)
K_A2 <- KO2(as.numeric(as.character(SondeA2[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)
names(SondeA2)
SondeA2[1:5,]
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=TRUE, skip=1)[-1,]
SondeA2[1:5,]
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=TRUE, skip=1)[c(-1,-2),]#
SondeB2 <- read.table("B03MAY12.txt", sep=",", header=TRUE, skip=1)[c(-1,-2),]#
SondeA3 <- read.table("A03JUN12.txt", sep=",", header=TRUE, skip=1)[c(-1,-2),]#
SondeB3 <- read.table("B03JUN12.txt", sep=",", header=TRUE, skip=1)[c(-1,-2),]
SondeA2[1:5,]
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=TRUE, skip=1, strip.white=TRUE)[c(-1,-2),]
SondeA2[1:5,]
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=FALSE)[c(-1,-2),]
SondeA2[1:5,]
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=FALSE)
SondeA2[1:5,]
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=FALSE)[-c(1,3,4),]
SondeA2[1:5,]
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=FALSE)[-c(1,2,3,4),]
SondeA2[1:5,]
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=FALSE)[-c(1,2,3,4),, drop=TRUE]
SondeA2[1:5,]
SondeA1[1:5,]
SondeA1 <- read.table("A14APR12.CDF", sep=",", header=TRUE, skip=0)[-1,]#
SondeB1 <- read.table("B14APR12.CDF", sep=",", header=TRUE, skip=0)[-1,]#
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=FALSE, skip=0)[-c(1,2,3,4),]#
names(SondeA2) <- c("Date", "Time", "Temp", "SpCond", "pH", "BGA.PC.Conc", "BGA.PC", "ODO.", "Chlorophyll", "Chlorophyll.1", "Battery")#
SondeB2 <- read.table("B03MAY12.txt", sep=",", header=FALSE, skip=0)[-c(1,2,3,4),]#
names(SondeB2) <- c("Date", "Time", "Temp", "SpCond", "pH", "BGA.PC.Conc", "BGA.PC", "ODO.", "Chlorophyll", "Chlorophyll.1", "Battery")#
SondeA3 <- read.table("A03JUN12.txt", sep=",", header=FALSE, skip=0)[-c(1,2,3,4),]#
names(SondeA3) <- c("Date", "Time", "Temp", "SpCond", "pH", "BGA.PC.Conc", "BGA.PC", "ODO.", "Chlorophyll", "Chlorophyll.1", "Battery")#
SondeB3 <- read.table("B03JUN12.txt", sep=",", header=FALSE, skip=0)[-c(1,2,3,4),]#
names(SondeB3) <- c("Date", "Time", "Temp", "SpCond", "pH", "BGA.PC.Conc", "BGA.PC", "ODO.", "Chlorophyll", "Chlorophyll.1", "Battery")
SondeA1_DoY <- as.numeric(format.Date(as.POSIXct(SondeA1[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA1[,1], SondeA1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeA1[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeB1_DoY <- as.numeric(format.Date(as.POSIXct(SondeB1[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB1[,1], SondeB1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB1[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeA2_DoY <- as.numeric(format.Date(as.POSIXct(SondeA2[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA2[,1], SondeA2[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeA2[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeB2_DoY <- as.numeric(format.Date(as.POSIXct(SondeB2[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB2[,1], SondeB2[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB2[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeA3_DoY <- as.numeric(format.Date(as.POSIXct(SondeA3[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA3[,1], SondeA3[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeA3[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeB3_DoY <- as.numeric(format.Date(as.POSIXct(SondeB3[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB3[,1], SondeB3[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB3[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))
K_A2 <- KO2(as.numeric(as.character(SondeA2[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)
KO2zmix_A2 <- K_A2/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y
DOsatd_A2 <- SatdConc(as.numeric(as.character(SondeA2[,"Temp"])), 0.942*760)
SondeA2_Data4BK <- data.frame("Year"=rep(2012, length(SondeA2_DoY)), "DoY"=trunc(SondeA2_DoY), "Fract"=SondeA2_DoY-trunc(SondeA2_DoY), "Temp"=as.numeric(as.character(SondeA2[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA2[,"ODO."])), "DepID"=rep(1, length(SondeA2_DoY)) )
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )
SondeA2_BK <- Metabolism(Data=SondeA2_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)
SondeA2_Data4BK[1:4,]
SondeA2_DoY
SondeA2_DoY <- as.numeric(format.Date(as.POSIXct(SondeA2[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA2[,1], SondeA2[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeA2[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))
SondeA2_DoY
SondeA1_DoY
SondeB1_DoY
format.Date(as.POSIXct(SondeA1[,1], format="%m/%d/%y"), format="%j")
format.Date(as.POSIXct(SondeA2[,1], format="%m/%d/%y"), format="%j")
SondeA2[,1]
SondeA1[,1]
as.POSIXct(SondeA1[,1], format="%m/%d/%y")
as.POSIXct(SondeA2[,1], format="%m/%d/%y")
SondeA2_DoY <- as.numeric(format.Date(as.POSIXct(SondeA2[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA2[,1], SondeA2[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeA2[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))
SondeA2_DoY
SondeA2_DoY <- as.numeric(format.Date(as.POSIXct(SondeA2[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA2[,1], SondeA2[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeA2[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))#
SondeB2_DoY <- as.numeric(format.Date(as.POSIXct(SondeB2[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB2[,1], SondeB2[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeB2[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))#
SondeA3_DoY <- as.numeric(format.Date(as.POSIXct(SondeA3[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA3[,1], SondeA3[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeA3[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))#
SondeB3_DoY <- as.numeric(format.Date(as.POSIXct(SondeB3[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB3[,1], SondeB3[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeB3[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))
SondeB3_DoY
K_A2 <- KO2(as.numeric(as.character(SondeA2[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)
KO2zmix_A2 <- K_A2/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y
DOsatd_A2 <- SatdConc(as.numeric(as.character(SondeA2[,"Temp"])), 0.942*760)
SondeA2_Data4BK <- data.frame("Year"=rep(2012, length(SondeA2_DoY)), "DoY"=trunc(SondeA2_DoY), "Fract"=SondeA2_DoY-trunc(SondeA2_DoY), "Temp"=as.numeric(as.character(SondeA2[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA2[,"ODO."])), "DepID"=rep(1, length(SondeA2_DoY)) )
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )
SondeA2_BK <- Metabolism(Data=SondeA2_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)
abline(v=145, col="darkblue")
#
# UNDERC_Weather <- rbind(read.csv("UNDERC_Weather_April2012.csv"), read.csv("UNDERC_Weather_May2012.csv"))#
UNDERC_Weather <- read.csv("UNDERC_Weather_2012.csv")#
names(UNDERC_Weather) <- c("Year", "DoY", "Time", "Wind", "PAR")#
#
HourChar <- as.character(ifelse(UNDERC_Weather[,"Time"]/100==24, "0",UNDERC_Weather[,"Time"]/100))#
WhichHourSingleDigit <- which(nchar(HourChar)==1)#
HourChar[WhichHourSingleDigit] <- paste("0",HourChar[WhichHourSingleDigit],sep="")#
UNDERC_Weather[,"Time"] <- paste(HourChar, "00", sep=":")#
# as.POSIXct(UNDERC_Weather[,"Time"], format="%H:%M")
#
K_A1 <- KO2(as.numeric(as.character(SondeA1[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA1_DoY)$y)#
KO2zmix_A1 <- K_A1/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA1_DoY, rule=2)$y#
DOsatd_A1 <- SatdConc(as.numeric(as.character(SondeA1[,"Temp"])), 0.942*760)#
SondeA1_Data4BK <- data.frame("Year"=rep(2012, length(SondeA1_DoY)), "DoY"=trunc(SondeA1_DoY), "Fract"=SondeA1_DoY-trunc(SondeA1_DoY), "Temp"=as.numeric(as.character(SondeA1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA1[,"ODO."])), "DepID"=rep(1, length(SondeA1_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA1_BK <- Metabolism(Data=SondeA1_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA1_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA1_DoY)$y)#
abline(v=114, col="darkblue")#
#
K_A2 <- KO2(as.numeric(as.character(SondeA2[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)#
KO2zmix_A2 <- K_A2/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y#
DOsatd_A2 <- SatdConc(as.numeric(as.character(SondeA2[,"Temp"])), 0.942*760)#
SondeA2_Data4BK <- data.frame("Year"=rep(2012, length(SondeA2_DoY)), "DoY"=trunc(SondeA2_DoY), "Fract"=SondeA2_DoY-trunc(SondeA2_DoY), "Temp"=as.numeric(as.character(SondeA2[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA2[,"ODO."])), "DepID"=rep(1, length(SondeA2_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA2_BK <- Metabolism(Data=SondeA2_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)#
abline(v=145, col="darkblue")
K_A3 <- KO2(as.numeric(as.character(SondeA3[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA3_DoY)$y)#
KO2zmix_A3 <- K_A3/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA3_DoY, rule=2)$y#
DOsatd_A3 <- SatdConc(as.numeric(as.character(SondeA3[,"Temp"])), 0.942*760)#
SondeA3_Data4BK <- data.frame("Year"=rep(2012, length(SondeA3_DoY)), "DoY"=trunc(SondeA3_DoY), "Fract"=SondeA3_DoY-trunc(SondeA3_DoY), "Temp"=as.numeric(as.character(SondeA3[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA3[,"ODO."])), "DepID"=rep(1, length(SondeA3_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA3_BK <- Metabolism(Data=SondeA3_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA3_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA3_DoY)$y)#
abline(v=145, col="darkblue")
abline(v=160, col="darkblue")
Metabolism
SondeA3_BK <- Metabolism(Data=SondeA3_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA3_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA3_DoY)$y, Volumetric=FALSE)
K_A2 <- KO2(as.numeric(as.character(SondeA2[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)#
KO2zmix_A2 <- K_A2/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y#
DOsatd_A2 <- SatdConc(as.numeric(as.character(SondeA2[,"Temp"])), 0.942*760)#
SondeA2_Data4BK <- data.frame("Year"=rep(2012, length(SondeA2_DoY)), "DoY"=trunc(SondeA2_DoY), "Fract"=SondeA2_DoY-trunc(SondeA2_DoY), "Temp"=as.numeric(as.character(SondeA2[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA2[,"ODO."])), "DepID"=rep(1, length(SondeA2_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA2_BK <- Metabolism(Data=SondeA2_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y, Volumetric=FALSE)#
abline(v=145, col="darkblue")
K_A1 <- KO2(as.numeric(as.character(SondeA1[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA1_DoY)$y)#
KO2zmix_A1 <- K_A1/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA1_DoY, rule=2)$y#
DOsatd_A1 <- SatdConc(as.numeric(as.character(SondeA1[,"Temp"])), 0.942*760)#
SondeA1_Data4BK <- data.frame("Year"=rep(2012, length(SondeA1_DoY)), "DoY"=trunc(SondeA1_DoY), "Fract"=SondeA1_DoY-trunc(SondeA1_DoY), "Temp"=as.numeric(as.character(SondeA1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA1[,"ODO."])), "DepID"=rep(1, length(SondeA1_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA1_BK <- Metabolism(Data=SondeA1_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA1_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA1_DoY)$y, Volumetric=FALSE)#
abline(v=114, col="darkblue")
dev.new()#
plot(SondeA2_DoY, as.numeric(SondeA1[,"Chlorophyll"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")
plot(SondeA2_DoY, as.numeric(SondeA2[,"Chlorophyll"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")
dev.new()#
plot(SondeA3_DoY, as.numeric(SondeA3[,"Chlorophyll"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")
dev.new()#
plot(SondeA1_DoY, as.numeric(SondeA1[,"Chlorophyll"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")
plot(SondeA3_DoY, as.numeric(SondeA3[,"Chlorophyll.1"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")
plot(SondeA3_DoY, as.numeric(SondeA3[,"Chlorophyll"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")
graphics.off()
plot(SondeA3_DoY, as.numeric(SondeA3[,"Chlorophyll"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")
plot(SondeA3_DoY, as.numeric(SondeA3[,"Chlorophyll.1"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")
plot(SondeA3_DoY, as.numeric(SondeA3[,"Chlorophyll"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")
SondeA3
names(SondeA1)
as.numeric(SondeA3[,"Chlorophyll"])
SondeA1 <- read.table("A14APR12.CDF", sep=",", header=TRUE, skip=0)[-1,]#
SondeB1 <- read.table("B14APR12.CDF", sep=",", header=TRUE, skip=0)[-1,]#
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=FALSE, skip=0)[-c(1,2,3,4),]#
names(SondeA2) <- c("Date", "Time", "Temp", "SpCond", "pH", "BGA.PC.Conc", "BGA.PC", "ODO.", "ODOconc", "Chlorophyll", "Chlorophyll.1", "Battery")#
SondeB2 <- read.table("B03MAY12.txt", sep=",", header=FALSE, skip=0)[-c(1,2,3,4),]#
names(SondeB2) <- c("Date", "Time", "Temp", "SpCond", "pH", "BGA.PC.Conc", "BGA.PC", "ODO.", "ODOconc", "Chlorophyll", "Chlorophyll.1", "Battery")#
SondeA3 <- read.table("A03JUN12.txt", sep=",", header=FALSE, skip=0)[-c(1,2,3,4),]#
names(SondeA3) <- c("Date", "Time", "Temp", "SpCond", "pH", "BGA.PC.Conc", "BGA.PC", "ODO.", "ODOconc", "Chlorophyll", "Chlorophyll.1", "Battery")#
SondeB3 <- read.table("B03JUN12.txt", sep=",", header=FALSE, skip=0)[-c(1,2,3,4),]#
names(SondeB3) <- c("Date", "Time", "Temp", "SpCond", "pH", "BGA.PC.Conc", "BGA.PC", "ODO.", "ODOconc", "Chlorophyll", "Chlorophyll.1", "Battery")
graphics.off()
#
SondeA1_DoY <- as.numeric(format.Date(as.POSIXct(SondeA1[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA1[,1], SondeA1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeA1[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeB1_DoY <- as.numeric(format.Date(as.POSIXct(SondeB1[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB1[,1], SondeB1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB1[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeA2_DoY <- as.numeric(format.Date(as.POSIXct(SondeA2[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA2[,1], SondeA2[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeA2[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))#
SondeB2_DoY <- as.numeric(format.Date(as.POSIXct(SondeB2[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB2[,1], SondeB2[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeB2[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))#
SondeA3_DoY <- as.numeric(format.Date(as.POSIXct(SondeA3[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA3[,1], SondeA3[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeA3[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))#
SondeB3_DoY <- as.numeric(format.Date(as.POSIXct(SondeB3[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB3[,1], SondeB3[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeB3[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))
#
# ======================================#
# = Read in Zmix Data... or make it up =#
# ======================================#
ZmixDays <- c(105, 110, 117, 124, 131, 138, 145, 152, 159, 163, 170)#
ZmixDepths <- c(1.0,2.0,2.0,0.5,0.5, 1.0, 1.0, 1.5, 0.5, 1.0, 1.0)#
#
#
K_A1 <- KO2(as.numeric(as.character(SondeA1[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA1_DoY)$y)#
KO2zmix_A1 <- K_A1/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA1_DoY, rule=2)$y#
DOsatd_A1 <- SatdConc(as.numeric(as.character(SondeA1[,"Temp"])), 0.942*760)#
SondeA1_Data4BK <- data.frame("Year"=rep(2012, length(SondeA1_DoY)), "DoY"=trunc(SondeA1_DoY), "Fract"=SondeA1_DoY-trunc(SondeA1_DoY), "Temp"=as.numeric(as.character(SondeA1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA1[,"ODO."])), "DepID"=rep(1, length(SondeA1_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA1_BK <- Metabolism(Data=SondeA1_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA1_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA1_DoY)$y, Volumetric=FALSE)#
abline(v=114, col="darkblue")#
#
K_A2 <- KO2(as.numeric(as.character(SondeA2[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)#
KO2zmix_A2 <- K_A2/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y#
DOsatd_A2 <- SatdConc(as.numeric(as.character(SondeA2[,"Temp"])), 0.942*760)#
SondeA2_Data4BK <- data.frame("Year"=rep(2012, length(SondeA2_DoY)), "DoY"=trunc(SondeA2_DoY), "Fract"=SondeA2_DoY-trunc(SondeA2_DoY), "Temp"=as.numeric(as.character(SondeA2[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA2[,"ODO."])), "DepID"=rep(1, length(SondeA2_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA2_BK <- Metabolism(Data=SondeA2_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y, Volumetric=FALSE)#
abline(v=145, col="darkblue")#
#
K_A3 <- KO2(as.numeric(as.character(SondeA3[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA3_DoY)$y)#
KO2zmix_A3 <- K_A3/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA3_DoY, rule=2)$y#
DOsatd_A3 <- SatdConc(as.numeric(as.character(SondeA3[,"Temp"])), 0.942*760)#
SondeA3_Data4BK <- data.frame("Year"=rep(2012, length(SondeA3_DoY)), "DoY"=trunc(SondeA3_DoY), "Fract"=SondeA3_DoY-trunc(SondeA3_DoY), "Temp"=as.numeric(as.character(SondeA3[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA3[,"ODO."])), "DepID"=rep(1, length(SondeA3_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA3_BK <- Metabolism(Data=SondeA3_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA3_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA3_DoY)$y, Volumetric=FALSE)#
abline(v=160, col="darkblue")
#
dev.new()#
boxplot(list("Pre-Manipulation"=SondeA_BK[1:9,3], "Aquashade"=SondeA1_BK[10:19,3]), main="Ward Lake Epilimnetic GPP \n 15-Apr to 03-May", ylab=expression(mu*mol~O[2]~day^-1))#
#
t.test(SondeA1_BK[1:9,3], SondeA1_BK[10:19,3])
boxplot(list("Pre-Manipulation"=SondeA1_BK[1:9,3], "Aquashade"=SondeA1_BK[10:19,3]), main="Ward Lake Epilimnetic GPP \n 15-Apr to 03-May", ylab=expression(mu*mol~O[2]~day^-1))
#
Ward2010Light <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/WardLimno/WardWeekly2010.csv")#
Ward2010Light_DoY <- as.numeric(format.Date(as.POSIXct(Ward2010Light[,1], format="%d-%b-%y"), format="%j"))#
Ward2010_1percLight <- c(4.25, 4.5, 4.5, 4.25, 4.25, 4.25, 3.75, 4)#
#
Ward2012Light_DoY <- c(105, 110, 117, 124, 131, 138, 145, 152, 159, 163, 170)#
Ward2012_1percLight <- c(2.3, 2.8, 1.85, 1.75, 1.9, 1.9, 1.8, 1.75, 2.0, 1.5, 2.0)#
#
GuessLight <- approx(c(105,110,unique(Ward2010Light_DoY)), y=c(2.3,2.8,Ward2010_1percLight), xout=105:max(Ward2010Light_DoY))
#
dev.new()#
plot(unique(Ward2010Light_DoY), Ward2010_1percLight, ylim=c(5,0), xlim=c(min(Ward2012Light_DoY), max(Ward2010Light_DoY)), type="o", lwd=2, ylab="Depth (m) of 1% Surface PAR", xlab="DoY")#
lines(GuessLight, lty="dotted", lwd=2)#
lines(Ward2012Light_DoY, Ward2012_1percLight, type="o", pch=22, lwd=2, col="blue")#
abline(v=114, col="darkblue")
#
dev.new()#
plot(SondeA1_DoY, as.numeric(SondeA1[,"Chlorophyll"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")#
dev.new()#
plot(SondeA2_DoY, as.numeric(SondeA2[,"Chlorophyll"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")#
dev.new()#
plot(SondeA3_DoY, as.numeric(SondeA3[,"Chlorophyll"]), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")
as.numeric(SondeA2[,"Chlorophyll"])
SondeA2[,"Chlorophyll"]
as.character(SondeA2[,"Chlorophyll"])
as.numeric(as.character(SondeA2[,"Chlorophyll"]))
dev.new()#
plot(SondeA1_DoY, as.numeric(as.character(SondeA1[,"Chlorophyll"])), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")#
dev.new()#
plot(SondeA2_DoY, as.numeric(as.character(SondeA2[,"Chlorophyll"])), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")#
dev.new()#
plot(SondeA3_DoY, as.numeric(as.character(SondeA3[,"Chlorophyll"])), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")
as.numeric(as.character(SondeA1[,"Chlorophyll"]))
names(SondeA1)
SondeA1[,"Chlorophyll"]
as.numeric(SondeA1[,"Chlorophyll"])
as.numeric(as.character(SondeA1[,"Chlorophyll"]))
rm(list=ls())#
graphics.off()#
#
setwd("/Users/Battrd/Documents/School&Work/WiscResearch/SquealMetabolism")#
source("Conc2Sat.R")#
source("KO2.R")#
source("Sat2Conc.R")#
source("SatdConc.R")#
source("MyBookkeepingMetabolism.R")#
#
setwd("/Users/Battrd/Documents/School&Work/WiscResearch/WardSensorData2012")#
#
# UNDERC_Weather <- rbind(read.csv("UNDERC_Weather_April2012.csv"), read.csv("UNDERC_Weather_May2012.csv"))#
UNDERC_Weather <- read.csv("UNDERC_Weather_2012.csv")#
names(UNDERC_Weather) <- c("Year", "DoY", "Time", "Wind", "PAR")#
#
HourChar <- as.character(ifelse(UNDERC_Weather[,"Time"]/100==24, "0",UNDERC_Weather[,"Time"]/100))#
WhichHourSingleDigit <- which(nchar(HourChar)==1)#
HourChar[WhichHourSingleDigit] <- paste("0",HourChar[WhichHourSingleDigit],sep="")#
UNDERC_Weather[,"Time"] <- paste(HourChar, "00", sep=":")#
# as.POSIXct(UNDERC_Weather[,"Time"], format="%H:%M")#
#
SondeA1 <- read.table("A14APR12.CDF", sep=",", header=TRUE, skip=0)[-1,]#
SondeB1 <- read.table("B14APR12.CDF", sep=",", header=TRUE, skip=0)[-1,]#
SondeA2 <- read.table("A03MAY12.txt", sep=",", header=FALSE, skip=0)[-c(1,2,3,4),]#
names(SondeA2) <- c("Date", "Time", "Temp", "SpCond", "pH", "BGA.PC.Conc", "BGA.PC", "ODO.", "ODOconc", "Chlorophyll", "Chlorophyll.1", "Battery")#
SondeB2 <- read.table("B03MAY12.txt", sep=",", header=FALSE, skip=0)[-c(1,2,3,4),]#
names(SondeB2) <- c("Date", "Time", "Temp", "SpCond", "pH", "BGA.PC.Conc", "BGA.PC", "ODO.", "ODOconc", "Chlorophyll", "Chlorophyll.1", "Battery")#
SondeA3 <- read.table("A03JUN12.txt", sep=",", header=FALSE, skip=0)[-c(1,2,3,4),]#
names(SondeA3) <- c("Date", "Time", "Temp", "SpCond", "pH", "BGA.PC.Conc", "BGA.PC", "ODO.", "ODOconc", "Chlorophyll", "Chlorophyll.1", "Battery")#
SondeB3 <- read.table("B03JUN12.txt", sep=",", header=FALSE, skip=0)[-c(1,2,3,4),]#
names(SondeB3) <- c("Date", "Time", "Temp", "SpCond", "pH", "BGA.PC.Conc", "BGA.PC", "ODO.", "ODOconc", "Chlorophyll", "Chlorophyll.1", "Battery")#
#
#
SondeA1_DoY <- as.numeric(format.Date(as.POSIXct(SondeA1[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA1[,1], SondeA1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeA1[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeB1_DoY <- as.numeric(format.Date(as.POSIXct(SondeB1[,1], format="%m/%d/%y"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB1[,1], SondeB1[,2]), format="%m/%d/%y %H:%M:%S"), time2=as.POSIXct(paste(SondeB1[,1], "00:00:00"), format="%m/%d/%y %H:%M:%S"), units="days"))#
SondeA2_DoY <- as.numeric(format.Date(as.POSIXct(SondeA2[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA2[,1], SondeA2[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeA2[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))#
SondeB2_DoY <- as.numeric(format.Date(as.POSIXct(SondeB2[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB2[,1], SondeB2[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeB2[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))#
SondeA3_DoY <- as.numeric(format.Date(as.POSIXct(SondeA3[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeA3[,1], SondeA3[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeA3[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))#
SondeB3_DoY <- as.numeric(format.Date(as.POSIXct(SondeB3[,1], format="%Y/%m/%d"), format="%j")) + as.numeric(difftime(time1=as.POSIXct(paste(SondeB3[,1], SondeB3[,2]), format="%Y/%m/%d %H:%M:%S"), time2=as.POSIXct(paste(SondeB3[,1], "00:00:00"), format="%Y/%m/%d %H:%M:%S"), units="days"))#
#
#
# ======================================#
# = Read in Zmix Data... or make it up =#
# ======================================#
ZmixDays <- c(105, 110, 117, 124, 131, 138, 145, 152, 159, 163, 170)#
ZmixDepths <- c(1.0,2.0,2.0,0.5,0.5, 1.0, 1.0, 1.5, 0.5, 1.0, 1.0)#
#
#
K_A1 <- KO2(as.numeric(as.character(SondeA1[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA1_DoY)$y)#
KO2zmix_A1 <- K_A1/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA1_DoY, rule=2)$y#
DOsatd_A1 <- SatdConc(as.numeric(as.character(SondeA1[,"Temp"])), 0.942*760)#
SondeA1_Data4BK <- data.frame("Year"=rep(2012, length(SondeA1_DoY)), "DoY"=trunc(SondeA1_DoY), "Fract"=SondeA1_DoY-trunc(SondeA1_DoY), "Temp"=as.numeric(as.character(SondeA1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA1[,"ODO."])), "DepID"=rep(1, length(SondeA1_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA1_BK <- Metabolism(Data=SondeA1_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA1_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA1_DoY)$y, Volumetric=FALSE)#
abline(v=114, col="darkblue")#
#
K_A2 <- KO2(as.numeric(as.character(SondeA2[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)#
KO2zmix_A2 <- K_A2/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y#
DOsatd_A2 <- SatdConc(as.numeric(as.character(SondeA2[,"Temp"])), 0.942*760)#
SondeA2_Data4BK <- data.frame("Year"=rep(2012, length(SondeA2_DoY)), "DoY"=trunc(SondeA2_DoY), "Fract"=SondeA2_DoY-trunc(SondeA2_DoY), "Temp"=as.numeric(as.character(SondeA2[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA2[,"ODO."])), "DepID"=rep(1, length(SondeA2_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA2_BK <- Metabolism(Data=SondeA2_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y, Volumetric=FALSE)#
abline(v=145, col="darkblue")#
#
K_A3 <- KO2(as.numeric(as.character(SondeA3[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA3_DoY)$y)#
KO2zmix_A3 <- K_A3/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA3_DoY, rule=2)$y#
DOsatd_A3 <- SatdConc(as.numeric(as.character(SondeA3[,"Temp"])), 0.942*760)#
SondeA3_Data4BK <- data.frame("Year"=rep(2012, length(SondeA3_DoY)), "DoY"=trunc(SondeA3_DoY), "Fract"=SondeA3_DoY-trunc(SondeA3_DoY), "Temp"=as.numeric(as.character(SondeA3[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA3[,"ODO."])), "DepID"=rep(1, length(SondeA3_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA3_BK <- Metabolism(Data=SondeA3_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA3_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA3_DoY)$y, Volumetric=FALSE)#
abline(v=160, col="darkblue")#
#
# SondeB_BK <- Metabolism(Data=SondeB_Data4BK, zmix=approx(x=c(105,110,117,124),y=c(1.0,2.0,2.0,0.5), xout=SondeB_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeB_DoY)$y)#
# abline(v=114, col="darkblue")#
#
# dev.new()#
# par(mar=c(3,3,1,1))#
# plot(SondeA_BK[,1], SondeA_BK[,3], type="o", lwd=2, bty="l")#
#
dev.new()#
boxplot(list("Pre-Manipulation"=SondeA1_BK[1:9,3], "Aquashade"=SondeA1_BK[10:19,3]), main="Ward Lake Epilimnetic GPP \n 15-Apr to 03-May", ylab=expression(mu*mol~O[2]~day^-1))#
#
t.test(SondeA1_BK[1:9,3], SondeA1_BK[10:19,3])#
#
#
Ward2010Light <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/WardLimno/WardWeekly2010.csv")#
Ward2010Light_DoY <- as.numeric(format.Date(as.POSIXct(Ward2010Light[,1], format="%d-%b-%y"), format="%j"))#
Ward2010_1percLight <- c(4.25, 4.5, 4.5, 4.25, 4.25, 4.25, 3.75, 4)#
#
Ward2012Light_DoY <- c(105, 110, 117, 124, 131, 138, 145, 152, 159, 163, 170)#
Ward2012_1percLight <- c(2.3, 2.8, 1.85, 1.75, 1.9, 1.9, 1.8, 1.75, 2.0, 1.5, 2.0)#
#
GuessLight <- approx(c(105,110,unique(Ward2010Light_DoY)), y=c(2.3,2.8,Ward2010_1percLight), xout=105:max(Ward2010Light_DoY))#
#
dev.new()#
plot(unique(Ward2010Light_DoY), Ward2010_1percLight, ylim=c(5,0), xlim=c(min(Ward2012Light_DoY), max(Ward2010Light_DoY)), type="o", lwd=2, ylab="Depth (m) of 1% Surface PAR", xlab="DoY")#
lines(GuessLight, lty="dotted", lwd=2)#
lines(Ward2012Light_DoY, Ward2012_1percLight, type="o", pch=22, lwd=2, col="blue")#
abline(v=114, col="darkblue")#
#
dev.new()#
plot(SondeA1_DoY, as.numeric(as.character(SondeA1[,"Chlorophyll"])), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")#
dev.new()#
plot(SondeA2_DoY, as.numeric(as.character(SondeA2[,"Chlorophyll"])), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")#
dev.new()#
plot(SondeA3_DoY, as.numeric(as.character(SondeA3[,"Chlorophyll"])), type="l", col="green", lwd=1, bty="l", xlab="DoY", ylab="Chl-a (ug/L)")#
abline(v=114, col="darkblue")
#
K_A1 <- KO2(as.numeric(as.character(SondeA1[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA1_DoY)$y)#
KO2zmix_A1 <- K_A1/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA1_DoY, rule=2)$y#
DOsatd_A1 <- SatdConc(as.numeric(as.character(SondeA1[,"Temp"])), 0.942*760)#
SondeA1_Data4BK <- data.frame("Year"=rep(2012, length(SondeA1_DoY)), "DoY"=trunc(SondeA1_DoY), "Fract"=SondeA1_DoY-trunc(SondeA1_DoY), "Temp"=as.numeric(as.character(SondeA1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA1[,"ODO."])), "DepID"=rep(1, length(SondeA1_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA1_BK <- Metabolism(Data=SondeA1_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA1_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA1_DoY)$y, Volumetric=TRUE)#
abline(v=114, col="darkblue")#
#
K_A2 <- KO2(as.numeric(as.character(SondeA2[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y)#
KO2zmix_A2 <- K_A2/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y#
DOsatd_A2 <- SatdConc(as.numeric(as.character(SondeA2[,"Temp"])), 0.942*760)#
SondeA2_Data4BK <- data.frame("Year"=rep(2012, length(SondeA2_DoY)), "DoY"=trunc(SondeA2_DoY), "Fract"=SondeA2_DoY-trunc(SondeA2_DoY), "Temp"=as.numeric(as.character(SondeA2[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA2[,"ODO."])), "DepID"=rep(1, length(SondeA2_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA2_BK <- Metabolism(Data=SondeA2_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA2_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA2_DoY)$y, Volumetric=TRUE)#
abline(v=145, col="darkblue")#
#
K_A3 <- KO2(as.numeric(as.character(SondeA3[,"Temp"])), 288, approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA3_DoY)$y)#
KO2zmix_A3 <- K_A3/approx(x=ZmixDays,y=ZmixDepths, xout=SondeA3_DoY, rule=2)$y#
DOsatd_A3 <- SatdConc(as.numeric(as.character(SondeA3[,"Temp"])), 0.942*760)#
SondeA3_Data4BK <- data.frame("Year"=rep(2012, length(SondeA3_DoY)), "DoY"=trunc(SondeA3_DoY), "Fract"=SondeA3_DoY-trunc(SondeA3_DoY), "Temp"=as.numeric(as.character(SondeA3[,"Temp"])), "DOsat"=as.numeric(as.character(SondeA3[,"ODO."])), "DepID"=rep(1, length(SondeA3_DoY)) )#
SondeB1_Data4BK <- data.frame("Year"=rep(2012, length(SondeB1_DoY)), "DoY"=trunc(SondeB1_DoY), "Fract"=SondeB1_DoY-trunc(SondeB1_DoY), "Temp"=as.numeric(as.character(SondeB1[,"Temp"])), "DOsat"=as.numeric(as.character(SondeB1[,"ODO."])), "DepID"=rep(1, length(SondeB1_DoY)) )#
SondeA3_BK <- Metabolism(Data=SondeA3_Data4BK, zmix=approx(x=ZmixDays,y=ZmixDepths, xout=SondeA3_DoY, rule=2)$y, Wind=approx(as.numeric(UNDERC_Weather[,"DoY"]), as.numeric(UNDERC_Weather[,"Wind"]), xout=SondeA3_DoY)$y, Volumetric=TRUE)#
abline(v=160, col="darkblue")
