Ryan Batt#
# Wrapper for Shiny Chimp app#
# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
#_vtest (13-Sept-2013) Familiarize with shiny, using squeal data, by plotting time series and setting up skeleton ui#
#_v0.0 (15-Sept-2013) Calculate statistics, plot in shiny, and option to save figures#
#_v0.1 (16-Sept-2013) Begin configuration for distribution. Set up to be downloaded from FTP, sourced by a single wrapper function (that will be emailed, not downloaded, and whose version will not change). Improve error messages/ handling. Figure aesthetics. Cancel out Secchi for Grace.#
#
# ===================#
# = dlData Function =#
# ===================#
dlData <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	ddURL <- paste(baseURL, "dailyData", cVersion, ".RData", sep="")#
	resURL <- paste(baseURL, "results", cVersion, ".RData", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#Check for package installation#
	stopifnot(require("RCurl"))#
#
	#Download dailyData_vX.X.RData#
	print("Downloading Daily Data")#
	flush.console()#
	ddConn <- getBinaryURL(ddURL, userpwd=cascUsePass, connecttimeout=120)#
	writeBin(ddConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(dailyData, file=paste(shinyDir, "/dailyData", cVersion, ".RData", sep=""))#
#
	#Download the .RData file of statistical output#
	print("Downloading Statistical Output")#
	flush.console()#
	resConn <- getBinaryURL(resURL, userpwd=cascUsePass)#
	writeBin(resConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(results, file=paste(shinyDir, "/results", cVersion, ".RData", sep=""))#
}#
#
dlScripts <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	uiURL <- paste(baseURL, "ui.R", sep="")#
	serverURL <- paste(baseURL, "server.R", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#check for package#
	stopifnot(require("RCurl"))#
	#download UI#
	print("Downloading Chimp UI")#
	flush.console()#
	ui <- getURL(uiURL, userpwd=cascUsePass)#
	uiConn <- file(paste(shinyDir, "/ui.R", sep=""))#
	writeLines(ui, con=uiConn)#
	close(uiConn)#
#
	#download server#
	print("Downloading Chimp Server")#
	flush.console()#
	server <- getURL(serverURL, userpwd=cascUsePass)#
	serverConn <- file(paste(shinyDir, "/server.R", sep=""))#
	writeLines(server, con=serverConn)#
	close(serverConn)#
}#
#
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir="R_GlobalEnv")#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir="R_GlobalEnv")#
				inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- inRpkgs#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=1)#
				load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=1)#
				inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- inShinyDir#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(runAppWD)#
}#
runChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	wd4app <- checkChimp()#
	runApp(appDir=wd4app)#
}
runChimp()
Ryan Batt#
# Wrapper for Shiny Chimp app#
# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
#_vtest (13-Sept-2013) Familiarize with shiny, using squeal data, by plotting time series and setting up skeleton ui#
#_v0.0 (15-Sept-2013) Calculate statistics, plot in shiny, and option to save figures#
#_v0.1 (16-Sept-2013) Begin configuration for distribution. Set up to be downloaded from FTP, sourced by a single wrapper function (that will be emailed, not downloaded, and whose version will not change). Improve error messages/ handling. Figure aesthetics. Cancel out Secchi for Grace.#
#
# ===================#
# = dlData Function =#
# ===================#
dlData <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	ddURL <- paste(baseURL, "dailyData", cVersion, ".RData", sep="")#
	resURL <- paste(baseURL, "results", cVersion, ".RData", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#Check for package installation#
	stopifnot(require("RCurl"))#
#
	#Download dailyData_vX.X.RData#
	print("Downloading Daily Data")#
	flush.console()#
	ddConn <- getBinaryURL(ddURL, userpwd=cascUsePass, connecttimeout=120)#
	writeBin(ddConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(dailyData, file=paste(shinyDir, "/dailyData", cVersion, ".RData", sep=""))#
#
	#Download the .RData file of statistical output#
	print("Downloading Statistical Output")#
	flush.console()#
	resConn <- getBinaryURL(resURL, userpwd=cascUsePass)#
	writeBin(resConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(results, file=paste(shinyDir, "/results", cVersion, ".RData", sep=""))#
}#
#
dlScripts <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	uiURL <- paste(baseURL, "ui.R", sep="")#
	serverURL <- paste(baseURL, "server.R", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#check for package#
	stopifnot(require("RCurl"))#
	#download UI#
	print("Downloading Chimp UI")#
	flush.console()#
	ui <- getURL(uiURL, userpwd=cascUsePass)#
	uiConn <- file(paste(shinyDir, "/ui.R", sep=""))#
	writeLines(ui, con=uiConn)#
	close(uiConn)#
#
	#download server#
	print("Downloading Chimp Server")#
	flush.console()#
	server <- getURL(serverURL, userpwd=cascUsePass)#
	serverConn <- file(paste(shinyDir, "/server.R", sep=""))#
	writeLines(server, con=serverConn)#
	close(serverConn)#
}#
#
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir="R_GlobalEnv")#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir="R_GlobalEnv")#
				inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- inRpkgs#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir="R_GlobalEnv")#
				load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir="R_GlobalEnv")#
				inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- inShinyDir#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(runAppWD)#
}#
runChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	wd4app <- checkChimp()#
	runApp(appDir=wd4app)#
}
runChimp()
search()
Ryan Batt#
# Wrapper for Shiny Chimp app#
# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
#_vtest (13-Sept-2013) Familiarize with shiny, using squeal data, by plotting time series and setting up skeleton ui#
#_v0.0 (15-Sept-2013) Calculate statistics, plot in shiny, and option to save figures#
#_v0.1 (16-Sept-2013) Begin configuration for distribution. Set up to be downloaded from FTP, sourced by a single wrapper function (that will be emailed, not downloaded, and whose version will not change). Improve error messages/ handling. Figure aesthetics. Cancel out Secchi for Grace.#
#
# ===================#
# = dlData Function =#
# ===================#
dlData <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	ddURL <- paste(baseURL, "dailyData", cVersion, ".RData", sep="")#
	resURL <- paste(baseURL, "results", cVersion, ".RData", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#Check for package installation#
	stopifnot(require("RCurl"))#
#
	#Download dailyData_vX.X.RData#
	print("Downloading Daily Data")#
	flush.console()#
	ddConn <- getBinaryURL(ddURL, userpwd=cascUsePass, connecttimeout=120)#
	writeBin(ddConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(dailyData, file=paste(shinyDir, "/dailyData", cVersion, ".RData", sep=""))#
#
	#Download the .RData file of statistical output#
	print("Downloading Statistical Output")#
	flush.console()#
	resConn <- getBinaryURL(resURL, userpwd=cascUsePass)#
	writeBin(resConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(results, file=paste(shinyDir, "/results", cVersion, ".RData", sep=""))#
}#
#
dlScripts <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	uiURL <- paste(baseURL, "ui.R", sep="")#
	serverURL <- paste(baseURL, "server.R", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#check for package#
	stopifnot(require("RCurl"))#
	#download UI#
	print("Downloading Chimp UI")#
	flush.console()#
	ui <- getURL(uiURL, userpwd=cascUsePass)#
	uiConn <- file(paste(shinyDir, "/ui.R", sep=""))#
	writeLines(ui, con=uiConn)#
	close(uiConn)#
#
	#download server#
	print("Downloading Chimp Server")#
	flush.console()#
	server <- getURL(serverURL, userpwd=cascUsePass)#
	serverConn <- file(paste(shinyDir, "/server.R", sep=""))#
	writeLines(server, con=serverConn)#
	close(serverConn)#
}#
#
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=".GlobalEnv")#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=".GlobalEnv")#
				inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- inRpkgs#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=".GlobalEnv")#
				load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=".GlobalEnv")#
				inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- inShinyDir#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(runAppWD)#
}#
runChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	wd4app <- checkChimp()#
	runApp(appDir=wd4app)#
}
search()
runChimp()
environment9)
environment()
parent.frame()
Ryan Batt#
# Wrapper for Shiny Chimp app#
# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
#_vtest (13-Sept-2013) Familiarize with shiny, using squeal data, by plotting time series and setting up skeleton ui#
#_v0.0 (15-Sept-2013) Calculate statistics, plot in shiny, and option to save figures#
#_v0.1 (16-Sept-2013) Begin configuration for distribution. Set up to be downloaded from FTP, sourced by a single wrapper function (that will be emailed, not downloaded, and whose version will not change). Improve error messages/ handling. Figure aesthetics. Cancel out Secchi for Grace.#
#
# ===================#
# = dlData Function =#
# ===================#
dlData <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	ddURL <- paste(baseURL, "dailyData", cVersion, ".RData", sep="")#
	resURL <- paste(baseURL, "results", cVersion, ".RData", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#Check for package installation#
	stopifnot(require("RCurl"))#
#
	#Download dailyData_vX.X.RData#
	print("Downloading Daily Data")#
	flush.console()#
	ddConn <- getBinaryURL(ddURL, userpwd=cascUsePass, connecttimeout=120)#
	writeBin(ddConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(dailyData, file=paste(shinyDir, "/dailyData", cVersion, ".RData", sep=""))#
#
	#Download the .RData file of statistical output#
	print("Downloading Statistical Output")#
	flush.console()#
	resConn <- getBinaryURL(resURL, userpwd=cascUsePass)#
	writeBin(resConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(results, file=paste(shinyDir, "/results", cVersion, ".RData", sep=""))#
}#
#
dlScripts <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	uiURL <- paste(baseURL, "ui.R", sep="")#
	serverURL <- paste(baseURL, "server.R", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#check for package#
	stopifnot(require("RCurl"))#
	#download UI#
	print("Downloading Chimp UI")#
	flush.console()#
	ui <- getURL(uiURL, userpwd=cascUsePass)#
	uiConn <- file(paste(shinyDir, "/ui.R", sep=""))#
	writeLines(ui, con=uiConn)#
	close(uiConn)#
#
	#download server#
	print("Downloading Chimp Server")#
	flush.console()#
	server <- getURL(serverURL, userpwd=cascUsePass)#
	serverConn <- file(paste(shinyDir, "/server.R", sep=""))#
	writeLines(server, con=serverConn)#
	close(serverConn)#
}#
#
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=".GlobalEnv")#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=".GlobalEnv")#
				inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- inRpkgs#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=".GlobalEnv")#
				load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=".GlobalEnv")#
				inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- inShinyDir#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(runAppWD)#
}#
runChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	wd4app <- checkChimp()#
	runApp(appDir=wd4app)#
}
runChimp()
Ryan Batt#
# Wrapper for Shiny Chimp app#
# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
#_vtest (13-Sept-2013) Familiarize with shiny, using squeal data, by plotting time series and setting up skeleton ui#
#_v0.0 (15-Sept-2013) Calculate statistics, plot in shiny, and option to save figures#
#_v0.1 (16-Sept-2013) Begin configuration for distribution. Set up to be downloaded from FTP, sourced by a single wrapper function (that will be emailed, not downloaded, and whose version will not change). Improve error messages/ handling. Figure aesthetics. Cancel out Secchi for Grace.#
#
# ===================#
# = dlData Function =#
# ===================#
dlData <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	ddURL <- paste(baseURL, "dailyData", cVersion, ".RData", sep="")#
	resURL <- paste(baseURL, "results", cVersion, ".RData", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#Check for package installation#
	stopifnot(require("RCurl"))#
#
	#Download dailyData_vX.X.RData#
	print("Downloading Daily Data")#
	flush.console()#
	ddConn <- getBinaryURL(ddURL, userpwd=cascUsePass, connecttimeout=120)#
	writeBin(ddConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(dailyData, file=paste(shinyDir, "/dailyData", cVersion, ".RData", sep=""))#
#
	#Download the .RData file of statistical output#
	print("Downloading Statistical Output")#
	flush.console()#
	resConn <- getBinaryURL(resURL, userpwd=cascUsePass)#
	writeBin(resConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(results, file=paste(shinyDir, "/results", cVersion, ".RData", sep=""))#
}#
#
dlScripts <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	uiURL <- paste(baseURL, "ui.R", sep="")#
	serverURL <- paste(baseURL, "server.R", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#check for package#
	stopifnot(require("RCurl"))#
	#download UI#
	print("Downloading Chimp UI")#
	flush.console()#
	ui <- getURL(uiURL, userpwd=cascUsePass)#
	uiConn <- file(paste(shinyDir, "/ui.R", sep=""))#
	writeLines(ui, con=uiConn)#
	close(uiConn)#
#
	#download server#
	print("Downloading Chimp Server")#
	flush.console()#
	server <- getURL(serverURL, userpwd=cascUsePass)#
	serverConn <- file(paste(shinyDir, "/server.R", sep=""))#
	writeLines(server, con=serverConn)#
	close(serverConn)#
}#
#
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- inRpkgs#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- inShinyDir#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(runAppWD)#
}#
runChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	wd4app <- checkChimp()#
	runApp(appDir=wd4app)#
}
runChimp()
Ryan Batt#
# Server commands for Shiny Chimp app#
# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
#_vtest (13-Sept-2013) Familiarize with shiny, using squeal data, by plotting time series and setting up skeleton ui#
#_v0.0 (15-Sept-2013) Calculate statistics, plot in shiny, and option to save figures#
#_v0.1 (16-Sept-2013) Begin configuration for distribution. Set up to be downloaded from FTP, sourced by a single wrapper function (that will be emailed, not downloaded, and whose version will not change). Improve error messages/ handling. Figure aesthetics. Cancel out Secchi for Grace.#
#
library(shiny)#
test <- 5#
print(ls())#
print(environment())#
print(parent.frame())#
print(flush.console())#
#
plotF <- function(df, respN, lakes){	#
	lCols <- c("Paul"="blue", "Peter"="red", "Tuesday"="black")#
	nlakes <- length(lakes)#
	i1 <- is.element(df[,"Lake"], lakes)#
	Ylim <- range(df[i1,respN], na.rm=TRUE)#
	Xlim <- range(df[i1,"DoY"], na.rm=TRUE)#
	for(i in 1:nlakes){#
		tLake <- lakes[i]#
		iLake <- df[,"Lake"] == tLake#
		day <- df[iLake,"DoY"]#
		resp <- df[iLake,respN]#
		if(i==1){#
			plot(day, resp, col=lCols[tLake], type="l", ylim=Ylim, xlim=Xlim, xlab="", ylab="")#
			if(is.element("Stat",names(df))){#
				mtext(paste(respN, "\n", unique(df[,"Stat"])), side=2, line=2.25)#
			}else{#
				mtext(respN, side=2, line=2.5)#
			}#
		}else{#
			lines(day, resp, col=lCols[tLake])#
		}#end if-else#
	}#end loop#
}#end function#
#
getDat <- function(wOpt, dOpt){#
	rKey <- attr(results, "split_labels")#
	iRes <- which(rKey[,"RollWin"]==wOpt & dOpt==rKey[,"Detrend"])#
	return(results[[iRes]])#
}#
#
# Define server logic required to plot various variables against mpg#
shinyServer(function(input, output) {	#
	sDat <- reactive({getDat(wOpt=input$window, dOpt=input$detrend)})#
	acI <- reactive({sDat()[,"Stat"]==input$acOpt})#
	varI <- reactive({sDat()[,"Stat"]==input$varOpt})#
	tsSave <- reactive({plotF(df=dailyData, respN=input$variable, lakes=input$lakeid)})#
	statSave <- reactive({#
		par(mfrow=c(2,1), mar=c(2,5,0.5,0.5))#
		plotF(df=sDat()[acI(),], respN=input$variable, lakes=input$lakeid)#
		plotF(df=sDat()[varI(),], respN=input$variable, lakes=input$lakeid)#
	})#
	output$tsPlot <- renderPlot({tsSave()})#
	output$statPlot <- renderPlot({statSave()})	#
	output$dFig <- downloadHandler(#
		filename <- function(){#
			if(input$panelID==1){#
				qn <- c("Paul"="L", "Peter"="R", "Tuesday"="T")#
				sL <- function(){paste(qn[unlist(input$lakeid)], collapse="")}#
				print(sL())#
				vname <- function(){input$variable}#
				paste("Chimp_", vname(), "_", sL(), ".pdf", sep="")#
			}else{#
				qn <- c("Paul"="L", "Peter"="R", "Tuesday"="T")#
				sL <- function(){paste(input$lakeid, collapse="")}#
				vname <- function(){input$variable}#
				wname <- function(){paste(input$window,"-day", sep="")}#
				paste("Chimp_", vname(), "_", sL(), "_", wname(), ".pdf", sep="")#
			}#
		},#end filename function#
		content <- function(file){#
			if(input$panelID==1){#
				pdf(file, width=5, height=3.5)#
				par(mar=c(4,4,0.5,0.5), ps=10, cex=1)#
				plotF(df=dailyData, respN=input$variable, lakes=input$lakeid)#
				mtext("DoY",side=1, line=2.5)#
				dev.off()#
			}else{#
				pdf(file, width=6, height=6)#
				par(mfrow=c(2,1), mar=c(3,4,0.5,0.5), oma=c(1,0,0,0), ps=10, cex=1)#
				plotF(df=sDat()[acI(),], respN=input$variable, lakes=input$lakeid)#
				plotF(df=sDat()[varI(),], respN=input$variable, lakes=input$lakeid)#
				mtext("DoY",side=1, line=2.5)#
				dev.off()			#
			}#
		},#end content function#
		contentType="image/pdf"#
	)#end downloadHandler#
})#end shinyServer
runChimp()
Ryan Batt#
# Wrapper for Shiny Chimp app#
# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
#_vtest (13-Sept-2013) Familiarize with shiny, using squeal data, by plotting time series and setting up skeleton ui#
#_v0.0 (15-Sept-2013) Calculate statistics, plot in shiny, and option to save figures#
#_v0.1 (16-Sept-2013) Begin configuration for distribution. Set up to be downloaded from FTP, sourced by a single wrapper function (that will be emailed, not downloaded, and whose version will not change). Improve error messages/ handling. Figure aesthetics. Cancel out Secchi for Grace.#
#
# ===================#
# = dlData Function =#
# ===================#
dlData <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	ddURL <- paste(baseURL, "dailyData", cVersion, ".RData", sep="")#
	resURL <- paste(baseURL, "results", cVersion, ".RData", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#Check for package installation#
	stopifnot(require("RCurl"))#
#
	#Download dailyData_vX.X.RData#
	print("Downloading Daily Data")#
	flush.console()#
	ddConn <- getBinaryURL(ddURL, userpwd=cascUsePass, connecttimeout=120)#
	writeBin(ddConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(dailyData, file=paste(shinyDir, "/dailyData", cVersion, ".RData", sep=""))#
#
	#Download the .RData file of statistical output#
	print("Downloading Statistical Output")#
	flush.console()#
	resConn <- getBinaryURL(resURL, userpwd=cascUsePass)#
	writeBin(resConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(results, file=paste(shinyDir, "/results", cVersion, ".RData", sep=""))#
}#
#
dlScripts <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	uiURL <- paste(baseURL, "ui.R", sep="")#
	serverURL <- paste(baseURL, "server.R", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#check for package#
	stopifnot(require("RCurl"))#
	#download UI#
	print("Downloading Chimp UI")#
	flush.console()#
	ui <- getURL(uiURL, userpwd=cascUsePass)#
	uiConn <- file(paste(shinyDir, "/ui.R", sep=""))#
	writeLines(ui, con=uiConn)#
	close(uiConn)#
#
	#download server#
	print("Downloading Chimp Server")#
	flush.console()#
	server <- getURL(serverURL, userpwd=cascUsePass)#
	serverConn <- file(paste(shinyDir, "/server.R", sep=""))#
	writeLines(server, con=serverConn)#
	close(serverConn)#
}#
#
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- inRpkgs#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- inShinyDir#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(runAppWD)#
}#
runChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	wd4app <- checkChimp()#
	runApp(appDir=wd4app)#
}
checkChimp()
runChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	wd4app <- checkChimp()#
	runApp(appDir=wd4app)#
}
runChimp()
rm(list=ls())#
buildVersion <- "_v0.2"#
#
myPath <- paste("/Users/Battrd/Documents/School&Work/WiscResearch/Squeal2/Squeal2_Chimp2013/Chimp", buildVersion, sep="")#
setwd(myPath)#
runFileName <- paste("Run_Shiny_SoS", buildVersion, ".R", sep="")
---------------------------------------------------------------------#
#
## Remove the folder if it exists#
if(file.exists("./chimpSqueal")){#
	unlink("chimpSqueal", recursive = TRUE)#
}#
#
## Build the package#
package.skeleton("chimpSqueal", code_files = paste("./", dir("./", pattern = "\\.R$"), sep = ""), force = TRUE)
Include the data#
resultsName <- paste("results", buildVersion, ".RData", sep="")#
dailyDataName <- paste("dailyData", buildVersion, ".RData", sep="")#
dir.create("chimpSqueal/data")#
file.copy(from = resultsName, to = "chimpSqueal/data/", overwrite = TRUE)#
file.copy(from = dailyDataName, to = "chimpSqueal/data/", overwrite = TRUE)#
file.copy(from = "./DESCRIPTION", to = "chimpSqueal/", overwrite = TRUE)
library(roxygen2)
roxygenize("chimpSqueal")
file.copy(from = "./NAMESPACE", to = "chimpSqueal/", overwrite = TRUE)
system("R CMD INSTALL --build chimpSqueal")
test <- 5
exists(test)
?exists
get(test)
test
rm(list=ls())#
buildVersion <- "_v0.2"#
#
myPath <- paste("/Users/Battrd/Documents/School&Work/WiscResearch/Squeal2/Squeal2_Chimp2013/Chimp", buildVersion, sep="")#
setwd(myPath)#
runFileName <- paste("Run_Shiny_SoS", buildVersion, ".R", sep="")#
#
## Build the package#
## ---------------------------------------------------------------------#
#
## Remove the folder if it exists#
if(file.exists("./chimpSqueal")){#
	unlink("chimpSqueal", recursive = TRUE)#
}#
#
## Build the package#
package.skeleton("chimpSqueal", code_files = paste("./", dir("./", pattern = "\\.R$"), sep = ""), force = TRUE)#
#
## Include the data#
resultsName <- paste("results", buildVersion, ".RData", sep="")#
dailyDataName <- paste("dailyData", buildVersion, ".RData", sep="")#
dir.create("chimpSqueal/data")#
file.copy(from = resultsName, to = "chimpSqueal/data/", overwrite = TRUE)#
file.copy(from = dailyDataName, to = "chimpSqueal/data/", overwrite = TRUE)#
file.copy(from = "./DESCRIPTION", to = "chimpSqueal/", overwrite = TRUE)#
#
# =======================#
# = Copy over man files =#
# =======================#
#
# file.copy(from = dir("man_backup/"), to = "chimpSqueal/man/", overwrite = TRUE)#
## Use roxygen to build the documentation#
library(roxygen2)#
roxygenize("chimpSqueal")#
file.copy(from = "./NAMESPACE", to = "chimpSqueal/", overwrite = TRUE)
system("R CMD INSTALL --build chimpSqueal")
system("R CMD build chimpSqueal")
system("R CMD check chimpSqueal")
system("R CMD INSTALL --build chimpSqueal")
system("R CMD build chimpSqueal")
system("R CMD check chimpSqueal")
system("R CMD INSTALL --build chimpSqueal")
system("R CMD build chimpSqueal")
system("R CMD check chimpSqueal")
rm(list=ls())#
buildVersion <- "_v0.2"#
#
myPath <- paste("/Users/Battrd/Documents/School&Work/WiscResearch/Squeal2/Squeal2_Chimp2013/Chimp", buildVersion, sep="")#
setwd(myPath)#
runFileName <- paste("Run_Shiny_SoS", buildVersion, ".R", sep="")#
#
## Build the package#
## ---------------------------------------------------------------------#
#
## Remove the folder if it exists#
if(file.exists("./chimpSqueal")){#
	unlink("chimpSqueal", recursive = TRUE)#
}#
#
## Build the package#
package.skeleton("chimpSqueal", code_files = paste("./", dir("./", pattern = "\\.R$"), sep = ""), force = TRUE)#
#
## Include the data#
resultsName <- paste("results", buildVersion, ".RData", sep="")#
dailyDataName <- paste("dailyData", buildVersion, ".RData", sep="")#
dir.create("chimpSqueal/data")#
file.copy(from = resultsName, to = "chimpSqueal/data/", overwrite = TRUE)#
file.copy(from = dailyDataName, to = "chimpSqueal/data/", overwrite = TRUE)#
file.copy(from = "./DESCRIPTION", to = "chimpSqueal/", overwrite = TRUE)#
#
# =======================#
# = Copy over man files =#
# =======================#
#
# file.copy(from = dir("man_backup/"), to = "chimpSqueal/man/", overwrite = TRUE)#
## Use roxygen to build the documentation#
library(roxygen2)#
roxygenize("chimpSqueal")#
file.copy(from = "./NAMESPACE", to = "chimpSqueal/", overwrite = TRUE)
Use roxygen to build the documentation#
library(roxygen2)#
roxygenize("chimpSqueal")#
file.copy(from = "./NAMESPACE", to = "chimpSqueal/", overwrite = TRUE)
roxygenize("chimpSqueal")
system("R CMD INSTALL --build chimpSqueal")
system("R CMD build chimpSqueal")
system("R CMD check chimpSqueal")
system("R CMD check --as-cran chimpSqueal")
setwd("~/")
rm(list=ls())
install.packages("chimpSqueal_0.2.tar.gz", type="source", repos=NULL)
library("chimpSqueal")
?runChimp
?checkChimp
test <- runChimp()
search()
ls(pos=2)
chimpSqueal::runChimp()
chimpSqueal:::runChimp()
runApp("/Users/Battrd/Desktop/.tmpChimp")
ls()
ls(pos=2)
dataLocs
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- inRpkgs#
				if(inRpkgs){dataPath <- pkgData}#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- inShinyDir#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
		dataPath <- shinyDir#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(list(runAppWD, dataPath))#
}
checkChimp()
require("RCurl")
require("shiny")
cVersion <- paste("_v",versionNumber, sep="")
versionNumber=0.2
cVersion <- paste("_v",versionNumber, sep="")
dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)
inEnv <- exists("dailyData") & exists("results")
inEnv
ls()
rm("dailyData", "results")
checkChimp()
ls()
rm("dailyData", "results")
inEnv <- exists("dailyData") & exists("results")
inEnv
dataLocs["env"] <- inEnv
dataLocs
"chimpSqueal" %in% installed.packages()[,"Package"]
pkgData <- dir(system.file("data", package="chimpSqueal"))
pkgData
dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- inRpkgs#
				if(inRpkgs){dataPath <- dir(system.file("data", package="chimpSqueal"), full.names=TRUE)}#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- inShinyDir#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
		dataPath <- shinyDir#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(list(runAppWD, dataPath))#
}
checkChimp()
dir(system.file("data", package="chimpSqueal"), pattern="\\.RD" full.names=TRUE)
dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$" full.names=TRUE)
dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$", full.names=TRUE)
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- inRpkgs#
				if(inRpkgs){dataPath <- dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$", full.names=TRUE)}#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- inShinyDir#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
		dataPath <- shinyDir#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(list(runAppWD, dataPath))#
}
checkChimp()
rm("dailyData", "results")
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(inEnv){dataPath=NULL}#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- inRpkgs#
				if(inRpkgs){dataPath <- dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$", full.names=TRUE)}#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- inShinyDir#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
		dataPath <- shinyDir#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(list(runAppWD, dataPath))#
}
checkChimp()
load(checkChimp()[[2]])
tapply(checkChimp()[[2]], 1:2, FUN=load)
checkChimp()[[2]]
rm("dailyData", "results")
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(inEnv){dataPath=NULL}#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				# load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				# load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- inRpkgs#
				if(inRpkgs){dataPath <- dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$", full.names=TRUE)}#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				# load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				# load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- inShinyDir#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
		dataPath <- shinyDir#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(list(runAppWD, dataPath))#
}
checkChimp()
dir(system.file("data", package="chimpSqueal"))
paste(c("dailyData", "results"), cVersion, ".RData", sep="")
all(dataNames %in% pkgData)
dataPath
dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$", full.names=TRUE)
file.exists(shinyDir)
userDir <- paste("/Users/", Sys.info()["user"], sep="")
shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")
file.exists(shinyDir)
tmpData <- dir(shinyDir)
tmpData
dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")
dataNames
all(dataNames %in% tmpData)
inShinyDir <- exists("dailyData") & exists("results")
inShinyDir
dataNames
tmpData
dataNames %in% tmpData
all(dataNames %in% tmpData)
c(NULL, 10)
dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$", full.names=TRUE)
tapply(dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$", full.names=TRUE), c(1,2), load)
ls()
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(inEnv){dataPath=NULL}#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				# load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				# load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				# inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- TRUE#
				if(dataLocs["Rpkgs"]){dataPath <- dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$", full.names=TRUE)}#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				# load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				# load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				# inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- TRUE#
				if(dataLocs["shinyDir"]){dataPath <- shinyDir}#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
		dataPath <- shinyDir#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(list(runAppWD, dataPath))#
}
checkChimp()
wd4app <- checkChimp()[[1]]
for(i in checkChimp()[[2]]){load(i)}
checkChimp()[[2]]
shinyDir
paste(shinyDir,dataNames,sep="/")
dataPath <- paste(shinyDir,dataNames,sep="/")
dataPath
dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$", full.names=TRUE)
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(inEnv){dataPath=NULL}#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				# load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				# load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				# inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- TRUE#
				if(dataLocs["Rpkgs"]){dataPath <- dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$", full.names=TRUE)}#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				# load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				# load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				# inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- TRUE#
				if(dataLocs["shinyDir"]){dataPath <- paste(shinyDir,dataNames,sep="/")}#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
		dataPath <- paste(shinyDir,dataNames,sep="/")#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(list(runAppWD, dataPath))#
}
checkChimp()[[2]]
for(i in checkChimp()[[2]]){load(i)}
ls()
rm("dailyData", "results")
for(i in checkChimp()[[2]]){load(i)}
ls()
Ryan Batt#
# Wrapper for Shiny Chimp app#
# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
#_vtest (13-Sept-2013) Familiarize with shiny, using squeal data, by plotting time series and setting up skeleton ui#
#_v0.0 (15-Sept-2013) Calculate statistics, plot in shiny, and option to save figures#
#_v0.1 (16-Sept-2013) Begin configuration for distribution. Set up to be downloaded from FTP, sourced by a single wrapper function (that will be emailed, not downloaded, and whose version will not change). Improve error messages/ handling. Figure aesthetics. Cancel out Secchi for Grace.#
#
# ===================#
# = dlData Function =#
# ===================#
dlData <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	ddURL <- paste(baseURL, "dailyData", cVersion, ".RData", sep="")#
	resURL <- paste(baseURL, "results", cVersion, ".RData", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#Check for package installation#
	stopifnot(require("RCurl"))#
#
	#Download dailyData_vX.X.RData#
	print("Downloading Daily Data")#
	flush.console()#
	ddConn <- getBinaryURL(ddURL, userpwd=cascUsePass, connecttimeout=120)#
	writeBin(ddConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(dailyData, file=paste(shinyDir, "/dailyData", cVersion, ".RData", sep=""))#
#
	#Download the .RData file of statistical output#
	print("Downloading Statistical Output")#
	flush.console()#
	resConn <- getBinaryURL(resURL, userpwd=cascUsePass)#
	writeBin(resConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(results, file=paste(shinyDir, "/results", cVersion, ".RData", sep=""))#
}#
#
dlScripts <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	uiURL <- paste(baseURL, "ui.R", sep="")#
	serverURL <- paste(baseURL, "server.R", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#check for package#
	stopifnot(require("RCurl"))#
	#download UI#
	print("Downloading Chimp UI")#
	flush.console()#
	ui <- getURL(uiURL, userpwd=cascUsePass)#
	uiConn <- file(paste(shinyDir, "/ui.R", sep=""))#
	writeLines(ui, con=uiConn)#
	close(uiConn)#
#
	#download server#
	print("Downloading Chimp Server")#
	flush.console()#
	server <- getURL(serverURL, userpwd=cascUsePass)#
	serverConn <- file(paste(shinyDir, "/server.R", sep=""))#
	writeLines(server, con=serverConn)#
	close(serverConn)#
}#
#
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(inEnv){dataPath=NULL}#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				# load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				# load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				# inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- TRUE#
				if(dataLocs["Rpkgs"]){dataPath <- dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$", full.names=TRUE)}#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				# load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				# load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				# inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- TRUE#
				if(dataLocs["shinyDir"]){dataPath <- paste(shinyDir,dataNames,sep="/")}#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
		dataPath <- paste(shinyDir,dataNames,sep="/")#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(list(runAppWD, dataPath))#
}#
runChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	wd4app <- checkChimp()[[1]]#
	# return(wd4app)#
	runApp(wd4app)#
}
rm(list=ls())
runChimp
runChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	wd4app <- checkChimp()[[1]]#
	# return(wd4app)#
	runApp(wd4app)#
}
Ryan Batt#
# Wrapper for Shiny Chimp app#
# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
#_vtest (13-Sept-2013) Familiarize with shiny, using squeal data, by plotting time series and setting up skeleton ui#
#_v0.0 (15-Sept-2013) Calculate statistics, plot in shiny, and option to save figures#
#_v0.1 (16-Sept-2013) Begin configuration for distribution. Set up to be downloaded from FTP, sourced by a single wrapper function (that will be emailed, not downloaded, and whose version will not change). Improve error messages/ handling. Figure aesthetics. Cancel out Secchi for Grace.#
#
# ===================#
# = dlData Function =#
# ===================#
dlData <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	ddURL <- paste(baseURL, "dailyData", cVersion, ".RData", sep="")#
	resURL <- paste(baseURL, "results", cVersion, ".RData", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#Check for package installation#
	stopifnot(require("RCurl"))#
#
	#Download dailyData_vX.X.RData#
	print("Downloading Daily Data")#
	flush.console()#
	ddConn <- getBinaryURL(ddURL, userpwd=cascUsePass, connecttimeout=120)#
	writeBin(ddConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(dailyData, file=paste(shinyDir, "/dailyData", cVersion, ".RData", sep=""))#
#
	#Download the .RData file of statistical output#
	print("Downloading Statistical Output")#
	flush.console()#
	resConn <- getBinaryURL(resURL, userpwd=cascUsePass)#
	writeBin(resConn, "temp.RData")#
	load("temp.RData")#
	unlink("temp.RData")#
	save(results, file=paste(shinyDir, "/results", cVersion, ".RData", sep=""))#
}#
#
dlScripts <- function(cVersion="_v0.2"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	#Identify server directories#
	baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	uiURL <- paste(baseURL, "ui.R", sep="")#
	serverURL <- paste(baseURL, "server.R", sep="")#
	cascUsePass <- "cascade@bookofluke.org:tjolahop"#
#
	#check for package#
	stopifnot(require("RCurl"))#
	#download UI#
	print("Downloading Chimp UI")#
	flush.console()#
	ui <- getURL(uiURL, userpwd=cascUsePass)#
	uiConn <- file(paste(shinyDir, "/ui.R", sep=""))#
	writeLines(ui, con=uiConn)#
	close(uiConn)#
#
	#download server#
	print("Downloading Chimp Server")#
	flush.console()#
	server <- getURL(serverURL, userpwd=cascUsePass)#
	serverConn <- file(paste(shinyDir, "/server.R", sep=""))#
	writeLines(server, con=serverConn)#
	close(serverConn)#
}#
#
checkChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	# =======================================#
	# = Perform checks on data availability =#
	# =======================================#
	dataLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnv <- exists("dailyData") & exists("results")#
	dataLocs["env"] <- inEnv#
	if(inEnv){dataPath=NULL}#
	if(!inEnv){ #If neither of the objects is currently present, search for files#
		#First, look where you would expect to find the .RData files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgData <- dir(system.file("data", package="chimpSqueal"))#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% pkgData)){#
				# load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				# load(dir(system.file("data", package="chimpSqueal"), pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				# inRpkgs <- exists("dailyData") & exists("results")#
				dataLocs["Rpkgs"] <- TRUE#
				if(dataLocs["Rpkgs"]){dataPath <- dir(system.file("data", package="chimpSqueal"), pattern="\\.RData$", full.names=TRUE)}#
			} # END all(dataNames %in% pkgData)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if neither object is present, and the data aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			dataNames <- paste(c("dailyData", "results"), cVersion, ".RData", sep="")#
			if(all(dataNames %in% tmpData)){#
				# load(dir(shinyDir, pattern=dataNames[1], full.names=TRUE), envir=parent.frame())#
				# load(dir(shinyDir, pattern=dataNames[2], full.names=TRUE), envir=parent.frame())#
				# inShinyDir <- exists("dailyData") & exists("results")#
				dataLocs["shinyDir"] <- TRUE#
				if(dataLocs["shinyDir"]){dataPath <- paste(shinyDir,dataNames,sep="/")}#
			} #END all(dataNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(dataLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlData()#
		dataPath <- paste(shinyDir,dataNames,sep="/")#
	}#
	# =========================================#
	# = Perform checks on script availability =#
	# =========================================#
	scriptsLocs <- c("env"=NA, "Rpkgs"=NA, "shinyDir"=NA)#
	#Do the objects exist in the package environment?#
	inEnvS <- file.exists("ui.R") & file.exists("server.R")#
	if(inEnvS){#
		runAppWD <- getwd()	#
	}#
	scriptsLocs["env"] <- inEnvS#
	if(!inEnvS){ #If neither script is present in the current working directory, search for files#
		#First, look where you would expect to find the .R files associated with package...#
		if("chimpSqueal" %in% installed.packages()[,"Package"]){ #First look in the package directory, if the package is isntalled#
			pkgScripts <- dir(system.file("R", package="chimpSqueal")) #pull out all the scripts#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% pkgScripts)){ #compare the scripts in the R package directory with those that we want to find#
				runAppWD <- system.file("R", package="chimpSqueal") #If they've been found, take note of R's package directory, and save for use w/ shiny#
				scriptsLocs["Rpkgs"] <- TRUE#
			} # END all(scriptsNames %in% pkgScripts)#
		} #END "chimpSqueal" %in% installed.packages()[,"Package"]#
		#if script present in the current wd, and the scripts aren't in the R package directory, check shinyDir#
		userDir <- paste("/Users/", Sys.info()["user"], sep="")#
		shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
		if(file.exists(shinyDir)){#
			tmpData <- dir(shinyDir)#
			scriptsNames <- c("ui.R", "server.R")#
			if(all(scriptsNames %in% tmpData)){#
				runAppWD <- shinyDir#
				scriptsLocs["shinyDir"] <- TRUE#
			} #END all(scriptsNames %in% tmpData)#
		} #END file.exists(shinyDir)		#
	}# END !inEnv#
	if(!any(scriptsLocs, na.rm=TRUE)){ #If I can't find it anywhere, then just download it, and put it in Shiny directory#
		dlScripts()#
		runAppWD <- shinyDir#
	}#
	return(list(runAppWD, dataPath))#
}#
runChimp <- function(versionNumber=0.2){#
	stopifnot(#
		require("RCurl"),#
		require("shiny")#
		)#
	cVersion <- paste("_v",versionNumber, sep="")#
	wd4app <- checkChimp()[[1]]#
	# return(wd4app)#
	runApp(wd4app)#
}
runChimp()
remove.packages("chimpSqueal")
rm(list=ls())#
buildVersion <- "_v0.2"#
#
myPath <- paste("/Users/Battrd/Documents/School&Work/WiscResearch/Squeal2/Squeal2_Chimp2013/Chimp", buildVersion, sep="")#
setwd(myPath)#
runFileName <- paste("Run_Shiny_SoS", buildVersion, ".R", sep="")#
#
## Build the package#
## ---------------------------------------------------------------------#
#
## Remove the folder if it exists#
if(file.exists("./chimpSqueal")){#
	unlink("chimpSqueal", recursive = TRUE)#
}#
#
## Build the package#
package.skeleton("chimpSqueal", code_files = paste("./", dir("./", pattern = "\\.R$"), sep = ""), force = TRUE)
Include the data#
resultsName <- paste("results", buildVersion, ".RData", sep="")#
dailyDataName <- paste("dailyData", buildVersion, ".RData", sep="")#
dir.create("chimpSqueal/data")#
file.copy(from = resultsName, to = "chimpSqueal/data/", overwrite = TRUE)#
file.copy(from = dailyDataName, to = "chimpSqueal/data/", overwrite = TRUE)#
file.copy(from = "./DESCRIPTION", to = "chimpSqueal/", overwrite = TRUE)
Use roxygen to build the documentation#
library(roxygen2)#
roxygenize("chimpSqueal")#
file.copy(from = "./NAMESPACE", to = "chimpSqueal/", overwrite = TRUE)
system("R CMD INSTALL --build chimpSqueal")
system("R CMD build chimpSqueal")
system("R CMD check chimpSqueal")
setwd("~/")
rm(list=ls())
install.packages("chimpSqueal_0.2.tar.gz", type="source", repos=NULL)
library("chimpSqueal")
?runChimp
install.packages("chimpSqueal_0.2.tar.gz", type="source", repos=NULL)
library("chimpSqueal")
?runChimp
?checkChimp
runChimp()
remove.packages("chimpSqueal")
install.packages("chimpSqueal_0.2.tar.gz", type="source", repos=NULL)
library("chimpSqueal")
runChimp()
writeServer <- '# Ryan Batt
writeServer <- '# Ryan Batt#
# Server commands for Shiny Chimp app#
# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
#_v0.2 (18-Sept-2013): Built for R package chimpSqueal#
#
library(shiny)#
#
if(exists("dailyData") & exists("results")){#
	dailyData <- chimpSqueal:::dailyData#
	results <- chimpSqueal:::results#
	print("Found data sets locally")#
}else{#
	print("Could not find data sets locally, \n downloading data and scripts from FTP")#
	dataLocations <- checkChimp()[[2]]#
	print(dataLocations)#
	load(dataLocations[1])#
	load(dataLocations[2])#
}#
print(ls())#
#
plotF <- function(df, respN, lakes){	#
	lCols <- c("Paul"="blue", "Peter"="red", "Tuesday"="black")#
	nlakes <- length(lakes)#
	i1 <- is.element(df[,"Lake"], lakes)#
	Ylim <- range(df[i1,respN], na.rm=TRUE)#
	Xlim <- range(df[i1,"DoY"], na.rm=TRUE)#
	for(i in 1:nlakes){#
		tLake <- lakes[i]#
		iLake <- df[,"Lake"] == tLake#
		day <- df[iLake,"DoY"]#
		resp <- df[iLake,respN]#
		if(i==1){#
			plot(day, resp, col=lCols[tLake], type="l", ylim=Ylim, xlim=Xlim, xlab="", ylab="")#
			if(is.element("Stat",names(df))){#
				mtext(paste(respN, "\n", unique(df[,"Stat"])), side=2, line=2.25)#
			}else{#
				mtext(respN, side=2, line=2.5)#
			}#
		}else{#
			lines(day, resp, col=lCols[tLake])#
		}#end if-else#
	}#end loop#
}#end function#
#
getDat <- function(wOpt, dOpt){#
	rKey <- attr(results, "split_labels")#
	iRes <- which(rKey[,"RollWin"]==wOpt & dOpt==rKey[,"Detrend"])#
	return(results[[iRes]])#
}#
#
# Define server logic required to plot various variables against mpg#
shinyServer(function(input, output) {	#
	sDat <- reactive({getDat(wOpt=input$window, dOpt=input$detrend)})#
	acI <- reactive({sDat()[,"Stat"]==input$acOpt})#
	varI <- reactive({sDat()[,"Stat"]==input$varOpt})#
	tsSave <- reactive({plotF(df=dailyData, respN=input$variable, lakes=input$lakeid)})#
	statSave <- reactive({#
		par(mfrow=c(2,1), mar=c(2,5,0.5,0.5))#
		plotF(df=sDat()[acI(),], respN=input$variable, lakes=input$lakeid)#
		plotF(df=sDat()[varI(),], respN=input$variable, lakes=input$lakeid)#
	})#
	output$tsPlot <- renderPlot({tsSave()})#
	output$statPlot <- renderPlot({statSave()})	#
	output$dFig <- downloadHandler(#
		filename <- function(){#
			if(input$panelID==1){#
				qn <- c("Paul"="L", "Peter"="R", "Tuesday"="T")#
				sL <- function(){paste(qn[unlist(input$lakeid)], collapse="")}#
				print(sL())#
				vname <- function(){input$variable}#
				paste("Chimp_", vname(), "_", sL(), ".pdf", sep="")#
			}else{#
				qn <- c("Paul"="L", "Peter"="R", "Tuesday"="T")#
				sL <- function(){paste(input$lakeid, collapse="")}#
				vname <- function(){input$variable}#
				wname <- function(){paste(input$window,"-day", sep="")}#
				paste("Chimp_", vname(), "_", sL(), "_", wname(), ".pdf", sep="")#
			}#
		},#end filename function#
		content <- function(file){#
			if(input$panelID==1){#
				pdf(file, width=5, height=3.5)#
				par(mar=c(4,4,0.5,0.5), ps=10, cex=1)#
				plotF(df=dailyData, respN=input$variable, lakes=input$lakeid)#
				mtext("DoY",side=1, line=2.5)#
				dev.off()#
			}else{#
				pdf(file, width=6, height=6)#
				par(mfrow=c(2,1), mar=c(3,4,0.5,0.5), oma=c(1,0,0,0), ps=10, cex=1)#
				plotF(df=sDat()[acI(),], respN=input$variable, lakes=input$lakeid)#
				plotF(df=sDat()[varI(),], respN=input$variable, lakes=input$lakeid)#
				mtext("DoY",side=1, line=2.5)#
				dev.off()			#
			}#
		},#end content function#
		contentType="image/pdf"#
	)#end downloadHandler#
})#end shinyServer#
'
serverConn <- file("server.R")#
	serverLines <-#
	'#
	# Ryan Batt#
	# Server commands for Shiny Chimp app#
	# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
	#_v0.2 (18-Sept-2013): Built for R package chimpSqueal#
#
	library(shiny)#
#
	if(exists("dailyData") & exists("results")){#
		dailyData <- chimpSqueal:::dailyData#
		results <- chimpSqueal:::results#
		print("Found data sets locally")#
	}else{#
		print("Could not find data sets locally, \n downloading data and scripts from FTP")#
		dataLocations <- checkChimp()[[2]]#
		print(dataLocations)#
		load(dataLocations[1])#
		load(dataLocations[2])#
	}#
	print(ls())#
#
	plotF <- function(df, respN, lakes){	#
		lCols <- c("Paul"="blue", "Peter"="red", "Tuesday"="black")#
		nlakes <- length(lakes)#
		i1 <- is.element(df[,"Lake"], lakes)#
		Ylim <- range(df[i1,respN], na.rm=TRUE)#
		Xlim <- range(df[i1,"DoY"], na.rm=TRUE)#
#
		for(i in 1:nlakes){#
			tLake <- lakes[i]#
			iLake <- df[,"Lake"] == tLake#
			day <- df[iLake,"DoY"]#
			resp <- df[iLake,respN]#
#
			if(i==1){#
				plot(day, resp, col=lCols[tLake], type="l", ylim=Ylim, xlim=Xlim, xlab="", ylab="")#
				if(is.element("Stat",names(df))){#
					mtext(paste(respN, "\n", unique(df[,"Stat"])), side=2, line=2.25)#
				}else{#
					mtext(respN, side=2, line=2.5)#
				}#
#
			}else{#
				lines(day, resp, col=lCols[tLake])#
			}#end if-else#
		}#end loop#
	}#end function#
#
	getDat <- function(wOpt, dOpt){#
		rKey <- attr(results, "split_labels")#
		iRes <- which(rKey[,"RollWin"]==wOpt & dOpt==rKey[,"Detrend"])#
		return(results[[iRes]])#
	}#
#
	# Define server logic required to plot various variables against mpg#
	shinyServer(function(input, output) {	#
		sDat <- reactive({getDat(wOpt=input$window, dOpt=input$detrend)})#
		acI <- reactive({sDat()[,"Stat"]==input$acOpt})#
		varI <- reactive({sDat()[,"Stat"]==input$varOpt})#
#
		tsSave <- reactive({plotF(df=dailyData, respN=input$variable, lakes=input$lakeid)})#
		statSave <- reactive({#
			par(mfrow=c(2,1), mar=c(2,5,0.5,0.5))#
			plotF(df=sDat()[acI(),], respN=input$variable, lakes=input$lakeid)#
			plotF(df=sDat()[varI(),], respN=input$variable, lakes=input$lakeid)#
		})#
#
		output$tsPlot <- renderPlot({tsSave()})#
		output$statPlot <- renderPlot({statSave()})	#
#
		output$dFig <- downloadHandler(#
			filename <- function(){#
				if(input$panelID==1){#
					qn <- c("Paul"="L", "Peter"="R", "Tuesday"="T")#
					sL <- function(){paste(qn[unlist(input$lakeid)], collapse="")}#
					print(sL())#
					vname <- function(){input$variable}#
					paste("Chimp_", vname(), "_", sL(), ".pdf", sep="")#
				}else{#
					qn <- c("Paul"="L", "Peter"="R", "Tuesday"="T")#
					sL <- function(){paste(input$lakeid, collapse="")}#
					vname <- function(){input$variable}#
					wname <- function(){paste(input$window,"-day", sep="")}#
					paste("Chimp_", vname(), "_", sL(), "_", wname(), ".pdf", sep="")#
				}#
			},#end filename function#
			content <- function(file){#
				if(input$panelID==1){#
					pdf(file, width=5, height=3.5)#
					par(mar=c(4,4,0.5,0.5), ps=10, cex=1)#
					plotF(df=dailyData, respN=input$variable, lakes=input$lakeid)#
					mtext("DoY",side=1, line=2.5)#
					dev.off()#
				}else{#
					pdf(file, width=6, height=6)#
					par(mfrow=c(2,1), mar=c(3,4,0.5,0.5), oma=c(1,0,0,0), ps=10, cex=1)#
					plotF(df=sDat()[acI(),], respN=input$variable, lakes=input$lakeid)#
					plotF(df=sDat()[varI(),], respN=input$variable, lakes=input$lakeid)#
					mtext("DoY",side=1, line=2.5)#
					dev.off()			#
				}#
			},#end content function#
			contentType="image/pdf"#
		)#end downloadHandler#
	})#end shinyServer#
	'
length(serverLines)
nchar(serverLines)
userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}
writeServer <- function(){#
		serverConn <- file("server.R")#
		serverLines <-#
			('#
			# Ryan Batt#
			# Server commands for Shiny Chimp app#
			# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
			#_v0.2 (18-Sept-2013): Built for R package chimpSqueal#
#
			library(shiny)#
#
			if(exists("dailyData") & exists("results")){#
				dailyData <- chimpSqueal:::dailyData#
				results <- chimpSqueal:::results#
				print("Found data sets locally")#
			}else{#
				print("Could not find data sets locally, \n downloading data and scripts from FTP")#
				dataLocations <- checkChimp()[[2]]#
				print(dataLocations)#
				load(dataLocations[1])#
				load(dataLocations[2])#
			}#
			print(ls())#
#
			plotF <- function(df, respN, lakes){	#
				lCols <- c("Paul"="blue", "Peter"="red", "Tuesday"="black")#
				nlakes <- length(lakes)#
				i1 <- is.element(df[,"Lake"], lakes)#
				Ylim <- range(df[i1,respN], na.rm=TRUE)#
				Xlim <- range(df[i1,"DoY"], na.rm=TRUE)#
#
				for(i in 1:nlakes){#
					tLake <- lakes[i]#
					iLake <- df[,"Lake"] == tLake#
					day <- df[iLake,"DoY"]#
					resp <- df[iLake,respN]#
#
					if(i==1){#
						plot(day, resp, col=lCols[tLake], type="l", ylim=Ylim, xlim=Xlim, xlab="", ylab="")#
						if(is.element("Stat",names(df))){#
							mtext(paste(respN, "\n", unique(df[,"Stat"])), side=2, line=2.25)#
						}else{#
							mtext(respN, side=2, line=2.5)#
						}#
#
					}else{#
						lines(day, resp, col=lCols[tLake])#
					}#end if-else#
				}#end loop#
			}#end function#
#
			getDat <- function(wOpt, dOpt){#
				rKey <- attr(results, "split_labels")#
				iRes <- which(rKey[,"RollWin"]==wOpt & dOpt==rKey[,"Detrend"])#
				return(results[[iRes]])#
			}#
#
			# Define server logic required to plot various variables against mpg#
			shinyServer(function(input, output) {	#
				sDat <- reactive({getDat(wOpt=input$window, dOpt=input$detrend)})#
				acI <- reactive({sDat()[,"Stat"]==input$acOpt})#
				varI <- reactive({sDat()[,"Stat"]==input$varOpt})#
#
				tsSave <- reactive({plotF(df=dailyData, respN=input$variable, lakes=input$lakeid)})#
				statSave <- reactive({#
					par(mfrow=c(2,1), mar=c(2,5,0.5,0.5))#
					plotF(df=sDat()[acI(),], respN=input$variable, lakes=input$lakeid)#
					plotF(df=sDat()[varI(),], respN=input$variable, lakes=input$lakeid)#
				})#
#
				output$tsPlot <- renderPlot({tsSave()})#
				output$statPlot <- renderPlot({statSave()})	#
#
				output$dFig <- downloadHandler(#
					filename <- function(){#
						if(input$panelID==1){#
							qn <- c("Paul"="L", "Peter"="R", "Tuesday"="T")#
							sL <- function(){paste(qn[unlist(input$lakeid)], collapse="")}#
							print(sL())#
							vname <- function(){input$variable}#
							paste("Chimp_", vname(), "_", sL(), ".pdf", sep="")#
						}else{#
							qn <- c("Paul"="L", "Peter"="R", "Tuesday"="T")#
							sL <- function(){paste(input$lakeid, collapse="")}#
							vname <- function(){input$variable}#
							wname <- function(){paste(input$window,"-day", sep="")}#
							paste("Chimp_", vname(), "_", sL(), "_", wname(), ".pdf", sep="")#
						}#
					},#end filename function#
					content <- function(file){#
						if(input$panelID==1){#
							pdf(file, width=5, height=3.5)#
							par(mar=c(4,4,0.5,0.5), ps=10, cex=1)#
							plotF(df=dailyData, respN=input$variable, lakes=input$lakeid)#
							mtext("DoY",side=1, line=2.5)#
							dev.off()#
						}else{#
							pdf(file, width=6, height=6)#
							par(mfrow=c(2,1), mar=c(3,4,0.5,0.5), oma=c(1,0,0,0), ps=10, cex=1)#
							plotF(df=sDat()[acI(),], respN=input$variable, lakes=input$lakeid)#
							plotF(df=sDat()[varI(),], respN=input$variable, lakes=input$lakeid)#
							mtext("DoY",side=1, line=2.5)#
							dev.off()			#
						}#
					},#end content function#
					contentType="image/pdf"#
				)#end downloadHandler#
			})#end shinyServer#
			')#
		writeLines(serverLines, serverConn)#
	}
writeServer()
shinyDir
dlScripts <- function(cVersion="_v0.3"){#
	#Identify and create LOCAL directories#
	userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	if(!file.exists(shinyDir)){#
		dir.create(shinyDir)#
	}#
	# ===============#
	# = writeServer =#
	# ===============#
	writeServer <- function(){#
		serverConn <- file(paste(shinyDir, "/server.R", sep=""))#
		serverLines <-#
			('#
			# Ryan Batt#
			# Server commands for Shiny Chimp app#
			# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
			#_v0.2 (18-Sept-2013): Built for R package chimpSqueal#
#
			library(shiny)#
#
			if(exists("dailyData") & exists("results")){#
				dailyData <- chimpSqueal:::dailyData#
				results <- chimpSqueal:::results#
				print("Found data sets locally")#
			}else{#
				print("Could not find data sets locally, \n downloading data and scripts from FTP")#
				dataLocations <- checkChimp()[[2]]#
				print(dataLocations)#
				load(dataLocations[1])#
				load(dataLocations[2])#
			}#
			print(ls())#
#
			plotF <- function(df, respN, lakes){	#
				lCols <- c("Paul"="blue", "Peter"="red", "Tuesday"="black")#
				nlakes <- length(lakes)#
				i1 <- is.element(df[,"Lake"], lakes)#
				Ylim <- range(df[i1,respN], na.rm=TRUE)#
				Xlim <- range(df[i1,"DoY"], na.rm=TRUE)#
#
				for(i in 1:nlakes){#
					tLake <- lakes[i]#
					iLake <- df[,"Lake"] == tLake#
					day <- df[iLake,"DoY"]#
					resp <- df[iLake,respN]#
#
					if(i==1){#
						plot(day, resp, col=lCols[tLake], type="l", ylim=Ylim, xlim=Xlim, xlab="", ylab="")#
						if(is.element("Stat",names(df))){#
							mtext(paste(respN, "\n", unique(df[,"Stat"])), side=2, line=2.25)#
						}else{#
							mtext(respN, side=2, line=2.5)#
						}#
#
					}else{#
						lines(day, resp, col=lCols[tLake])#
					}#end if-else#
				}#end loop#
			}#end function#
#
			getDat <- function(wOpt, dOpt){#
				rKey <- attr(results, "split_labels")#
				iRes <- which(rKey[,"RollWin"]==wOpt & dOpt==rKey[,"Detrend"])#
				return(results[[iRes]])#
			}#
#
			# Define server logic required to plot various variables against mpg#
			shinyServer(function(input, output) {	#
				sDat <- reactive({getDat(wOpt=input$window, dOpt=input$detrend)})#
				acI <- reactive({sDat()[,"Stat"]==input$acOpt})#
				varI <- reactive({sDat()[,"Stat"]==input$varOpt})#
#
				tsSave <- reactive({plotF(df=dailyData, respN=input$variable, lakes=input$lakeid)})#
				statSave <- reactive({#
					par(mfrow=c(2,1), mar=c(2,5,0.5,0.5))#
					plotF(df=sDat()[acI(),], respN=input$variable, lakes=input$lakeid)#
					plotF(df=sDat()[varI(),], respN=input$variable, lakes=input$lakeid)#
				})#
#
				output$tsPlot <- renderPlot({tsSave()})#
				output$statPlot <- renderPlot({statSave()})	#
#
				output$dFig <- downloadHandler(#
					filename <- function(){#
						if(input$panelID==1){#
							qn <- c("Paul"="L", "Peter"="R", "Tuesday"="T")#
							sL <- function(){paste(qn[unlist(input$lakeid)], collapse="")}#
							print(sL())#
							vname <- function(){input$variable}#
							paste("Chimp_", vname(), "_", sL(), ".pdf", sep="")#
						}else{#
							qn <- c("Paul"="L", "Peter"="R", "Tuesday"="T")#
							sL <- function(){paste(input$lakeid, collapse="")}#
							vname <- function(){input$variable}#
							wname <- function(){paste(input$window,"-day", sep="")}#
							paste("Chimp_", vname(), "_", sL(), "_", wname(), ".pdf", sep="")#
						}#
					},#end filename function#
					content <- function(file){#
						if(input$panelID==1){#
							pdf(file, width=5, height=3.5)#
							par(mar=c(4,4,0.5,0.5), ps=10, cex=1)#
							plotF(df=dailyData, respN=input$variable, lakes=input$lakeid)#
							mtext("DoY",side=1, line=2.5)#
							dev.off()#
						}else{#
							pdf(file, width=6, height=6)#
							par(mfrow=c(2,1), mar=c(3,4,0.5,0.5), oma=c(1,0,0,0), ps=10, cex=1)#
							plotF(df=sDat()[acI(),], respN=input$variable, lakes=input$lakeid)#
							plotF(df=sDat()[varI(),], respN=input$variable, lakes=input$lakeid)#
							mtext("DoY",side=1, line=2.5)#
							dev.off()			#
						}#
					},#end content function#
					contentType="image/pdf"#
				)#end downloadHandler#
			})#end shinyServer#
			')#
		writeLines(serverLines, serverConn)#
	}#
	# ===========#
	# = writeUI =#
	# ===========#
	writeUI <- function(){#
		uiConn <- file(paste(shinyDir, "/ui.R", sep=""))#
		uiLines <-#
			('#
			# Ryan Batt#
			# UI for Shiny Chimp app#
			# Versions for the following scripts increment in unison: Squeal2_ReadDailyData_vx.x.R, Squeal2_Statistics_vx.x.R, Run_Shiny_SoS_v0.1.R; The names of ui.R and server.R are inflexible, so new version of this script (project) are saved in new subfolders. Because of this style, increases in the version number for a file do not necessarily indicate that changes have been made to the file, merely that at least one file in the project has been substantially changed.#
			#_v0.2 (18-Sept-2013): Built for R package chimpSqueal#
#
			library(shiny)#
#
			# Define UI for miles per gallon application#
			shinyUI(pageWithSidebar(#
#
			  # Application title#
			  headerPanel("Shiny Chimp Graphs (v0.3)"),#
#
			  sidebarPanel(#
				strong(em("Select Data")),#
				#First option: pick the variable#
				selectInput("variable", "Variable", list(#
					"GPP (uM/d, bookkeeping)"="GPP", "GPP (uM/d, linear model)"="GPP_LM", "R (uM/d, bookkeeping)"="R", "R (uM/d, linear model)"="R_LM", "NEP (uM/d, bookkeeping)"="NEP", "NEP (uM/d, linear model)"="NEP_LM",#
					"Dissolved Oxygen (%, YSI)"="DOsat_YSI", "Dissolved Oxygen (%, Hylb)"="DOsat_HYLB", "Dissolved Oxygen (mg/L, YSI)"="DO_Conc_YSI", "Dissolved Oxygen (mg/L, Hylb)"="DO_Conc_HYLB",#
					"pH (YSI)"="pH_YSI", "pH (Hylb)"="pH_HYLB",#
					"Manual Chlorophyll (ug/L)"="ManChl", "Chlorophyll (ug/L, YSI)"="Chla_Conc_YSI", "Chlorophyll (ug/L, Hylb)"="Chla_Conc_HYLB", "Chlorophyll (RFU, YSI)"="Chla_RFU_YSI",#
					"Phycocyanin (mg/L)"="Phyco", "Blue-green algae (cells/mL, YSI)"="BGA_Conc_YSI", "Blue-green algae (cells/mL, Hylb)"="BGA_Conc_HYLB", "Blue-greeen algae (RFU, YSI)"="BGA_RFU_YSI",#
					"Staff (units vary)"="Staff", "Cell Counts"="cells" # ,"Secchi (m)"="Secchi"#
					)),#
#
				#second option: pick the lake/s#
				checkboxGroupInput("lakeid", "Lake", list("Paul"="Paul", "Peter"="Peter", "Tuesday"="Tuesday"), selected="Peter"),#
#
				#options for second panel only#
				conditionalPanel(#
					condition="input.panelID == 2",#
					br(),#
					strong(em("Statistics Options")),#
					sliderInput(inputId="window", label="Size of rolling window (days):", min=7, max=49, value=28, step=7),#
					radioButtons("detrend", "Detrend before computing autocorrelation?", list("Yes"="yes", "No"="no")),#
					radioButtons("acOpt", "Autocorrelation Form:", list("Simple AR(1)"="Ar1", "Autocorrelation Time"="AcTime")),#
					radioButtons("varOpt", "Variance Form:", list("Simple Variance"="Var", "Standard Deviation"="SD", "Coefficient of Variation"="CV"))#
					)#
#
				), #end sidebarPanel#
			  mainPanel(#
				tabsetPanel(#
					tabPanel("Time Series", plotOutput("tsPlot"), value=1),#
					tabPanel("Statistics", plotOutput("statPlot"), value=2),#
					id="panelID",#
					selected=1#
					),#
				downloadButton("dFig", "Save Figure")#
#
				)#
			))#
			')#
		writeLines(uiLines, uiConn)#
	}#
	# #Identify and create LOCAL directories#
	# userDir <- paste("/Users/", Sys.info()["user"], sep="")#
	# shinyDir <- paste(userDir, "/Desktop/.tmpChimp", sep="")#
	# if(!file.exists(shinyDir)){#
	# 	dir.create(shinyDir)#
	# }#
	# #
	# #Identify server directories#
	# baseURL <- paste("ftp://162.144.12.28/squeal2Chimps/", "chimp", cVersion, "/", sep="")#
	# uiURL <- paste(baseURL, "ui.R", sep="")#
	# serverURL <- paste(baseURL, "server.R", sep="")#
	# cascUsePass <- "cascade@bookofluke.org:tjolahop"#
	# #
	# #check for package#
	# stopifnot(require("RCurl"))#
	# #
	# #download UI#
	# print("Downloading Chimp UI")#
	# flush.console()#
	# ui <- getURL(uiURL, userpwd=cascUsePass, connecttimeout=120)#
	# uiConn <- file(paste(shinyDir, "/ui.R", sep=""))#
	# writeLines(ui, con=uiConn)#
	# close(uiConn)#
	# #
	# #download server#
	# print("Downloading Chimp Server")#
	# flush.console()#
	# server <- getURL(serverURL, userpwd=cascUsePass, connecttimeout=120)#
	# serverConn <- file(paste(shinyDir, "/server.R", sep=""))#
	# writeLines(server, con=serverConn)#
	# close(serverConn)#
	writeServer()#
	writeUI()#
}
clse()
close()
?close
dlScripts()
library()
dir(system.file("data", package="chimpSqueal"))
system.file("data", package="chimpSqueal")
?system
42.5*1.3333
443*3
443*4
Script for simulating the Contaminant Cycling problem#
# Process Error version fitted by both#
#   Least Squares and Maximum Likelihood for the same data#
# To run, type source("Contaminant_LS_ML.R")#
# To clear all variables, type rm(list = ls())#
# SRC, updated 26 Jan 2010#
#
rm(list = ls())#
graphics.off()#
#
# Define rates#
r = c(15, 0.2, 0.45, 0.25, 0.35, 0.2, 0.15)#
#
# Organize rates into terms of difference equation#
#  x_t+1 = F + R*x_t #
#
F = c(r[1], 0, 0)#
Rterms = c(1-(r[2]+r[3]+r[4]), 0, 0, r[3], 1-(r[5]+r[6]), 0, r[4], r[5], 1-r[7])#
R = matrix(Rterms,nrow=3,ncol=3,byrow=TRUE)#
#
# Define process error distribution#
PEmean=c(0,0,0)#
PEsd=c(0.3,0.3,3)#
#
# Initial conditions#
hvore = 1#
bug = 1#
bird = 6#
x0=c(hvore,bug,bird)#
#
# Simulate#
time=0#
for (i in 1:39)#
{#
x1 = F + R%*%x0 + rnorm(3,mean=PEmean,sd=PEsd)#
x0 = x1 #
hvore=c(hvore,x1[1])#
bug=c(bug,x1[2])#
bird=c(bird,x1[3])#
time=c(time,i)#
}#
#
# Plot results#
dev.new()#
plot(time,bird,xlim=c(0,40),ylim=c(0,80),ylab="Contaminant Mass",#
  xlab="time",type='l',col='blue',lwd=3,lty=3,cex.axis=1.5,col.axis='darkblue',#
  cex.lab=1.5,col.lab='darkblue')#
points(time,bug,type='l',col='brown',lwd=2)#
points(time,hvore,type='l',col='darkgreen',lwd=2,lty=2)#
grid()#
legend('topleft',legend=c('Bird','Pred. Bug','H-vore'),#
 lty=c(3,1,2),lwd=c(3,2,2),col=c('blue','brown','darkgreen'),cex=1.2,#
 title='Model Compartments',text.col='darkblue')#
#
# Estimate parameters by Least Squares process error fit#
#
# Define function for sum of squared errors#
SSE <- function(p){#
F1 = c(p[1], 0, 0)#
Rterms1 = c(1-(p[2]+p[3]+p[4]), 0, 0, p[3], 1-(p[5]+p[6]), 0, p[4], p[5], 1-p[7])#
R1 = matrix(Rterms1,nrow=3,ncol=3,byrow=TRUE)#
err=0#
for (i in 1:39)#
{#
x0 = c(hvore[i],bug[i],bird[i])#
y = c(hvore[i+1],bug[i+1],bird[i+1])#
yhat = F1 + R1%*%x0#
err = c(err,(y-yhat))#
}#
sumerr2 = sum(err*err)#
return(sumerr2)#
}#
#
# Check error with true parameters#
SSEtrue <- SSE(r)#
#
# Form initial guesses of parameters#
guess = r*rnorm(7,mean=1,sd=0.5)#
# Error with guess#
SSEguess <- SSE(guess)#
#
# Nonlinear Model Fit; try 'nlm' or 'optim'#
ModFit <- nlm(SSE, p=guess, print.level=0)#
rest <- ModFit$estimate#
minSSE <- ModFit$minimum#
#
# Print output#
print("Least-Squares Process Error Fit",quote=FALSE)#
print(c("SSE with True parameters",round(SSEtrue,3)),quote=FALSE)#
print(c("SSE with Guessed parameters",round(SSEguess,3)),quote=FALSE)#
print(c("Minimum SSE",round(minSSE,3)),quote=FALSE)#
print("True Parameters",quote=FALSE)#
print(r)#
print("Estimated Parameters",quote=FALSE)#
print(round(rest,2))#
print('True Parameters - Estimated Parameters / True Parameters',quote=FALSE)#
print(round((r-rest)/r,2))#
#
# Calculate predictions#
p <- rest  # Substitute estimated parameters into p#
Fp = c(p[1], 0, 0)#
Rtermsp = c(1-(p[2]+p[3]+p[4]), 0, 0, p[3], 1-(p[5]+p[6]), 0, p[4], p[5], 1-p[7])#
Rp = matrix(Rtermsp,nrow=3,ncol=3,byrow=TRUE)#
yhat1=hvore[1]#
yhat2=bug[1]#
yhat3=bird[1]#
for (i in 1:39)#
{#
x0 = c(hvore[i],bug[i],bird[i])#
x1 = Fp + Rp%*%x0#
yhat1 = c(yhat1,x1[1])#
yhat2 = c(yhat2,x1[2])#
yhat3 = c(yhat3,x1[3])#
}#
#
# Plot predictions and observations#
dev.new()#
plot(yhat3,bird,xlim=c(0,80),ylim=c(0,80),ylab=" ",xlab=" ",type='p',#
  pch=24,col='blue',bg='blue',cex=1.5,cex.axis=1.5)#
title(main="Predictions & Observations, Least Squares Fit",#
 ylab="Observation",xlab="Prediction - Least Squares",cex.lab=1.5,#
 col.lab='darkblue',cex.main=1)#
points(yhat2,bug,type='p',pch=25,col='brown',bg='brown',cex=1.5)#
points(yhat1,hvore,type='p',pch=21,col='darkgreen',bg='darkgreen',cex=2)#
points(c(0,80),c(0,80),type='l',col='red',lwd=2,lty=3)#
grid()#
legend('bottomright',legend=c('Bird','Pred. Bug','H-vore'),#
 pch=c(24,25,21),pt.cex=c(1.5,1.5,1.5),col=c('blue','brown','darkgreen'),#
 pt.bg=c('blue','brown','darkgreen'),cex=1.2,#
 title='Model Compartments',text.col='darkblue')#
#
# Estimate parameters by process error fit to#
#  minimize negative log likelihood#
#
# Define function for negative log likelihood#
NLL <- function(p){#
F1 = c(p[1], 0, 0)#
Rterms1 = c(1-(p[2]+p[3]+p[4]), 0, 0, p[3], 1-(p[5]+p[6]), 0, p[4], p[5], 1-p[7])#
R1 = matrix(Rterms1,nrow=3,ncol=3,byrow=TRUE)#
VarHvore=exp(p[8])#
VarBug=exp(p[9])#
VarBird=exp(p[10])#
errHvore=0#
errBug=0#
errBird=0#
for (i in 1:39)#
{#
x0 = c(hvore[i],bug[i],bird[i])#
y = c(hvore[i+1],bug[i+1],bird[i+1])#
yhat = F1 + R1%*%x0#
errHvore[i] = y[1]-yhat[1]#
errBug[i] = y[2]-yhat[2]#
errBird[i]= y[3]-yhat[3]#
}#
termHvore=(0.5*length(errHvore)*log(2*pi*VarHvore)) + ((t(errHvore)%*%errHvore)/(2*VarHvore))#
termBug=(0.5*length(errBug)*log(2*pi*VarBug)) + ((t(errBug)%*%errBug)/(2*VarBug))#
termBird=(0.5*length(errBird)*log(2*pi*VarBird)) + ((t(errBird)%*%errBird)/(2*VarBird))#
sumterms=termHvore+termBug+termBird#
return(sumterms)#
}#
#
# Check error with true parameters#
TruePar = c(r,log(PEsd*PEsd))#
SSEtrue <- NLL(TruePar)#
#
# Form initial guesses of parameters#
guess = TruePar*rnorm(10,mean=1,sd=0.5)#
# Error with guess#
SSEguess <- NLL(guess)#
#
# Nonlinear Model Fit; try 'nlm' or 'optim'#
ModFit <- nlm(NLL, p=guess, print.level=0, iterlim=150)#
rest <- ModFit$estimate#
minSSE <- ModFit$minimum#
convergence <- ModFit$code#
#
# Print output#
print(" ",quote=FALSE)#
print("Maximum Likelihood Process Error Fit",quote=FALSE)#
print(c("NLL with True parameters",SSEtrue),quote=FALSE)#
print(c("NLL with Guessed parameters",SSEguess),quote=FALSE)#
print(c("Minimum NLL",minSSE),quote=FALSE)#
print(c('Convergence code (1 or 2 are OK): ',convergence),quote=FALSE)#
print("True Parameters",quote=FALSE)#
print(r[1:7])#
print("Estimated Parameters",quote=FALSE)#
print(round(rest[1:7],2))#
print('True Parameters - Estimated Parameters / True Parameters',quote=FALSE)#
print(round((r[1:7]-rest[1:7])/r[1:7],2))#
print("True Process Variances",quote=FALSE)#
print(PEsd*PEsd)#
print("Estimated Process Variances",quote=FALSE)#
print(round(exp(rest[8:10]),2))#
#
# Calculate predictions#
p <- rest  # Substitute estimated parameters into p#
Fp = c(p[1], 0, 0)#
Rtermsp = c(1-(p[2]+p[3]+p[4]), 0, 0, p[3], 1-(p[5]+p[6]), 0, p[4], p[5], 1-p[7])#
Rp = matrix(Rtermsp,nrow=3,ncol=3,byrow=TRUE)#
yhat1=hvore[1]#
yhat2=bug[1]#
yhat3=bird[1]#
for (i in 1:39)#
{#
x0 = c(hvore[i],bug[i],bird[i])#
x1 = Fp + Rp%*%x0#
yhat1 = c(yhat1,x1[1])#
yhat2 = c(yhat2,x1[2])#
yhat3 = c(yhat3,x1[3])#
}#
#
# Plot predictions and observations#
quartz()#
plot(yhat3,bird,xlim=c(0,80),ylim=c(0,80),ylab=" ",xlab=" ",type='p',#
  pch=24,col='blue',bg='blue',cex=1.5,cex.axis=1.5)#
title(main="Predictions & Observations, Maximum Likelihood Fit",#
 ylab="Observation",xlab="Prediction - Maximum Likelihood",cex.lab=1.5,#
 col.lab='darkblue',cex.main=1)#
points(yhat2,bug,type='p',pch=25,col='brown',bg='brown',cex=1.5)#
points(yhat1,hvore,type='p',pch=21,col='darkgreen',bg='darkgreen',cex=2)#
points(c(0,80),c(0,80),type='l',col='red',lwd=2,lty=3)#
grid()#
legend('bottomright',legend=c('Bird','Pred. Bug','H-vore'),#
 pch=c(24,25,21),pt.cex=c(1.5,1.5,1.5),col=c('blue','brown','darkgreen'),#
 pt.bg=c('blue','brown','darkgreen'),cex=1.2,#
 title='Model Compartments',text.col='darkblue')
SSEtrue
rest
TruePar
r
plot 1:10
plot1:10
plot(1:10)
library("rjags")
library("r2jags")
install.packages("rjags")
library("rjags")
http://blue.for.msu.edu/NEON/SC/exercises/exercise-jags-1/ex-1.pdf#
#
set.seed(1)#
n <- 100#
beta.0 <- 0#
sigma.sq <- 5#
y <- rnorm(n, beta.0, sqrt(sigma.sq))#
#
ModelString <- "#
	model{#
		for (i in 1:n){#
			y[i] ~dnorm(beta.0, tau.sq)#
		}#
		beta.0 ~ dnorm(0, 0.0001)#
		tau.sq <- 1/sigma.sq#
		sigma.sq ~ dunif(0, 100)#
	}#
"#
#
data <- list(y=y, n=n)#
inits <- list(beta.0=0, sigma.sq=1)#
jags.m <- jags.model(file=textConnection(ModelString), data=data, inits=inits, n.chains=3, n.adapt=100)
params <- c("beta.0", "sigma.sq")#
samps <- coda.samples(jags.m, params, n.iter=2000)#
plot(samps)#
burn.in <- 1000#
summary(window(samps, start = burn.in))
?jags.model
library("chimpSqueal")
runChimp()
Save <- c(TRUE, FALSE)[1]
rm(list=ls())#
graphics.off()#
setwd("/Users/battrd/Documents/School&Work/WiscResearch/Isotopes_2012Analysis")#
load("Cons_Mixture_Ward2010&2012_v0.4.7.RData")#
FigureFolder <- paste("Figures/Figures_", "v0.4.7", sep="")#
SaveType <- c(".pdf", ".png", ".eps")[2]#
library("plyr")#
#
# Save <- c(TRUE, FALSE)[1]#
# SaveType <- c(".pdf", ".png")[2]#
#
# ===============#
# = New _v0.4.5 =#
# ===============#
setwd(paste("/Users/battrd/Documents/School&Work/WiscResearch/Isotopes_2012Analysis/",FigureFolder,sep=""))#
#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("dTerrAlgae_", Version, sep=""), ".pdf", sep=""), height=3, width=3.23)}#
	if(SaveType==".png"){png(file=paste(paste("dTerrAlgae_", Version, sep=""), ".png", sep=""), units="in", res=300, height=3, width=3.23)}#
	if(SaveType==".eps"){setEPS(); postscript(file=paste(paste("dTerrAlgae_", Version, sep=""), ".eps", sep=""), height=3, width=3.23, pointsize=10)}#
}else{#
	dev.new(height=4, width=3, pointsize=10, family="Times")#
}#
par(mfrow=c(1,1), mar=c(2.1,2,0.1,0.1), oma=c(0,0,0,0), ps=9, cex=1, mgp=c(3,0.3,0), tcl=-0.25, family="serif")#
#
aYlim <- c(min(Chosen25th[,"Algae"], na.rm=TRUE), max(Chosen75th[,"Algae"], na.rm=TRUE))*c(1.15,1.05)#
tYlim <- c(min(Chosen25th[,"All.Terrestrial"], na.rm=TRUE), max(Chosen75th[,"All.Terrestrial"], na.rm=TRUE))#
#
plot(ChosenMedDiffs[,"Algae"], ChosenMedDiffs[,"All.Terrestrial"], xlim=aYlim, xlab="", xaxt="s", ylab="", ylim=tYlim, pch=NA)#
abline(h=0, lty="dashed", col="gray")#
abline(v=0, lty="dashed", col="gray")#
#
arrows(x0=Chosen25th[,"Algae"], y0=ChosenMedDiffs[,"All.Terrestrial"], x1=Chosen75th[,"Algae"], y1=ChosenMedDiffs[,"All.Terrestrial"], angle=90, code=0, length=0.05, col="gray")#
arrows(x0=ChosenMedDiffs[,"Algae"], y0=Chosen25th[,"All.Terrestrial"], x1=ChosenMedDiffs[,"Algae"], y1=Chosen75th[,"All.Terrestrial"], angle=90, code=0, length=0.05, col="gray")#
#
points(ChosenMedDiffs[,"Algae"], ChosenMedDiffs[,"All.Terrestrial"], pch=20)#
#
ConsNames <- c("U. limi", "S. oregonensis", "Phoxinus spp.", "A. melas", "P. promelas", "Chaoborus spp.", "H. trivolvis")#
text(x=ChosenMedDiffs[,"Algae"][-c(2,6)], y=ChosenMedDiffs[,"All.Terrestrial"][-c(2,6)], labels=ConsNames[-c(2,6)], srt=0, xpd=NA,adj=c(1.05,-0.1), cex=1, font=3, ps=9)#
text(x=ChosenMedDiffs[,"Algae"][c(2,6)], y=ChosenMedDiffs[,"All.Terrestrial"][c(2,6)], labels=ConsNames[c(2,6)], srt=0, xpd=NA,adj=c(-0.01,-0.2), cex=1, font=3, ps=9)#
mtext("Change in terrestrial use", side=2, line=1.1, cex=1)#
mtext("Change in algal use", side=1, line=1.1, cex=1)#
if(Save){dev.off()}#
#
# ===================#
# = END new _v0.4.5 =#
# ===================#
# ===============#
# = New _v0.4.7 =#
# ===============#
cI10 <- ResourceUse[,"Consumer"]=="Chaoborus" & ResourceUse[,"Year"]==2010 #index of 2010 chaob posterior#
cI12 <- ResourceUse[,"Consumer"]=="Chaoborus" & ResourceUse[,"Year"]==2012 #index of 2012 chaob posterior#
fN <- rev(c("FHM", "DAC", "CMM", "BHD1")) #fish names#
# fC <- tim.colors(n=18, alpha=1)[4*c(0.75,2.5,3.25,4)]#
fC <- rep("black",4)#
#
# dev.new(width=3.5, height=5)#
setwd(paste("/Users/battrd/Documents/School&Work/WiscResearch/Isotopes_2012Analysis/",FigureFolder,sep=""))#
if(Save){#
	if(SaveType==".pdf"){pdf(paste("deltaFishChaob_", Version, ".pdf", sep=""), width=3.23, height=4.5)}#
	if(SaveType==".png"){png(paste("deltaFishChaob_", Version, ".png", sep=""), width=3.23, height=4.5, units="in", res=500)}#
}#
#
par(mfrow=c(1,1), mar=c(2.5,2.3,0,0), oma=c(0,0,0,0), ps=9, las=1, tcl=-0.25, mgp=c(3,0.35,0), yaxp=c(0,20,10), family="Times", cex=1)#
r <- c("All.Phytoplankton", "All.Terrestrial")[1]#
pC10 <- ResourceUse[cI10,r] #phytoplankton for chaoborus in 2010#
pC12 <- ResourceUse[cI12,r] #phytoplankton for chaoborus in 2012#
# plot(density(pC10), xlim=c(0,1), ylim=c(0,7), zero.line=FALSE, main="")#
for(f in 1:length(fN)){#
	vertOff <- 5*(f-1)#
	#2010 distribution of differences#
	fI10 <- ResourceUse[,"Consumer"]==fN[f] & ResourceUse[,"Year"]==2010#
	pF10 <- ResourceUse[fI10,r]#
	d10 <- density(pF10-pC10)#
	dx10 <- d10$x#
	dy10 <- d10$y + vertOff#
#
	#2012 distribution of differences#
	fI12 <- ResourceUse[,"Consumer"]==fN[f] & ResourceUse[,"Year"]==2012#
	pF12 <- ResourceUse[fI12,r]#
	d12 <- density(pF12-pC12)#
	dx12 <- d12$x#
	dy12 <- d12$y + vertOff#
#
	h <- max(c(dy10, dy12))+0.25#
#
	#graph 2010#
	if(f==1){#
		plot(dx10,dy10, col=fC[f],xlim=c(-1,0.5), ylim=c(0,20), pch=NA, yaxt="n")#
		# axis(side=2, at=seq(0,20, 0.75), labels=FALSE, tcl=0.1)#
		tksAt <- c(0,1,2,3)#
		nt <- length(tksAt)#
		ats <- rep((5*((1:4)-1)), each=nt) + rep(tksAt, 4)#
		labs <- ats - rep((5*((1:4)-1)), each=nt)#
		axis(side=2, at=ats, labels=labs, tcl=-0.25, mgp=c(3,0.5,0))#
		abline(h=0, col="darkgray", lty="dashed")#
		segments(x0=0, x1=0, y0=vertOff, y1=(h), lty="dashed", col="darkgray")#
		lines(dx10,dy10, col=fC[f], type="l")#
	}else{#
		lines(dx10,dy10, col=fC[f])#
		abline(h=vertOff, col="darkgray", lty="dashed")#
		segments(x0=0, x1=0, y0=vertOff, y1=(h), lty="dashed", col="darkgray")#
	}#
#
	#2012 graph#
	lines(dx12,dy12, col=fC[f], lwd=3)#
#
	#means of distributions of differences, and arrows showing change between years#
	mu10 <- mean(pF10-pC10)#
	mu12 <- mean(pF12-pC12)#
	arrows(x0=mu10, y0=h, x1=mu12,y1=h, length=0.075, col=fC[f], lwd=2)#
	text(x=-1.1, y=h, labels=rev(c("P. promelas", "Phoxinus", "U. limi", "A. melas"))[f], font=3, col=fC[f], pos=4)#
}#
mtext(quote(Fish~phi1[Phyto]-Chaob.~phi1[Phyto]), side=1, line=1.5, outer=FALSE, cex=1)#
mtext("Posterior Density", side=2, line=1.35, cex=1, las=0)#
legend("topright", bty="n", legend=c("2010","2012"), lwd=c(1,2), inset=c(0,-0.025))#
dev.off()#
#
# ===================#
# = END New _v0.4.7 =#
# ===================#
NeatConsNames <- c("Calanoid"="S. oregonensis", "Mesocyclops"="Mesocyclops", "Chaoborus"="Chaoborus spp.", "Helisoma trivolvis"="H. trivolvis", "FHM"="P. promelas", "DAC"="Phoxinus spp.", "BHD1"="A. melas", "BHD2"="A. melas", "CMM"= "U. limi", "PKS"="L. gibbosus", "YWP"="P. flavescens")#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("NeatSummary_", Version, sep=""), ".pdf", sep=""), height=7, width=6.81)}#
	if(SaveType==".png"){png(file=paste(paste("NeatSummary_", Version, sep=""), ".png", sep=""), units="in", res=200, height=7, width=6.81)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("NeatSummary_", Version, sep=""), ".eps", sep=""), height=7, width=6.81)}#
}else{#
	dev.new(height=7, width=6.811)#
}#
layout(matrix(c(1,2,3,4,4,6,5,5,7), ncol=3, byrow=TRUE), widths=c(2.4/7, 2/7, 2.6/7, 2/7, 2/7, 3/7, 2/7, 2/7, 3/7))#
# par(mar=c(2.5,0.5,1,0.5), oma=c(0,2,0,0)), cex=1)#
for(i in 1:length(Cons)){#
	Yaxt <- ifelse(is.element(i, c(1,4,5)), "s", "n")#
	LegPos <- ifelse(is.element(i, c(1,2,4,5)), "topleft", "topright")#
	if(Yaxt=="s"){#
		par(mar=c(2.5,3,0,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
	}else{#
		par(mar=c(2.5,1,0,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
	}#
	# LegPos <- c("topleft", "topleft", "topright", "topright", "topleft", "topright", "topright")[i]#
	NamesThisUse <- make.names(ConsChoices[[Cons[i]]][[GroupChoose]])#
	AllNamesThisuse <- c("Year", "Month", "Consumer", "Grouping", NamesThisUse)#
	ThisRU0 <- droplevels(subset(ResourceUse, Consumer==Cons[i] & Grouping==GroupChoose & Month=="Pooled"))[AllNamesThisuse] #try to subset only the sources that were part of the analysis for this consumer#
	ThisRU00 <- reshape(ThisRU0, varying=list(c(NamesThisUse)), times=ConsChoices[[Cons[i]]][[GroupChoose]], ids=1:nrow(ThisRU0), timevar="Source", v.names="Proportion", direction="long")#
#
	ThisRU <- ThisRU00[,c("Year", "Month", "Consumer", "Grouping", "Source", "Proportion")]#
	row.names(ThisRU) <- NULL#
	ResourceNames <- ConsChoicesShort[ConsChoices[[Cons[i]]][[GroupChoose]]]#
	ThisRU[,"Source"] <- factor(ThisRU[,"Source"], levels=ConsChoices[[Cons[i]]][[GroupChoose]], ordered=TRUE)#
	# aggregate(ThisRU[,"Proportion"], by=list("Year"=ThisRU[,1], "Source"=ThisRU[,"Source"]), FUN=median)#
	ThisAt_Axis <- c(0.5,3.5,6.5,9.5)[1:length(ResourceNames)]#
	# boxplot(Proportion~Year+Source, data=ThisRU, col=c("#FA807225","#3A5FCD25"), border=c("red","blue"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.5, yaxt=Yaxt)#
	boxplot(Proportion~Year+Source, data=ThisRU, border=c("black","black"), col=c(NA, "lightgray"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.25, yaxt=Yaxt)#
	axis(side=1, at=ThisAt_Axis, labels=ResourceNames)#
	if(Yaxt=="n"){axis(side=2, labels=FALSE)}#
	# mtext(ConsNameMedium[Cons[i]], side=2, line=2)#
	# legend(LegPos, NeatConsNames[Cons[i]])#
	X <- c("topleft"=-0.9, "topright"=ThisAt_Axis[length(ResourceNames)]+1)#
	Pos <- c("topleft"=4, "topright"=2)#
	text(x=X[LegPos], y=0.95, labels=NeatConsNames[Cons[i]], pos=Pos[LegPos], font=3)#
	if(i==length(Cons)){#
		mtext("Proportion of Diet", side=2, line=-1, outer=TRUE, cex=1)#
	}#
}#
if(Save){dev.off()}#
# ===============#
# = ZOOPLANKTON =#
# ===============#
zData0 <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/Data/PaulWard_Weekly_2010&2012/Paul&WardZoopMass2010&2012.csv")#
cData0 <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/Data/PaulWard_Weekly_2010&2012/Paul&WardChaobMass2010&2012.csv")#
zData <- reshape(zData0, varying=list(names(zData0[,4:17])), times=names(zData0[,4:17]), ids=1:nrow(zData0), timevar="Taxon", v.names="Mass", direction="long")[,c("Lake","Year","DoY","Taxon","Mass")]#
row.names(zData) <- NULL#
zData <- subset(zData, DoY>=143)#
#
zData[,"Year"] <- as.factor(zData[,"Year"])#
#
cData <- reshape(cData0, varying=list(names(cData0[,4:7])), times=names(cData0[,4:7]), ids=1:nrow(cData0), timevar="Taxon", v.names="Mass", direction="long")[,c("Lake","Year","DoY","Taxon","Mass")]#
row.names(cData) <- NULL#
cData <- subset(cData, DoY>=143)#
cData[,"Year"] <- as.factor(cData[,"Year"])#
#
sumzData <- aggregate(zData[,"Mass"], by=list(zData[,"Lake"], zData[,"Year"], zData[,"DoY"]), sum)#
names(sumzData) <- c("Lake", "Year", "DoY", "Mass")#
zYearMean <- aggregate(sumzData[,"Mass"], by=list(sumzData[,"Lake"], sumzData[,"Year"]), mean)#
names(zYearMean) <- c("Lake", "Year", "Mass")#
sumcData <- aggregate(cData[,"Mass"], by=list(cData[,"Lake"], cData[,"Year"], cData[,"DoY"]), sum)#
names(sumcData) <- c("Lake", "Year", "DoY", "Mass")#
cYearMean <- aggregate(sumcData[,"Mass"], by=list(sumcData[,"Lake"], sumcData[,"Year"]), mean)#
names(cYearMean) <- c("Lake", "Year", "Mass")#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("ZoopChaob_PaulWard_2010&2012_", Version, sep=""), ".pdf", sep=""), height=4.75, width=3.23)}#
	if(SaveType==".png"){png(file=paste(paste("ZoopChaob_PaulWard_2010&2012_", Version, sep=""), ".png", sep=""), units="in", res=200, height=4.75, width=3.23)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("ZoopChaob_PaulWard_2010&2012_", Version, sep=""), ".eps", sep=""), height=4.75, width=3.23)}#
}else{#
	dev.new(height=4.75, width=3.23)#
}#
par(mfrow=c(2,1), mar=c(1,2.5,0,0), oma=c(0.3, 0, 0.2, 0.2), cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
boxplot(Mass~Year+Lake, data=sumzData, at=c(0.5,1.5, 3.5, 4.5), col=c(NA,"lightgray"), show.names=FALSE, outline=FALSE, lwd=1.25)#
axis(side=1, at=c(1,4), labels=FALSE)#
mtext(quote(Zooplankton~(g/m^2)), side=2, line=1.5, cex=1)#
#
boxplot(Mass~Year+Lake, data=sumcData, at=c(0.5,1.5, 3.5, 4.5), col=c(NA,"lightgray"), show.names=FALSE, outline=FALSE, lwd=1.25)#
axis(side=1, at=c(1,4), labels=c("Paul", "Ward"))#
mtext(quote(italic(Chaoborus)~spp.~(g/m^2)), side=2, line=1.5, cex=1)#
dev.off()#
# ============#
# = ROUTINES =#
# ============#
#Taken from L&W_Routine_2010&2012_v3.r and then revised#
Data0 <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/Data/PaulWard_Weekly_2010&2012/PaulWard_Weekly_2010&2012.csv")#
POC0 <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/Data/PaulWard_Weekly_2010&2012/POC_PaulWard2010&2012.csv")#
ChlaP0 <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/Data/PaulWard_Weekly_2010&2012/PaulWard_ChlaProfile_2010&2012.csv")#
ChlaP0 <- subset(ChlaP0, Zid!="Meta")#
areal <- function(x){#
	mean(x[,"Chla"])*max(x[,"Z"])#
}#
aChl0 <- ddply(ChlaP0, .variables=c("Lake", "Year", "Date"), .fun=areal)#
names(aChl0) <- c("Lake", "Year", "Date", "aChla")#
#
VarAnalyze <- c("Color","Temp","Zmix","Secchi","Light","DOC","DIC", "pH", "TN", "TP","Chla","POC","PON","C:Chl", "pCO2_water", "DO_Conc")#
PlotNames <- c("L 10", "L 12", "W 10", "W 12")#
PML_Data0 <- subset(Data0, Layer=="PML")[,]#
PML_Data <- merge(PML_Data0, POC0, all.x=TRUE)#
PML_Data[,"C:Chl"] <- PML_Data[,"POC"]/(PML_Data[,"Chla"]/1000)#
#
VarAnalyze <- c("Color", "Chla", "POC","PON","C:Chl", "Temp", "DOC", "DIC", "DO_Conc")#
Meta_Data0 <- subset(Data0, Layer=="Meta")[,]#
Meta_Data <- merge(Meta_Data0, POC0, all.x=TRUE)#
Meta_Data[,"C:Chl"] <- Meta_Data[,"POC"]/(Meta_Data[,"Chla"]/1000)#
#
VarAnalyze <- c("Color", "Chla", "Temp", "DOC", "DIC", "DO_Conc")#
Hypo_Data <- subset(Data0, Layer=="Hypo")[,]#
#
VarAnalyze <- c("Color","Temp","Zmix","Secchi","Light","DOC","DIC", "pH", "TN", "TP","Chla","POC","PON","C:Chl", "pCO2_water", "DO_Conc")#
#
# =============================================#
# = 4-panel, areal chlorophyll, pCO2, DO, NEP =#
# =============================================#
#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("LimnoMetab_PaulWard_2010&2012_", Version, sep=""), ".pdf", sep=""), height=7, width=3.23)}#
	if(SaveType==".png"){png(file=paste(paste("LimnoMetab_PaulWard_2010&2012_", Version, sep=""), ".png", sep=""), units="in", res=200, height=7, width=3.23)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("LimnoMetab_PaulWard_2010&2012_", Version, sep=""), ".eps", sep=""), height=7, width=3.23)}#
}else{#
	dev.new(height=7, width=3.23)#
}#
par(mfrow=c(4,1), mar=c(1,2.5,0,0), oma=c(0.2, 0, 0.2, 0.2), cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
#
#Chlorophyll#
boxplot(aChla~Year+Lake, data=aChl0, at=c(0.5,1.5, 3.5, 4.5), col=c(NA,"lightgray"), show.names=FALSE, outline=FALSE, lwd=1.25)#
axis(side=1, at=c(1,4), labels=FALSE)#
mtext(quote(Chlorophyll~(mg/m^2)), side=2, line=1.5, cex=1)#
#
#pCO2#
ppCO2 <- subset(Data0, Layer=="PML", select=c("Lake","Year","pCO2_water"))#
boxplot(pCO2_water~Year+Lake, data=ppCO2, at=c(0.5,1.5, 3.5, 4.5), col=c(NA,"lightgray"), show.names=FALSE, outline=FALSE, lwd=1.25)#
axis(side=1, at=c(1,4), labels=FALSE)#
mtext(quote(italic(p)*CO[2]~(mu*atm)), side=2, line=1.5, cex=1)#
#
#DO#
load(file="/Users/Battrd/Documents/School&Work/WiscResearch/Data/PaulWard_2010&2012_Metabolism_v0.2.RData")#
boxplot(MeanDO~Year+Lake, data=AllDO, at=c(0.5,1.5, 3.5, 4.5), col=c(NA,"lightgray"), show.names=FALSE, outline=FALSE, lwd=1.25)#
axis(side=1, at=c(1,4), labels=FALSE)#
mtext(quote(DO~("%"*saturation)), side=2, line=1.5, cex=1)#
#
#NEP#
pWardPaul_Metabolism <- subset(WardPaul_Metabolism, DoY>=143)#
pWardPaul_Metabolism[,"Lake"] <- relevel(pWardPaul_Metabolism[,"Lake"], ref="Paul")#
boxplot(NEP~Year+Lake, data=pWardPaul_Metabolism, at=c(0.5,1.5, 3.5, 4.5), col=c(NA,"lightgray"), show.names=FALSE, outline=FALSE, lwd=1.25)#
axis(side=1, at=c(1,4), labels=c("Paul", "Ward"))#
mtext(quote(NEP~(mmol~O[2]~m^-3~d^-1)), side=2, line=1.5, cex=1)#
dev.off()#
#
# aggregate(pWardPaul_Metabolism[,"NEP"], by=list(pWardPaul_Metabolism[,"Lake"], pWardPaul_Metabolism[,"Year"]), FUN=mean, na.rm=TRUE)#
#
# DOsummary <- aggregate(AllDO[,"MeanDO"], by=list(AllDO[,"Lake"], AllDO[,"Year"]), FUN=mean, na.rm=TRUE)#
# cbind(DOsummary, "localDO"=DOsummary[,"x"]+(100-94.6))
rm(list=ls())#
graphics.off()#
setwd("/Users/battrd/Documents/School&Work/WiscResearch/Isotopes_2012Analysis")#
load("Cons_Mixture_Ward2010&2012_v0.4.7.RData")#
FigureFolder <- paste("Figures/Figures_", "v0.4.7", sep="")#
SaveType <- c(".pdf", ".png", ".eps")[2]#
library("plyr")#
#
# Save <- c(TRUE, FALSE)[1]#
# SaveType <- c(".pdf", ".png")[2]#
#
# ===============#
# = New _v0.4.5 =#
# ===============#
setwd(paste("/Users/battrd/Documents/School&Work/WiscResearch/Isotopes_2012Analysis/",FigureFolder,sep=""))#
#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("dTerrAlgae_", Version, sep=""), ".pdf", sep=""), height=3, width=3.23)}#
	if(SaveType==".png"){png(file=paste(paste("dTerrAlgae_", Version, sep=""), ".png", sep=""), units="in", res=300, height=3, width=3.23)}#
	if(SaveType==".eps"){setEPS(); postscript(file=paste(paste("dTerrAlgae_", Version, sep=""), ".eps", sep=""), height=3, width=3.23, pointsize=10)}#
}else{#
	dev.new(height=4, width=3, pointsize=10, family="Times")#
}#
par(mfrow=c(1,1), mar=c(2.1,2,0.1,0.1), oma=c(0,0,0,0), ps=9, cex=1, mgp=c(3,0.3,0), tcl=-0.25, family="serif")#
#
aYlim <- c(min(Chosen25th[,"Algae"], na.rm=TRUE), max(Chosen75th[,"Algae"], na.rm=TRUE))*c(1.15,1.05)#
tYlim <- c(min(Chosen25th[,"All.Terrestrial"], na.rm=TRUE), max(Chosen75th[,"All.Terrestrial"], na.rm=TRUE))#
#
plot(ChosenMedDiffs[,"Algae"], ChosenMedDiffs[,"All.Terrestrial"], xlim=aYlim, xlab="", xaxt="s", ylab="", ylim=tYlim, pch=NA)#
abline(h=0, lty="dashed", col="gray")#
abline(v=0, lty="dashed", col="gray")#
#
arrows(x0=Chosen25th[,"Algae"], y0=ChosenMedDiffs[,"All.Terrestrial"], x1=Chosen75th[,"Algae"], y1=ChosenMedDiffs[,"All.Terrestrial"], angle=90, code=0, length=0.05, col="gray")#
arrows(x0=ChosenMedDiffs[,"Algae"], y0=Chosen25th[,"All.Terrestrial"], x1=ChosenMedDiffs[,"Algae"], y1=Chosen75th[,"All.Terrestrial"], angle=90, code=0, length=0.05, col="gray")#
#
points(ChosenMedDiffs[,"Algae"], ChosenMedDiffs[,"All.Terrestrial"], pch=20)#
#
ConsNames <- c("U. limi", "S. oregonensis", "Phoxinus spp.", "A. melas", "P. promelas", "Chaoborus spp.", "H. trivolvis")#
text(x=ChosenMedDiffs[,"Algae"][-c(2,6)], y=ChosenMedDiffs[,"All.Terrestrial"][-c(2,6)], labels=ConsNames[-c(2,6)], srt=0, xpd=NA,adj=c(1.05,-0.1), cex=1, font=3, ps=9)#
text(x=ChosenMedDiffs[,"Algae"][c(2,6)], y=ChosenMedDiffs[,"All.Terrestrial"][c(2,6)], labels=ConsNames[c(2,6)], srt=0, xpd=NA,adj=c(-0.01,-0.2), cex=1, font=3, ps=9)#
mtext("Change in terrestrial use", side=2, line=1.1, cex=1)#
mtext("Change in algal use", side=1, line=1.1, cex=1)#
if(Save){dev.off()}#
#
# ===================#
# = END new _v0.4.5 =#
# ===================#
# ===============#
# = New _v0.4.7 =#
# ===============#
cI10 <- ResourceUse[,"Consumer"]=="Chaoborus" & ResourceUse[,"Year"]==2010 #index of 2010 chaob posterior#
cI12 <- ResourceUse[,"Consumer"]=="Chaoborus" & ResourceUse[,"Year"]==2012 #index of 2012 chaob posterior#
fN <- rev(c("FHM", "DAC", "CMM", "BHD1")) #fish names#
# fC <- tim.colors(n=18, alpha=1)[4*c(0.75,2.5,3.25,4)]#
fC <- rep("black",4)#
#
# dev.new(width=3.5, height=5)#
setwd(paste("/Users/battrd/Documents/School&Work/WiscResearch/Isotopes_2012Analysis/",FigureFolder,sep=""))#
if(Save){#
	if(SaveType==".pdf"){pdf(paste("deltaFishChaob_", Version, ".pdf", sep=""), width=3.23, height=4.5)}#
	if(SaveType==".png"){png(paste("deltaFishChaob_", Version, ".png", sep=""), width=3.23, height=4.5, units="in", res=500)}#
}#
#
par(mfrow=c(1,1), mar=c(2.5,2.3,0,0), oma=c(0,0,0.2,0.2), ps=9, las=1, tcl=-0.25, mgp=c(3,0.35,0), yaxp=c(0,20,10), family="Times", cex=1)#
r <- c("All.Phytoplankton", "All.Terrestrial")[1]#
pC10 <- ResourceUse[cI10,r] #phytoplankton for chaoborus in 2010#
pC12 <- ResourceUse[cI12,r] #phytoplankton for chaoborus in 2012#
# plot(density(pC10), xlim=c(0,1), ylim=c(0,7), zero.line=FALSE, main="")#
for(f in 1:length(fN)){#
	vertOff <- 5*(f-1)#
	#2010 distribution of differences#
	fI10 <- ResourceUse[,"Consumer"]==fN[f] & ResourceUse[,"Year"]==2010#
	pF10 <- ResourceUse[fI10,r]#
	d10 <- density(pF10-pC10)#
	dx10 <- d10$x#
	dy10 <- d10$y + vertOff#
#
	#2012 distribution of differences#
	fI12 <- ResourceUse[,"Consumer"]==fN[f] & ResourceUse[,"Year"]==2012#
	pF12 <- ResourceUse[fI12,r]#
	d12 <- density(pF12-pC12)#
	dx12 <- d12$x#
	dy12 <- d12$y + vertOff#
#
	h <- max(c(dy10, dy12))+0.25#
#
	#graph 2010#
	if(f==1){#
		plot(dx10,dy10, col=fC[f],xlim=c(-1,0.5), ylim=c(0,20), pch=NA, yaxt="n")#
		# axis(side=2, at=seq(0,20, 0.75), labels=FALSE, tcl=0.1)#
		tksAt <- c(0,1,2,3)#
		nt <- length(tksAt)#
		ats <- rep((5*((1:4)-1)), each=nt) + rep(tksAt, 4)#
		labs <- ats - rep((5*((1:4)-1)), each=nt)#
		axis(side=2, at=ats, labels=labs, tcl=-0.25, mgp=c(3,0.5,0))#
		abline(h=0, col="darkgray", lty="dashed")#
		segments(x0=0, x1=0, y0=vertOff, y1=(h), lty="dashed", col="darkgray")#
		lines(dx10,dy10, col=fC[f], type="l")#
	}else{#
		lines(dx10,dy10, col=fC[f])#
		abline(h=vertOff, col="darkgray", lty="dashed")#
		segments(x0=0, x1=0, y0=vertOff, y1=(h), lty="dashed", col="darkgray")#
	}#
#
	#2012 graph#
	lines(dx12,dy12, col=fC[f], lwd=3)#
#
	#means of distributions of differences, and arrows showing change between years#
	mu10 <- mean(pF10-pC10)#
	mu12 <- mean(pF12-pC12)#
	arrows(x0=mu10, y0=h, x1=mu12,y1=h, length=0.075, col=fC[f], lwd=2)#
	text(x=-1.1, y=h, labels=rev(c("P. promelas", "Phoxinus", "U. limi", "A. melas"))[f], font=3, col=fC[f], pos=4)#
}#
mtext(quote(Fish~phi1[Phyto]-Chaob.~phi1[Phyto]), side=1, line=1.5, outer=FALSE, cex=1)#
mtext("Posterior Density", side=2, line=1.35, cex=1, las=0)#
legend("topright", bty="n", legend=c("2010","2012"), lwd=c(1,2), inset=c(0,-0.025))#
dev.off()#
#
# ===================#
# = END New _v0.4.7 =#
# ===================#
NeatConsNames <- c("Calanoid"="S. oregonensis", "Mesocyclops"="Mesocyclops", "Chaoborus"="Chaoborus spp.", "Helisoma trivolvis"="H. trivolvis", "FHM"="P. promelas", "DAC"="Phoxinus spp.", "BHD1"="A. melas", "BHD2"="A. melas", "CMM"= "U. limi", "PKS"="L. gibbosus", "YWP"="P. flavescens")#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("NeatSummary_", Version, sep=""), ".pdf", sep=""), height=7, width=6.81)}#
	if(SaveType==".png"){png(file=paste(paste("NeatSummary_", Version, sep=""), ".png", sep=""), units="in", res=200, height=7, width=6.81)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("NeatSummary_", Version, sep=""), ".eps", sep=""), height=7, width=6.81)}#
}else{#
	dev.new(height=7, width=6.811)#
}#
layout(matrix(c(1,2,3,4,4,6,5,5,7), ncol=3, byrow=TRUE), widths=c(2.4/7, 2/7, 2.6/7, 2/7, 2/7, 3/7, 2/7, 2/7, 3/7))#
# par(mar=c(2.5,0.5,1,0.5), oma=c(0,2,0,0)), cex=1)#
par(oma=c(0, 0, 0.2, 0.2))#
for(i in 1:length(Cons)){#
	Yaxt <- ifelse(is.element(i, c(1,4,5)), "s", "n")#
	LegPos <- ifelse(is.element(i, c(1,2,4,5)), "topleft", "topright")#
	if(Yaxt=="s"){#
		par(mar=c(2.5,3,0,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
	}else{#
		par(mar=c(2.5,1,0,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
	}#
	# LegPos <- c("topleft", "topleft", "topright", "topright", "topleft", "topright", "topright")[i]#
	NamesThisUse <- make.names(ConsChoices[[Cons[i]]][[GroupChoose]])#
	AllNamesThisuse <- c("Year", "Month", "Consumer", "Grouping", NamesThisUse)#
	ThisRU0 <- droplevels(subset(ResourceUse, Consumer==Cons[i] & Grouping==GroupChoose & Month=="Pooled"))[AllNamesThisuse] #try to subset only the sources that were part of the analysis for this consumer#
	ThisRU00 <- reshape(ThisRU0, varying=list(c(NamesThisUse)), times=ConsChoices[[Cons[i]]][[GroupChoose]], ids=1:nrow(ThisRU0), timevar="Source", v.names="Proportion", direction="long")#
#
	ThisRU <- ThisRU00[,c("Year", "Month", "Consumer", "Grouping", "Source", "Proportion")]#
	row.names(ThisRU) <- NULL#
	ResourceNames <- ConsChoicesShort[ConsChoices[[Cons[i]]][[GroupChoose]]]#
	ThisRU[,"Source"] <- factor(ThisRU[,"Source"], levels=ConsChoices[[Cons[i]]][[GroupChoose]], ordered=TRUE)#
	# aggregate(ThisRU[,"Proportion"], by=list("Year"=ThisRU[,1], "Source"=ThisRU[,"Source"]), FUN=median)#
	ThisAt_Axis <- c(0.5,3.5,6.5,9.5)[1:length(ResourceNames)]#
	# boxplot(Proportion~Year+Source, data=ThisRU, col=c("#FA807225","#3A5FCD25"), border=c("red","blue"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.5, yaxt=Yaxt)#
	boxplot(Proportion~Year+Source, data=ThisRU, border=c("black","black"), col=c(NA, "lightgray"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.25, yaxt=Yaxt)#
	axis(side=1, at=ThisAt_Axis, labels=ResourceNames)#
	if(Yaxt=="n"){axis(side=2, labels=FALSE)}#
	# mtext(ConsNameMedium[Cons[i]], side=2, line=2)#
	# legend(LegPos, NeatConsNames[Cons[i]])#
	X <- c("topleft"=-0.9, "topright"=ThisAt_Axis[length(ResourceNames)]+1)#
	Pos <- c("topleft"=4, "topright"=2)#
	text(x=X[LegPos], y=0.95, labels=NeatConsNames[Cons[i]], pos=Pos[LegPos], font=3)#
	if(i==length(Cons)){#
		mtext("Proportion of Diet", side=2, line=-1, outer=TRUE, cex=1)#
	}#
}#
if(Save){dev.off()}#
# ===============#
# = ZOOPLANKTON =#
# ===============#
zData0 <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/Data/PaulWard_Weekly_2010&2012/Paul&WardZoopMass2010&2012.csv")#
cData0 <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/Data/PaulWard_Weekly_2010&2012/Paul&WardChaobMass2010&2012.csv")#
zData <- reshape(zData0, varying=list(names(zData0[,4:17])), times=names(zData0[,4:17]), ids=1:nrow(zData0), timevar="Taxon", v.names="Mass", direction="long")[,c("Lake","Year","DoY","Taxon","Mass")]#
row.names(zData) <- NULL#
zData <- subset(zData, DoY>=143)#
#
zData[,"Year"] <- as.factor(zData[,"Year"])#
#
cData <- reshape(cData0, varying=list(names(cData0[,4:7])), times=names(cData0[,4:7]), ids=1:nrow(cData0), timevar="Taxon", v.names="Mass", direction="long")[,c("Lake","Year","DoY","Taxon","Mass")]#
row.names(cData) <- NULL#
cData <- subset(cData, DoY>=143)#
cData[,"Year"] <- as.factor(cData[,"Year"])#
#
sumzData <- aggregate(zData[,"Mass"], by=list(zData[,"Lake"], zData[,"Year"], zData[,"DoY"]), sum)#
names(sumzData) <- c("Lake", "Year", "DoY", "Mass")#
zYearMean <- aggregate(sumzData[,"Mass"], by=list(sumzData[,"Lake"], sumzData[,"Year"]), mean)#
names(zYearMean) <- c("Lake", "Year", "Mass")#
sumcData <- aggregate(cData[,"Mass"], by=list(cData[,"Lake"], cData[,"Year"], cData[,"DoY"]), sum)#
names(sumcData) <- c("Lake", "Year", "DoY", "Mass")#
cYearMean <- aggregate(sumcData[,"Mass"], by=list(sumcData[,"Lake"], sumcData[,"Year"]), mean)#
names(cYearMean) <- c("Lake", "Year", "Mass")#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("ZoopChaob_PaulWard_2010&2012_", Version, sep=""), ".pdf", sep=""), height=4.75, width=3.23)}#
	if(SaveType==".png"){png(file=paste(paste("ZoopChaob_PaulWard_2010&2012_", Version, sep=""), ".png", sep=""), units="in", res=200, height=4.75, width=3.23)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("ZoopChaob_PaulWard_2010&2012_", Version, sep=""), ".eps", sep=""), height=4.75, width=3.23)}#
}else{#
	dev.new(height=4.75, width=3.23)#
}#
par(mfrow=c(2,1), mar=c(1,2.5,0,0), oma=c(0.3, 0, 0.2, 0.2), cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
boxplot(Mass~Year+Lake, data=sumzData, at=c(0.5,1.5, 3.5, 4.5), col=c(NA,"lightgray"), show.names=FALSE, outline=FALSE, lwd=1.25)#
axis(side=1, at=c(1,4), labels=FALSE)#
mtext(quote(Zooplankton~(g/m^2)), side=2, line=1.5, cex=1)#
#
boxplot(Mass~Year+Lake, data=sumcData, at=c(0.5,1.5, 3.5, 4.5), col=c(NA,"lightgray"), show.names=FALSE, outline=FALSE, lwd=1.25)#
axis(side=1, at=c(1,4), labels=c("Paul", "Ward"))#
mtext(quote(italic(Chaoborus)~spp.~(g/m^2)), side=2, line=1.5, cex=1)#
dev.off()#
# ============#
# = ROUTINES =#
# ============#
#Taken from L&W_Routine_2010&2012_v3.r and then revised#
Data0 <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/Data/PaulWard_Weekly_2010&2012/PaulWard_Weekly_2010&2012.csv")#
POC0 <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/Data/PaulWard_Weekly_2010&2012/POC_PaulWard2010&2012.csv")#
ChlaP0 <- read.csv("/Users/Battrd/Documents/School&Work/WiscResearch/Data/PaulWard_Weekly_2010&2012/PaulWard_ChlaProfile_2010&2012.csv")#
ChlaP0 <- subset(ChlaP0, Zid!="Meta")#
areal <- function(x){#
	mean(x[,"Chla"])*max(x[,"Z"])#
}#
aChl0 <- ddply(ChlaP0, .variables=c("Lake", "Year", "Date"), .fun=areal)#
names(aChl0) <- c("Lake", "Year", "Date", "aChla")#
#
VarAnalyze <- c("Color","Temp","Zmix","Secchi","Light","DOC","DIC", "pH", "TN", "TP","Chla","POC","PON","C:Chl", "pCO2_water", "DO_Conc")#
PlotNames <- c("L 10", "L 12", "W 10", "W 12")#
PML_Data0 <- subset(Data0, Layer=="PML")[,]#
PML_Data <- merge(PML_Data0, POC0, all.x=TRUE)#
PML_Data[,"C:Chl"] <- PML_Data[,"POC"]/(PML_Data[,"Chla"]/1000)#
#
VarAnalyze <- c("Color", "Chla", "POC","PON","C:Chl", "Temp", "DOC", "DIC", "DO_Conc")#
Meta_Data0 <- subset(Data0, Layer=="Meta")[,]#
Meta_Data <- merge(Meta_Data0, POC0, all.x=TRUE)#
Meta_Data[,"C:Chl"] <- Meta_Data[,"POC"]/(Meta_Data[,"Chla"]/1000)#
#
VarAnalyze <- c("Color", "Chla", "Temp", "DOC", "DIC", "DO_Conc")#
Hypo_Data <- subset(Data0, Layer=="Hypo")[,]#
#
VarAnalyze <- c("Color","Temp","Zmix","Secchi","Light","DOC","DIC", "pH", "TN", "TP","Chla","POC","PON","C:Chl", "pCO2_water", "DO_Conc")#
#
# =============================================#
# = 4-panel, areal chlorophyll, pCO2, DO, NEP =#
# =============================================#
#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("LimnoMetab_PaulWard_2010&2012_", Version, sep=""), ".pdf", sep=""), height=7, width=3.23)}#
	if(SaveType==".png"){png(file=paste(paste("LimnoMetab_PaulWard_2010&2012_", Version, sep=""), ".png", sep=""), units="in", res=200, height=7, width=3.23)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("LimnoMetab_PaulWard_2010&2012_", Version, sep=""), ".eps", sep=""), height=7, width=3.23)}#
}else{#
	dev.new(height=7, width=3.23)#
}#
par(mfrow=c(4,1), mar=c(1,2.5,0,0), oma=c(0.2, 0, 0.2, 0.2), cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
#
#Chlorophyll#
boxplot(aChla~Year+Lake, data=aChl0, at=c(0.5,1.5, 3.5, 4.5), col=c(NA,"lightgray"), show.names=FALSE, outline=FALSE, lwd=1.25)#
axis(side=1, at=c(1,4), labels=FALSE)#
mtext(quote(Chlorophyll~(mg/m^2)), side=2, line=1.5, cex=1)#
#
#pCO2#
ppCO2 <- subset(Data0, Layer=="PML", select=c("Lake","Year","pCO2_water"))#
boxplot(pCO2_water~Year+Lake, data=ppCO2, at=c(0.5,1.5, 3.5, 4.5), col=c(NA,"lightgray"), show.names=FALSE, outline=FALSE, lwd=1.25)#
axis(side=1, at=c(1,4), labels=FALSE)#
mtext(quote(italic(p)*CO[2]~(mu*atm)), side=2, line=1.5, cex=1)#
#
#DO#
load(file="/Users/Battrd/Documents/School&Work/WiscResearch/Data/PaulWard_2010&2012_Metabolism_v0.2.RData")#
boxplot(MeanDO~Year+Lake, data=AllDO, at=c(0.5,1.5, 3.5, 4.5), col=c(NA,"lightgray"), show.names=FALSE, outline=FALSE, lwd=1.25)#
axis(side=1, at=c(1,4), labels=FALSE)#
mtext(quote(DO~("%"*saturation)), side=2, line=1.5, cex=1)#
#
#NEP#
pWardPaul_Metabolism <- subset(WardPaul_Metabolism, DoY>=143)#
pWardPaul_Metabolism[,"Lake"] <- relevel(pWardPaul_Metabolism[,"Lake"], ref="Paul")#
boxplot(NEP~Year+Lake, data=pWardPaul_Metabolism, at=c(0.5,1.5, 3.5, 4.5), col=c(NA,"lightgray"), show.names=FALSE, outline=FALSE, lwd=1.25)#
axis(side=1, at=c(1,4), labels=c("Paul", "Ward"))#
mtext(quote(NEP~(mmol~O[2]~m^-3~d^-1)), side=2, line=1.5, cex=1)#
dev.off()#
#
# aggregate(pWardPaul_Metabolism[,"NEP"], by=list(pWardPaul_Metabolism[,"Lake"], pWardPaul_Metabolism[,"Year"]), FUN=mean, na.rm=TRUE)#
#
# DOsummary <- aggregate(AllDO[,"MeanDO"], by=list(AllDO[,"Lake"], AllDO[,"Year"]), FUN=mean, na.rm=TRUE)#
# cbind(DOsummary, "localDO"=DOsummary[,"x"]+(100-94.6))
NeatConsNames <- c("Calanoid"="S. oregonensis", "Mesocyclops"="Mesocyclops", "Chaoborus"="Chaoborus spp.", "Helisoma trivolvis"="H. trivolvis", "FHM"="P. promelas", "DAC"="Phoxinus spp.", "BHD1"="A. melas", "BHD2"="A. melas", "CMM"= "U. limi", "PKS"="L. gibbosus", "YWP"="P. flavescens")#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("NeatSummary_", Version, sep=""), ".pdf", sep=""), height=7, width=6.81)}#
	if(SaveType==".png"){png(file=paste(paste("NeatSummary_", Version, sep=""), ".png", sep=""), units="in", res=200, height=7, width=6.81)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("NeatSummary_", Version, sep=""), ".eps", sep=""), height=7, width=6.81)}#
}else{#
	dev.new(height=7, width=6.811)#
}#
layout(matrix(c(1,2,3,4,4,6,5,5,7), ncol=3, byrow=TRUE), widths=c(2.4/7, 2/7, 2.6/7, 2/7, 2/7, 3/7, 2/7, 2/7, 3/7))#
# par(mar=c(2.5,0.5,1,0.5), oma=c(0,2,0,0)), cex=1)#
par(oma=c(0, 0, 0, 0.2))#
for(i in 1:length(Cons)){#
	Yaxt <- ifelse(is.element(i, c(1,4,5)), "s", "n")#
	LegPos <- ifelse(is.element(i, c(1,2,4,5)), "topleft", "topright")#
	if(Yaxt=="s"){#
		par(mar=c(2.25,3,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
	}else{#
		par(mar=c(2.25,1,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
	}#
	# LegPos <- c("topleft", "topleft", "topright", "topright", "topleft", "topright", "topright")[i]#
	NamesThisUse <- make.names(ConsChoices[[Cons[i]]][[GroupChoose]])#
	AllNamesThisuse <- c("Year", "Month", "Consumer", "Grouping", NamesThisUse)#
	ThisRU0 <- droplevels(subset(ResourceUse, Consumer==Cons[i] & Grouping==GroupChoose & Month=="Pooled"))[AllNamesThisuse] #try to subset only the sources that were part of the analysis for this consumer#
	ThisRU00 <- reshape(ThisRU0, varying=list(c(NamesThisUse)), times=ConsChoices[[Cons[i]]][[GroupChoose]], ids=1:nrow(ThisRU0), timevar="Source", v.names="Proportion", direction="long")#
#
	ThisRU <- ThisRU00[,c("Year", "Month", "Consumer", "Grouping", "Source", "Proportion")]#
	row.names(ThisRU) <- NULL#
	ResourceNames <- ConsChoicesShort[ConsChoices[[Cons[i]]][[GroupChoose]]]#
	ThisRU[,"Source"] <- factor(ThisRU[,"Source"], levels=ConsChoices[[Cons[i]]][[GroupChoose]], ordered=TRUE)#
	# aggregate(ThisRU[,"Proportion"], by=list("Year"=ThisRU[,1], "Source"=ThisRU[,"Source"]), FUN=median)#
	ThisAt_Axis <- c(0.5,3.5,6.5,9.5)[1:length(ResourceNames)]#
	# boxplot(Proportion~Year+Source, data=ThisRU, col=c("#FA807225","#3A5FCD25"), border=c("red","blue"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.5, yaxt=Yaxt)#
	boxplot(Proportion~Year+Source, data=ThisRU, border=c("black","black"), col=c(NA, "lightgray"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.25, yaxt=Yaxt)#
	axis(side=1, at=ThisAt_Axis, labels=ResourceNames)#
	if(Yaxt=="n"){axis(side=2, labels=FALSE)}#
	# mtext(ConsNameMedium[Cons[i]], side=2, line=2)#
	# legend(LegPos, NeatConsNames[Cons[i]])#
	X <- c("topleft"=-0.9, "topright"=ThisAt_Axis[length(ResourceNames)]+1)#
	Pos <- c("topleft"=4, "topright"=2)#
	text(x=X[LegPos], y=0.95, labels=NeatConsNames[Cons[i]], pos=Pos[LegPos], font=3)#
	if(i==length(Cons)){#
		mtext("Proportion of Diet", side=2, line=-1, outer=TRUE, cex=1)#
	}#
}#
if(Save){dev.off()}
NeatConsNames <- c("Calanoid"="S. oregonensis", "Mesocyclops"="Mesocyclops", "Chaoborus"="Chaoborus spp.", "Helisoma trivolvis"="H. trivolvis", "FHM"="P. promelas", "DAC"="Phoxinus spp.", "BHD1"="A. melas", "BHD2"="A. melas", "CMM"= "U. limi", "PKS"="L. gibbosus", "YWP"="P. flavescens")#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("NeatSummary_", Version, sep=""), ".pdf", sep=""), height=7, width=6.81)}#
	if(SaveType==".png"){png(file=paste(paste("NeatSummary_", Version, sep=""), ".png", sep=""), units="in", res=200, height=7, width=6.81)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("NeatSummary_", Version, sep=""), ".eps", sep=""), height=7, width=6.81)}#
}else{#
	dev.new(height=7, width=6.811)#
}#
layout(matrix(c(1,2,3,4,4,6,5,5,7), ncol=3, byrow=TRUE), widths=c(2.4/7, 2/7, 2.6/7, 2/7, 2/7, 3/7, 2/7, 2/7, 3/7))#
# par(mar=c(2.5,0.5,1,0.5), oma=c(0,2,0,0)), cex=1)#
par(oma=c(0, 0, 0, 0.2))#
for(i in 1:length(Cons)){#
	Yaxt <- ifelse(is.element(i, c(1,4,5)), "s", "n")#
	LegPos <- ifelse(is.element(i, c(1,2,4,5)), "topleft", "topright")#
	if(Yaxt=="s"){#
		par(mar=c(2,3,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
	}else{#
		par(mar=c(2,1,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
	}#
	# LegPos <- c("topleft", "topleft", "topright", "topright", "topleft", "topright", "topright")[i]#
	NamesThisUse <- make.names(ConsChoices[[Cons[i]]][[GroupChoose]])#
	AllNamesThisuse <- c("Year", "Month", "Consumer", "Grouping", NamesThisUse)#
	ThisRU0 <- droplevels(subset(ResourceUse, Consumer==Cons[i] & Grouping==GroupChoose & Month=="Pooled"))[AllNamesThisuse] #try to subset only the sources that were part of the analysis for this consumer#
	ThisRU00 <- reshape(ThisRU0, varying=list(c(NamesThisUse)), times=ConsChoices[[Cons[i]]][[GroupChoose]], ids=1:nrow(ThisRU0), timevar="Source", v.names="Proportion", direction="long")#
#
	ThisRU <- ThisRU00[,c("Year", "Month", "Consumer", "Grouping", "Source", "Proportion")]#
	row.names(ThisRU) <- NULL#
	ResourceNames <- ConsChoicesShort[ConsChoices[[Cons[i]]][[GroupChoose]]]#
	ThisRU[,"Source"] <- factor(ThisRU[,"Source"], levels=ConsChoices[[Cons[i]]][[GroupChoose]], ordered=TRUE)#
	# aggregate(ThisRU[,"Proportion"], by=list("Year"=ThisRU[,1], "Source"=ThisRU[,"Source"]), FUN=median)#
	ThisAt_Axis <- c(0.5,3.5,6.5,9.5)[1:length(ResourceNames)]#
	# boxplot(Proportion~Year+Source, data=ThisRU, col=c("#FA807225","#3A5FCD25"), border=c("red","blue"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.5, yaxt=Yaxt)#
	boxplot(Proportion~Year+Source, data=ThisRU, border=c("black","black"), col=c(NA, "lightgray"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.25, yaxt=Yaxt)#
	axis(side=1, at=ThisAt_Axis, labels=ResourceNames)#
	if(Yaxt=="n"){axis(side=2, labels=FALSE)}#
	# mtext(ConsNameMedium[Cons[i]], side=2, line=2)#
	# legend(LegPos, NeatConsNames[Cons[i]])#
	X <- c("topleft"=-0.9, "topright"=ThisAt_Axis[length(ResourceNames)]+1)#
	Pos <- c("topleft"=4, "topright"=2)#
	text(x=X[LegPos], y=0.95, labels=NeatConsNames[Cons[i]], pos=Pos[LegPos], font=3)#
	if(i==length(Cons)){#
		mtext("Proportion of Diet", side=2, line=-1, outer=TRUE, cex=1)#
	}#
}#
if(Save){dev.off()}
NeatConsNames <- c("Calanoid"="S. oregonensis", "Mesocyclops"="Mesocyclops", "Chaoborus"="Chaoborus spp.", "Helisoma trivolvis"="H. trivolvis", "FHM"="P. promelas", "DAC"="Phoxinus spp.", "BHD1"="A. melas", "BHD2"="A. melas", "CMM"= "U. limi", "PKS"="L. gibbosus", "YWP"="P. flavescens")#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("NeatSummary_", Version, sep=""), ".pdf", sep=""), height=6.5, width=6.81)}#
	if(SaveType==".png"){png(file=paste(paste("NeatSummary_", Version, sep=""), ".png", sep=""), units="in", res=200, height=6.5, width=6.81)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("NeatSummary_", Version, sep=""), ".eps", sep=""), height=7, width=6.81)}#
}else{#
	dev.new(height=7, width=6.811)#
}#
layout(matrix(c(1,2,3,4,4,6,5,5,7), ncol=3, byrow=TRUE), widths=c(2.4/7, 2/7, 2.6/7, 2/7, 2/7, 3/7, 2/7, 2/7, 3/7))#
# par(mar=c(2.5,0.5,1,0.5), oma=c(0,2,0,0)), cex=1)#
par(oma=c(0, 0, 0, 0.2))#
for(i in 1:length(Cons)){#
	Yaxt <- ifelse(is.element(i, c(1,4,5)), "s", "n")#
	LegPos <- ifelse(is.element(i, c(1,2,4,5)), "topleft", "topright")#
	if(Yaxt=="s"){#
		par(mar=c(2,3,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
	}else{#
		par(mar=c(2,1,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
	}#
	# LegPos <- c("topleft", "topleft", "topright", "topright", "topleft", "topright", "topright")[i]#
	NamesThisUse <- make.names(ConsChoices[[Cons[i]]][[GroupChoose]])#
	AllNamesThisuse <- c("Year", "Month", "Consumer", "Grouping", NamesThisUse)#
	ThisRU0 <- droplevels(subset(ResourceUse, Consumer==Cons[i] & Grouping==GroupChoose & Month=="Pooled"))[AllNamesThisuse] #try to subset only the sources that were part of the analysis for this consumer#
	ThisRU00 <- reshape(ThisRU0, varying=list(c(NamesThisUse)), times=ConsChoices[[Cons[i]]][[GroupChoose]], ids=1:nrow(ThisRU0), timevar="Source", v.names="Proportion", direction="long")#
#
	ThisRU <- ThisRU00[,c("Year", "Month", "Consumer", "Grouping", "Source", "Proportion")]#
	row.names(ThisRU) <- NULL#
	ResourceNames <- ConsChoicesShort[ConsChoices[[Cons[i]]][[GroupChoose]]]#
	ThisRU[,"Source"] <- factor(ThisRU[,"Source"], levels=ConsChoices[[Cons[i]]][[GroupChoose]], ordered=TRUE)#
	# aggregate(ThisRU[,"Proportion"], by=list("Year"=ThisRU[,1], "Source"=ThisRU[,"Source"]), FUN=median)#
	ThisAt_Axis <- c(0.5,3.5,6.5,9.5)[1:length(ResourceNames)]#
	# boxplot(Proportion~Year+Source, data=ThisRU, col=c("#FA807225","#3A5FCD25"), border=c("red","blue"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.5, yaxt=Yaxt)#
	boxplot(Proportion~Year+Source, data=ThisRU, border=c("black","black"), col=c(NA, "lightgray"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.25, yaxt=Yaxt)#
	axis(side=1, at=ThisAt_Axis, labels=ResourceNames)#
	if(Yaxt=="n"){axis(side=2, labels=FALSE)}#
	# mtext(ConsNameMedium[Cons[i]], side=2, line=2)#
	# legend(LegPos, NeatConsNames[Cons[i]])#
	X <- c("topleft"=-0.9, "topright"=ThisAt_Axis[length(ResourceNames)]+1)#
	Pos <- c("topleft"=4, "topright"=2)#
	text(x=X[LegPos], y=0.95, labels=NeatConsNames[Cons[i]], pos=Pos[LegPos], font=3)#
	if(i==length(Cons)){#
		mtext("Proportion of Diet", side=2, line=-1, outer=TRUE, cex=1)#
	}#
}#
if(Save){dev.off()}
NeatConsNames <- c("Calanoid"="S. oregonensis", "Mesocyclops"="Mesocyclops", "Chaoborus"="Chaoborus spp.", "Helisoma trivolvis"="H. trivolvis", "FHM"="P. promelas", "DAC"="Phoxinus spp.", "BHD1"="A. melas", "BHD2"="A. melas", "CMM"= "U. limi", "PKS"="L. gibbosus", "YWP"="P. flavescens")#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("NeatSummary_", Version, sep=""), ".pdf", sep=""), height=6.5, width=6.81)}#
	if(SaveType==".png"){png(file=paste(paste("NeatSummary_", Version, sep=""), ".png", sep=""), units="in", res=200, height=6.5, width=6.81)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("NeatSummary_", Version, sep=""), ".eps", sep=""), height=7, width=6.81)}#
}else{#
	dev.new(height=7, width=6.811)#
}#
layout(matrix(c(1,2,3,4,4,6,5,5,7), ncol=3, byrow=TRUE), widths=c(2.4/7, 2/7, 2.6/7, 2/7, 2/7, 3/7, 2/7, 2/7, 3/7))#
# par(mar=c(2.5,0.5,1,0.5), oma=c(0,2,0,0)), cex=1)#
par(oma=c(0, 0, 0, 0.2))#
for(i in 1:length(Cons)){#
	Yaxt <- ifelse(is.element(i, c(1,4,5)), "s", "n")#
	LegPos <- ifelse(is.element(i, c(1,2,4,5)), "topleft", "topright")#
	if(i <6){#
		if(Yaxt=="s"){#
			par(mar=c(2,3,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}else{#
			par(mar=c(2,1,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}#
	}else{#
		if(Yaxt=="s"){#
			par(mar=c(1.75,3,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}else{#
			par(mar=c(1.75,1,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}#
	}#
	# LegPos <- c("topleft", "topleft", "topright", "topright", "topleft", "topright", "topright")[i]#
	NamesThisUse <- make.names(ConsChoices[[Cons[i]]][[GroupChoose]])#
	AllNamesThisuse <- c("Year", "Month", "Consumer", "Grouping", NamesThisUse)#
	ThisRU0 <- droplevels(subset(ResourceUse, Consumer==Cons[i] & Grouping==GroupChoose & Month=="Pooled"))[AllNamesThisuse] #try to subset only the sources that were part of the analysis for this consumer#
	ThisRU00 <- reshape(ThisRU0, varying=list(c(NamesThisUse)), times=ConsChoices[[Cons[i]]][[GroupChoose]], ids=1:nrow(ThisRU0), timevar="Source", v.names="Proportion", direction="long")#
#
	ThisRU <- ThisRU00[,c("Year", "Month", "Consumer", "Grouping", "Source", "Proportion")]#
	row.names(ThisRU) <- NULL#
	ResourceNames <- ConsChoicesShort[ConsChoices[[Cons[i]]][[GroupChoose]]]#
	ThisRU[,"Source"] <- factor(ThisRU[,"Source"], levels=ConsChoices[[Cons[i]]][[GroupChoose]], ordered=TRUE)#
	# aggregate(ThisRU[,"Proportion"], by=list("Year"=ThisRU[,1], "Source"=ThisRU[,"Source"]), FUN=median)#
	ThisAt_Axis <- c(0.5,3.5,6.5,9.5)[1:length(ResourceNames)]#
	# boxplot(Proportion~Year+Source, data=ThisRU, col=c("#FA807225","#3A5FCD25"), border=c("red","blue"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.5, yaxt=Yaxt)#
	boxplot(Proportion~Year+Source, data=ThisRU, border=c("black","black"), col=c(NA, "lightgray"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.25, yaxt=Yaxt)#
	axis(side=1, at=ThisAt_Axis, labels=ResourceNames)#
	if(Yaxt=="n"){axis(side=2, labels=FALSE)}#
	# mtext(ConsNameMedium[Cons[i]], side=2, line=2)#
	# legend(LegPos, NeatConsNames[Cons[i]])#
	X <- c("topleft"=-0.9, "topright"=ThisAt_Axis[length(ResourceNames)]+1)#
	Pos <- c("topleft"=4, "topright"=2)#
	text(x=X[LegPos], y=0.95, labels=NeatConsNames[Cons[i]], pos=Pos[LegPos], font=3)#
	if(i==length(Cons)){#
		mtext("Proportion of Diet", side=2, line=-1, outer=TRUE, cex=1)#
	}#
}#
if(Save){dev.off()}
matrix(c(1,2,3,4,4,6,5,5,7), ncol=3, byrow=TRUE)
NeatConsNames <- c("Calanoid"="S. oregonensis", "Mesocyclops"="Mesocyclops", "Chaoborus"="Chaoborus spp.", "Helisoma trivolvis"="H. trivolvis", "FHM"="P. promelas", "DAC"="Phoxinus spp.", "BHD1"="A. melas", "BHD2"="A. melas", "CMM"= "U. limi", "PKS"="L. gibbosus", "YWP"="P. flavescens")#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("NeatSummary_", Version, sep=""), ".pdf", sep=""), height=6.5, width=6.81)}#
	if(SaveType==".png"){png(file=paste(paste("NeatSummary_", Version, sep=""), ".png", sep=""), units="in", res=200, height=6.5, width=6.81)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("NeatSummary_", Version, sep=""), ".eps", sep=""), height=7, width=6.81)}#
}else{#
	dev.new(height=7, width=6.811)#
}#
layout(matrix(c(1,2,3,4,4,6,5,5,7), ncol=3, byrow=TRUE), widths=c(2.4/7, 2/7, 2.6/7, 2/7, 2/7, 3/7, 2/7, 2/7, 3/7))#
# par(mar=c(2.5,0.5,1,0.5), oma=c(0,2,0,0)), cex=1)#
par(oma=c(0, 0, 0, 0.2))#
for(i in 1:length(Cons)){#
	Yaxt <- ifelse(is.element(i, c(1,4,5)), "s", "n")#
	LegPos <- ifelse(is.element(i, c(1,2,4,5)), "topleft", "topright")#
	if(!is.element(i, c(5,7))){#
		if(Yaxt=="s"){#
			par(mar=c(2,3,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}else{#
			par(mar=c(2,1,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}#
	}else{#
		if(Yaxt=="s"){#
			par(mar=c(1.75,3,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}else{#
			par(mar=c(1.75,1,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}#
	}#
	# LegPos <- c("topleft", "topleft", "topright", "topright", "topleft", "topright", "topright")[i]#
	NamesThisUse <- make.names(ConsChoices[[Cons[i]]][[GroupChoose]])#
	AllNamesThisuse <- c("Year", "Month", "Consumer", "Grouping", NamesThisUse)#
	ThisRU0 <- droplevels(subset(ResourceUse, Consumer==Cons[i] & Grouping==GroupChoose & Month=="Pooled"))[AllNamesThisuse] #try to subset only the sources that were part of the analysis for this consumer#
	ThisRU00 <- reshape(ThisRU0, varying=list(c(NamesThisUse)), times=ConsChoices[[Cons[i]]][[GroupChoose]], ids=1:nrow(ThisRU0), timevar="Source", v.names="Proportion", direction="long")#
#
	ThisRU <- ThisRU00[,c("Year", "Month", "Consumer", "Grouping", "Source", "Proportion")]#
	row.names(ThisRU) <- NULL#
	ResourceNames <- ConsChoicesShort[ConsChoices[[Cons[i]]][[GroupChoose]]]#
	ThisRU[,"Source"] <- factor(ThisRU[,"Source"], levels=ConsChoices[[Cons[i]]][[GroupChoose]], ordered=TRUE)#
	# aggregate(ThisRU[,"Proportion"], by=list("Year"=ThisRU[,1], "Source"=ThisRU[,"Source"]), FUN=median)#
	ThisAt_Axis <- c(0.5,3.5,6.5,9.5)[1:length(ResourceNames)]#
	# boxplot(Proportion~Year+Source, data=ThisRU, col=c("#FA807225","#3A5FCD25"), border=c("red","blue"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.5, yaxt=Yaxt)#
	boxplot(Proportion~Year+Source, data=ThisRU, border=c("black","black"), col=c(NA, "lightgray"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.25, yaxt=Yaxt)#
	axis(side=1, at=ThisAt_Axis, labels=ResourceNames)#
	if(Yaxt=="n"){axis(side=2, labels=FALSE)}#
	# mtext(ConsNameMedium[Cons[i]], side=2, line=2)#
	# legend(LegPos, NeatConsNames[Cons[i]])#
	X <- c("topleft"=-0.9, "topright"=ThisAt_Axis[length(ResourceNames)]+1)#
	Pos <- c("topleft"=4, "topright"=2)#
	text(x=X[LegPos], y=0.95, labels=NeatConsNames[Cons[i]], pos=Pos[LegPos], font=3)#
	if(i==length(Cons)){#
		mtext("Proportion of Diet", side=2, line=-1, outer=TRUE, cex=1)#
	}#
}#
if(Save){dev.off()}
NeatConsNames <- c("Calanoid"="S. oregonensis", "Mesocyclops"="Mesocyclops", "Chaoborus"="Chaoborus spp.", "Helisoma trivolvis"="H. trivolvis", "FHM"="P. promelas", "DAC"="Phoxinus spp.", "BHD1"="A. melas", "BHD2"="A. melas", "CMM"= "U. limi", "PKS"="L. gibbosus", "YWP"="P. flavescens")#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("NeatSummary_", Version, sep=""), ".pdf", sep=""), height=6.5, width=6.81)}#
	if(SaveType==".png"){png(file=paste(paste("NeatSummary_", Version, sep=""), ".png", sep=""), units="in", res=200, height=6.5, width=6.81)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("NeatSummary_", Version, sep=""), ".eps", sep=""), height=7, width=6.81)}#
}else{#
	dev.new(height=7, width=6.811)#
}#
layout(matrix(c(1,2,3,4,4,6,5,5,7), ncol=3, byrow=TRUE), widths=c(2.4/7, 2/7, 2.6/7, 2/7, 2/7, 3/7, 2/7, 2/7, 3/7))#
# par(mar=c(2.5,0.5,1,0.5), oma=c(0,2,0,0)), cex=1)#
par(oma=c(0, 0, 0, 0.2))#
for(i in 1:length(Cons)){#
	Yaxt <- ifelse(is.element(i, c(1,4,5)), "s", "n")#
	LegPos <- ifelse(is.element(i, c(1,2,4,5)), "topleft", "topright")#
	if(!is.element(i, c(5,7))){#
		if(Yaxt=="s"){#
			par(mar=c(2,3,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}else{#
			par(mar=c(2,1,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}#
	}else{#
		if(Yaxt=="s"){#
			par(mar=c(1.75,3,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}else{#
			par(mar=c(1.75,1,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}#
	}#
	# LegPos <- c("topleft", "topleft", "topright", "topright", "topleft", "topright", "topright")[i]#
	NamesThisUse <- make.names(ConsChoices[[Cons[i]]][[GroupChoose]])#
	AllNamesThisuse <- c("Year", "Month", "Consumer", "Grouping", NamesThisUse)#
	ThisRU0 <- droplevels(subset(ResourceUse, Consumer==Cons[i] & Grouping==GroupChoose & Month=="Pooled"))[AllNamesThisuse] #try to subset only the sources that were part of the analysis for this consumer#
	ThisRU00 <- reshape(ThisRU0, varying=list(c(NamesThisUse)), times=ConsChoices[[Cons[i]]][[GroupChoose]], ids=1:nrow(ThisRU0), timevar="Source", v.names="Proportion", direction="long")#
#
	ThisRU <- ThisRU00[,c("Year", "Month", "Consumer", "Grouping", "Source", "Proportion")]#
	row.names(ThisRU) <- NULL#
	ResourceNames <- ConsChoicesShort[ConsChoices[[Cons[i]]][[GroupChoose]]]#
	ThisRU[,"Source"] <- factor(ThisRU[,"Source"], levels=ConsChoices[[Cons[i]]][[GroupChoose]], ordered=TRUE)#
	# aggregate(ThisRU[,"Proportion"], by=list("Year"=ThisRU[,1], "Source"=ThisRU[,"Source"]), FUN=median)#
	ThisAt_Axis <- c(0.5,3.5,6.5,9.5)[1:length(ResourceNames)]#
	# boxplot(Proportion~Year+Source, data=ThisRU, col=c("#FA807225","#3A5FCD25"), border=c("red","blue"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.5, yaxt=Yaxt)#
	boxplot(Proportion~Year+Source, data=ThisRU, border=c("black","black"), col=c(NA, "lightgray"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.25, yaxt=Yaxt)#
	axis(side=1, at=ThisAt_Axis, labels=ResourceNames)#
	if(Yaxt=="n"){axis(side=2, labels=FALSE)}#
	# mtext(ConsNameMedium[Cons[i]], side=2, line=2)#
	# legend(LegPos, NeatConsNames[Cons[i]])#
	X <- c("topleft"=-0.9, "topright"=ThisAt_Axis[length(ResourceNames)]+1)#
	Pos <- c("topleft"=4, "topright"=2)#
	text(x=X[LegPos], y=0.95, labels=NeatConsNames[Cons[i]], pos=Pos[LegPos], font=3)#
	if(i==length(Cons)){#
		mtext("Proportion of Diet", side=2, line=-1, outer=TRUE, cex=1)#
	}#
}#
if(Save){dev.off()}
NeatConsNames <- c("Calanoid"="S. oregonensis", "Mesocyclops"="Mesocyclops", "Chaoborus"="Chaoborus spp.", "Helisoma trivolvis"="H. trivolvis", "FHM"="P. promelas", "DAC"="Phoxinus spp.", "BHD1"="A. melas", "BHD2"="A. melas", "CMM"= "U. limi", "PKS"="L. gibbosus", "YWP"="P. flavescens")#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("NeatSummary_", Version, sep=""), ".pdf", sep=""), height=6.5, width=6.81)}#
	if(SaveType==".png"){png(file=paste(paste("NeatSummary_", Version, sep=""), ".png", sep=""), units="in", res=200, height=6.5, width=6.81)}#
	if(SaveType==".eps"){setEPS();postscript(file=paste(paste("NeatSummary_", Version, sep=""), ".eps", sep=""), height=7, width=6.81)}#
}else{#
	dev.new(height=7, width=6.811)#
}#
layout(matrix(c(1,2,3,4,4,6,5,5,7), ncol=3, byrow=TRUE), widths=c(2.4/7, 2/7, 2.6/7, 2/7, 2/7, 3/7, 2/7, 2/7, 3/7))#
# par(mar=c(2.5,0.5,1,0.5), oma=c(0,2,0,0)), cex=1)#
par(oma=c(0, 0, 0, 0.2))#
for(i in 1:length(Cons)){#
	Yaxt <- ifelse(is.element(i, c(1,4,5)), "s", "n")#
	LegPos <- ifelse(is.element(i, c(1,2,4,5)), "topleft", "topright")#
	if(!is.element(i, c(5,7))){#
		if(Yaxt=="s"){#
			par(mar=c(2,3,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}else{#
			par(mar=c(2,1,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}#
	}else{#
		if(Yaxt=="s"){#
			par(mar=c(1.75,3,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}else{#
			par(mar=c(1.75,1,0.2,0),cex=1, ps=9, family="serif", mgp=c(3,0.3,0), tcl=-0.25)#
		}#
	}#
	# LegPos <- c("topleft", "topleft", "topright", "topright", "topleft", "topright", "topright")[i]#
	NamesThisUse <- make.names(ConsChoices[[Cons[i]]][[GroupChoose]])#
	AllNamesThisuse <- c("Year", "Month", "Consumer", "Grouping", NamesThisUse)#
	ThisRU0 <- droplevels(subset(ResourceUse, Consumer==Cons[i] & Grouping==GroupChoose & Month=="Pooled"))[AllNamesThisuse] #try to subset only the sources that were part of the analysis for this consumer#
	ThisRU00 <- reshape(ThisRU0, varying=list(c(NamesThisUse)), times=ConsChoices[[Cons[i]]][[GroupChoose]], ids=1:nrow(ThisRU0), timevar="Source", v.names="Proportion", direction="long")#
#
	ThisRU <- ThisRU00[,c("Year", "Month", "Consumer", "Grouping", "Source", "Proportion")]#
	row.names(ThisRU) <- NULL#
	ResourceNames <- ConsChoicesShort[ConsChoices[[Cons[i]]][[GroupChoose]]]#
	ThisRU[,"Source"] <- factor(ThisRU[,"Source"], levels=ConsChoices[[Cons[i]]][[GroupChoose]], ordered=TRUE)#
	# aggregate(ThisRU[,"Proportion"], by=list("Year"=ThisRU[,1], "Source"=ThisRU[,"Source"]), FUN=median)#
	ThisAt_Axis <- c(0.5,3.5,6.5,9.5)[1:length(ResourceNames)]#
	# boxplot(Proportion~Year+Source, data=ThisRU, col=c("#FA807225","#3A5FCD25"), border=c("red","blue"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.5, yaxt=Yaxt)#
	boxplot(Proportion~Year+Source, data=ThisRU, border=c("black","black"), col=c(NA, "lightgray"), at=rep(ThisAt_Axis,each=2)+c(-.5, .5), show.names=FALSE, outline=FALSE, ylim=c(0,1), lwd=1.25, yaxt=Yaxt)#
	axis(side=1, at=ThisAt_Axis, labels=ResourceNames)#
	if(Yaxt=="n"){axis(side=2, labels=FALSE)}#
	# mtext(ConsNameMedium[Cons[i]], side=2, line=2)#
	# legend(LegPos, NeatConsNames[Cons[i]])#
	X <- c("topleft"=-0.9, "topright"=ThisAt_Axis[length(ResourceNames)]+1)#
	Pos <- c("topleft"=4, "topright"=2)#
	text(x=X[LegPos], y=0.95, labels=NeatConsNames[Cons[i]], pos=Pos[LegPos], font=3)#
	if(i==length(Cons)){#
		mtext("Proportion of Diet", side=2, line=-1, outer=TRUE, cex=1)#
	}#
}#
if(Save){dev.off()}
head(Chosen25th)
===============#
# = New _v0.4.5 =#
# ===============#
setwd(paste("/Users/battrd/Documents/School&Work/WiscResearch/Isotopes_2012Analysis/",FigureFolder,sep=""))#
#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("dTerrPhyto_", Version, sep=""), ".pdf", sep=""), height=3, width=3.23)}#
	if(SaveType==".png"){png(file=paste(paste("dTerrPhyto_", Version, sep=""), ".png", sep=""), units="in", res=300, height=3, width=3.23)}#
	if(SaveType==".eps"){setEPS(); postscript(file=paste(paste("dTerrPhyto_", Version, sep=""), ".eps", sep=""), height=3, width=3.23, pointsize=10)}#
}else{#
	dev.new(height=4, width=3, pointsize=10, family="Times")#
}#
par(mfrow=c(1,1), mar=c(2.1,2,0.1,0.1), oma=c(0,0,0,0), ps=9, cex=1, mgp=c(3,0.3,0), tcl=-0.25, family="serif")#
#
aYlim <- c(min(Chosen25th[,"All.Phytoplankton"], na.rm=TRUE), max(Chosen75th[,"Algae"], na.rm=TRUE))*c(1.15,1.05)#
tYlim <- c(min(Chosen25th[,"All.Terrestrial"], na.rm=TRUE), max(Chosen75th[,"All.Terrestrial"], na.rm=TRUE))#
#
plot(ChosenMedDiffs[,"All.Phytoplankton"], ChosenMedDiffs[,"All.Terrestrial"], xlim=aYlim, xlab="", xaxt="s", ylab="", ylim=tYlim, pch=NA)#
abline(h=0, lty="dashed", col="gray")#
abline(v=0, lty="dashed", col="gray")#
#
arrows(x0=Chosen25th[,"All.Phytoplankton"], y0=ChosenMedDiffs[,"All.Terrestrial"], x1=Chosen75th[,"Algae"], y1=ChosenMedDiffs[,"All.Terrestrial"], angle=90, code=0, length=0.05, col="gray")#
arrows(x0=ChosenMedDiffs[,"All.Phytoplankton"], y0=Chosen25th[,"All.Terrestrial"], x1=ChosenMedDiffs[,"Algae"], y1=Chosen75th[,"All.Terrestrial"], angle=90, code=0, length=0.05, col="gray")#
#
points(ChosenMedDiffs[,"All.Phytoplankton"], ChosenMedDiffs[,"All.Terrestrial"], pch=20)#
#
ConsNames <- c("U. limi", "S. oregonensis", "Phoxinus spp.", "A. melas", "P. promelas", "Chaoborus spp.", "H. trivolvis")#
text(x=ChosenMedDiffs[,"Algae"][-c(2,6)], y=ChosenMedDiffs[,"All.Terrestrial"][-c(2,6)], labels=ConsNames[-c(2,6)], srt=0, xpd=NA,adj=c(1.05,-0.1), cex=1, font=3, ps=9)#
text(x=ChosenMedDiffs[,"Algae"][c(2,6)], y=ChosenMedDiffs[,"All.Terrestrial"][c(2,6)], labels=ConsNames[c(2,6)], srt=0, xpd=NA,adj=c(-0.01,-0.2), cex=1, font=3, ps=9)#
mtext("Change in terrestrial use", side=2, line=1.1, cex=1)#
mtext("Change in phytoplankton use", side=1, line=1.1, cex=1)#
if(Save){dev.off()}
===============#
# = New _v0.4.5 =#
# ===============#
setwd(paste("/Users/battrd/Documents/School&Work/WiscResearch/Isotopes_2012Analysis/",FigureFolder,sep=""))#
#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("dTerrPhyto_", Version, sep=""), ".pdf", sep=""), height=3, width=3.23)}#
	if(SaveType==".png"){png(file=paste(paste("dTerrPhyto_", Version, sep=""), ".png", sep=""), units="in", res=300, height=3, width=3.23)}#
	if(SaveType==".eps"){setEPS(); postscript(file=paste(paste("dTerrPhyto_", Version, sep=""), ".eps", sep=""), height=3, width=3.23, pointsize=10)}#
}else{#
	dev.new(height=4, width=3, pointsize=10, family="Times")#
}#
par(mfrow=c(1,1), mar=c(2.1,2,0.1,0.1), oma=c(0,0,0,0), ps=9, cex=1, mgp=c(3,0.3,0), tcl=-0.25, family="serif")#
#
aYlim <- c(min(Chosen25th[,"All.Phytoplankton"], na.rm=TRUE), max(Chosen75th[,"All.Phytoplankton"], na.rm=TRUE))*c(1.15,1.05)#
tYlim <- c(min(Chosen25th[,"All.Terrestrial"], na.rm=TRUE), max(Chosen75th[,"All.Terrestrial"], na.rm=TRUE))#
#
plot(ChosenMedDiffs[,"All.Phytoplankton"], ChosenMedDiffs[,"All.Terrestrial"], xlim=aYlim, xlab="", xaxt="s", ylab="", ylim=tYlim, pch=NA)#
abline(h=0, lty="dashed", col="gray")#
abline(v=0, lty="dashed", col="gray")#
#
arrows(x0=Chosen25th[,"All.Phytoplankton"], y0=ChosenMedDiffs[,"All.Terrestrial"], x1=Chosen75th[,"All.Phytoplankton"], y1=ChosenMedDiffs[,"All.Terrestrial"], angle=90, code=0, length=0.05, col="gray")#
arrows(x0=ChosenMedDiffs[,"All.Phytoplankton"], y0=Chosen25th[,"All.Terrestrial"], x1=ChosenMedDiffs[,"All.Phytoplankton"], y1=Chosen75th[,"All.Terrestrial"], angle=90, code=0, length=0.05, col="gray")#
#
points(ChosenMedDiffs[,"All.Phytoplankton"], ChosenMedDiffs[,"All.Terrestrial"], pch=20)#
#
ConsNames <- c("U. limi", "S. oregonensis", "Phoxinus spp.", "A. melas", "P. promelas", "Chaoborus spp.", "H. trivolvis")#
text(x=ChosenMedDiffs[,"All.Phytoplankton"][-c(2,6)], y=ChosenMedDiffs[,"All.Terrestrial"][-c(2,6)], labels=ConsNames[-c(2,6)], srt=0, xpd=NA,adj=c(1.05,-0.1), cex=1, font=3, ps=9)#
text(x=ChosenMedDiffs[,"All.Phytoplankton"][c(2,6)], y=ChosenMedDiffs[,"All.Terrestrial"][c(2,6)], labels=ConsNames[c(2,6)], srt=0, xpd=NA,adj=c(-0.01,-0.2), cex=1, font=3, ps=9)#
mtext("Change in terrestrial use", side=2, line=1.1, cex=1)#
mtext("Change in phytoplankton use", side=1, line=1.1, cex=1)#
if(Save){dev.off()}
head(ChosenMedDiffs)
?'+'
tm25 <- rowSums(cbind(Chosen25th[,c("All.Terrestrial", "Floating.Macrophytes")]), na.rm=TRUE)
tm25
Chosen25th
tm25 <- rowSums(cbind(Chosen25th[,c("All.Terrestrial", "Floating.Macrophytes")]), na.rm=TRUE)[,]
tm25 <- rowSums(cbind(Chosen25th[,c("All.Terrestrial", "Floating.Macrophytes")]), na.rm=TRUE)[,drop=TRUE]
tm25
tm25 <- rowSums(cbind(Chosen25th[,c("All.Terrestrial", "Floating.Macrophytes")]), na.rm=TRUE)#
tmMed <- rowSums(cbind(ChosenMedDiffs[,c("All.Terrestrial", "Floating.Macrophytes")]), na.rm=TRUE)#
tm75 <- rowSums(cbind(Chosen75th[,c("All.Terrestrial", "Floating.Macrophytes")]), na.rm=TRUE)
tm25
tmMed
plot(ChosenMedDiffs)
===============#
# = New _v0.4.5 =#
# ===============#
setwd(paste("/Users/battrd/Documents/School&Work/WiscResearch/Isotopes_2012Analysis/",FigureFolder,sep=""))#
#
tm25 <- rowSums(cbind(Chosen25th[,c("All.Terrestrial", "Floating.Macrophytes")]), na.rm=TRUE)#
tmMed <- rowSums(cbind(ChosenMedDiffs[,c("All.Terrestrial", "Floating.Macrophytes")]), na.rm=TRUE)#
tm75 <- rowSums(cbind(Chosen75th[,c("All.Terrestrial", "Floating.Macrophytes")]), na.rm=TRUE)#
#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("dAlgae_vs_terrMac_", Version, sep=""), ".pdf", sep=""), height=3, width=3.23)}#
	if(SaveType==".png"){png(file=paste(paste("dAlgae_vs_terrMac_", Version, sep=""), ".png", sep=""), units="in", res=300, height=3, width=3.23)}#
	if(SaveType==".eps"){setEPS(); postscript(file=paste(paste("dAlgae_vs_terrMac_", Version, sep=""), ".eps", sep=""), height=3, width=3.23, pointsize=10)}#
}else{#
	dev.new(height=4, width=3, pointsize=10, family="Times")#
}#
par(mfrow=c(1,1), mar=c(2.1,2,0.1,0.1), oma=c(0,0,0,0), ps=9, cex=1, mgp=c(3,0.3,0), tcl=-0.25, family="serif")#
#
aYlim <- c(min(Chosen25th[,"Algae"], na.rm=TRUE), max(Chosen75th[,"Algae"], na.rm=TRUE))*c(1.15,1.05)#
tYlim <- c(min(tm25, na.rm=TRUE), max(tm75, na.rm=TRUE))#
#
plot(ChosenMedDiffs[,"Algae"], tmMed, xlim=aYlim, xlab="", xaxt="s", ylab="", ylim=tYlim, pch=NA)#
abline(h=0, lty="dashed", col="gray")#
abline(v=0, lty="dashed", col="gray")#
#
arrows(x0=Chosen25th[,"Algae"], y0=tmMed, x1=Chosen75th[,"Algae"], y1=tmMed, angle=90, code=0, length=0.05, col="gray")#
arrows(x0=ChosenMedDiffs[,"Algae"], y0=tm25, x1=ChosenMedDiffs[,"Algae"], y1=tm75, angle=90, code=0, length=0.05, col="gray")#
#
points(ChosenMedDiffs[,"Algae"], tmMed, pch=20)#
#
ConsNames <- c("U. limi", "S. oregonensis", "Phoxinus spp.", "A. melas", "P. promelas", "Chaoborus spp.", "H. trivolvis")#
text(x=ChosenMedDiffs[,"Algae"][-c(2,6)], y=tmMed, labels=ConsNames[-c(2,6)], srt=0, xpd=NA,adj=c(1.05,-0.1), cex=1, font=3, ps=9)#
text(x=ChosenMedDiffs[,"Algae"][c(2,6)], y=tmMed, labels=ConsNames[c(2,6)], srt=0, xpd=NA,adj=c(-0.01,-0.2), cex=1, font=3, ps=9)#
mtext("Change in terrestrial + macrophyte use", side=2, line=1.1, cex=1)#
mtext("Change in algal use", side=1, line=1.1, cex=1)#
if(Save){dev.off()}
===============#
# = New _v0.4.5 =#
# ===============#
setwd(paste("/Users/battrd/Documents/School&Work/WiscResearch/Isotopes_2012Analysis/",FigureFolder,sep=""))#
#
tm25 <- rowSums(cbind(Chosen25th[,c("All.Terrestrial", "Floating.Macrophytes")]), na.rm=TRUE)#
tmMed <- rowSums(cbind(ChosenMedDiffs[,c("All.Terrestrial", "Floating.Macrophytes")]), na.rm=TRUE)#
tm75 <- rowSums(cbind(Chosen75th[,c("All.Terrestrial", "Floating.Macrophytes")]), na.rm=TRUE)#
#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("dAlgae_vs_terrMac_", Version, sep=""), ".pdf", sep=""), height=3, width=3.23)}#
	if(SaveType==".png"){png(file=paste(paste("dAlgae_vs_terrMac_", Version, sep=""), ".png", sep=""), units="in", res=300, height=3, width=3.23)}#
	if(SaveType==".eps"){setEPS(); postscript(file=paste(paste("dAlgae_vs_terrMac_", Version, sep=""), ".eps", sep=""), height=3, width=3.23, pointsize=10)}#
}else{#
	dev.new(height=4, width=3, pointsize=10, family="Times")#
}#
par(mfrow=c(1,1), mar=c(2.1,2,0.1,0.1), oma=c(0,0,0,0), ps=9, cex=1, mgp=c(3,0.3,0), tcl=-0.25, family="serif")#
#
aYlim <- c(min(Chosen25th[,"Algae"], na.rm=TRUE), max(Chosen75th[,"Algae"], na.rm=TRUE))*c(1.15,1.05)#
tYlim <- c(min(tm25, na.rm=TRUE), max(tm75, na.rm=TRUE))#
#
plot(ChosenMedDiffs[,"Algae"], tmMed, xlim=aYlim, xlab="", xaxt="s", ylab="", ylim=tYlim, pch=NA)#
abline(h=0, lty="dashed", col="gray")#
abline(v=0, lty="dashed", col="gray")#
#
arrows(x0=Chosen25th[,"Algae"], y0=tmMed, x1=Chosen75th[,"Algae"], y1=tmMed, angle=90, code=0, length=0.05, col="gray")#
arrows(x0=ChosenMedDiffs[,"Algae"], y0=tm25, x1=ChosenMedDiffs[,"Algae"], y1=tm75, angle=90, code=0, length=0.05, col="gray")#
#
points(ChosenMedDiffs[,"Algae"], tmMed, pch=20)#
#
ConsNames <- c("U. limi", "S. oregonensis", "Phoxinus spp.", "A. melas", "P. promelas", "Chaoborus spp.", "H. trivolvis")#
text(x=ChosenMedDiffs[,"Algae"][-c(2,6)], y=tmMed[-c(2,6)], labels=ConsNames[-c(2,6)], srt=0, xpd=NA,adj=c(1.05,-0.1), cex=1, font=3, ps=9)#
text(x=ChosenMedDiffs[,"Algae"][c(2,6)], y=tmMed[-c(2,6)], labels=ConsNames[c(2,6)], srt=0, xpd=NA,adj=c(-0.01,-0.2), cex=1, font=3, ps=9)#
mtext("Change in terrestrial + macrophyte use", side=2, line=1.1, cex=1)#
mtext("Change in algal use", side=1, line=1.1, cex=1)#
if(Save){dev.off()}
dev.new(height=4, width=3, pointsize=10, family="Times")
par(mfrow=c(1,1), mar=c(2.1,2,0.1,0.1), oma=c(0,0,0,0), ps=9, cex=1, mgp=c(3,0.3,0), tcl=-0.25, family="serif")#
#
aYlim <- c(min(Chosen25th[,"Algae"], na.rm=TRUE), max(Chosen75th[,"Algae"], na.rm=TRUE))*c(1.15,1.05)#
tYlim <- c(min(tm25, na.rm=TRUE), max(tm75, na.rm=TRUE))#
#
plot(ChosenMedDiffs[,"Algae"], tmMed, xlim=aYlim, xlab="", xaxt="s", ylab="", ylim=tYlim, pch=NA)#
abline(h=0, lty="dashed", col="gray")#
abline(v=0, lty="dashed", col="gray")#
#
arrows(x0=Chosen25th[,"Algae"], y0=tmMed, x1=Chosen75th[,"Algae"], y1=tmMed, angle=90, code=0, length=0.05, col="gray")#
arrows(x0=ChosenMedDiffs[,"Algae"], y0=tm25, x1=ChosenMedDiffs[,"Algae"], y1=tm75, angle=90, code=0, length=0.05, col="gray")#
#
points(ChosenMedDiffs[,"Algae"], tmMed, pch=20)
text(x=ChosenMedDiffs[,"Algae"][-c(2,6)], y=tmMed[-c(2,6)], labels=ConsNames[-c(2,6)], srt=0, xpd=NA,adj=c(1.05,-0.1), cex=1, font=3, ps=9)
text(x=ChosenMedDiffs[,"Algae"][c(2,6)], y=tmMed[c(2,6)], labels=ConsNames[c(2,6)], srt=0, xpd=NA,adj=c(-0.01,-0.2), cex=1, font=3, ps=9)
abline(b=-1)
?abline
abline(a=1, b==1)
abline(a=1, b=1)
abline(a=1, b=-1)
abline(a=0, b=-1)
===============#
# = New _v0.4.5 =#
# ===============#
setwd(paste("/Users/battrd/Documents/School&Work/WiscResearch/Isotopes_2012Analysis/",FigureFolder,sep=""))#
#
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("dTerrAlgae_", Version, sep=""), ".pdf", sep=""), height=3, width=3.23)}#
	if(SaveType==".png"){png(file=paste(paste("dTerrAlgae_", Version, sep=""), ".png", sep=""), units="in", res=300, height=3, width=3.23)}#
	if(SaveType==".eps"){setEPS(); postscript(file=paste(paste("dTerrAlgae_", Version, sep=""), ".eps", sep=""), height=3, width=3.23, pointsize=10)}#
}else{#
	dev.new(height=4, width=3, pointsize=10, family="Times")#
}#
par(mfrow=c(1,1), mar=c(2.1,2,0.1,0.1), oma=c(0,0,0,0), ps=9, cex=1, mgp=c(3,0.3,0), tcl=-0.25, family="serif")#
#
aYlim <- c(min(Chosen25th[,"Algae"], na.rm=TRUE), max(Chosen75th[,"Algae"], na.rm=TRUE))*c(1.15,1.05)#
tYlim <- c(min(Chosen25th[,"All.Terrestrial"], na.rm=TRUE), max(Chosen75th[,"All.Terrestrial"], na.rm=TRUE))#
#
plot(ChosenMedDiffs[,"Algae"], ChosenMedDiffs[,"All.Terrestrial"], xlim=aYlim, xlab="", xaxt="s", ylab="", ylim=tYlim, pch=NA)#
abline(h=0, lty="dashed", col="gray")#
abline(v=0, lty="dashed", col="gray")#
#
arrows(x0=Chosen25th[,"Algae"], y0=ChosenMedDiffs[,"All.Terrestrial"], x1=Chosen75th[,"Algae"], y1=ChosenMedDiffs[,"All.Terrestrial"], angle=90, code=0, length=0.05, col="gray")#
arrows(x0=ChosenMedDiffs[,"Algae"], y0=Chosen25th[,"All.Terrestrial"], x1=ChosenMedDiffs[,"Algae"], y1=Chosen75th[,"All.Terrestrial"], angle=90, code=0, length=0.05, col="gray")#
#
points(ChosenMedDiffs[,"Algae"], ChosenMedDiffs[,"All.Terrestrial"], pch=20)#
#
ConsNames <- c("U. limi", "S. oregonensis", "Phoxinus spp.", "A. melas", "P. promelas", "Chaoborus spp.", "H. trivolvis")#
text(x=ChosenMedDiffs[,"Algae"][-c(2,6)], y=ChosenMedDiffs[,"All.Terrestrial"][-c(2,6)], labels=ConsNames[-c(2,6)], srt=0, xpd=NA,adj=c(1.05,-0.1), cex=1, font=3, ps=9)#
text(x=ChosenMedDiffs[,"Algae"][c(2,6)], y=ChosenMedDiffs[,"All.Terrestrial"][c(2,6)], labels=ConsNames[c(2,6)], srt=0, xpd=NA,adj=c(-0.01,-0.2), cex=1, font=3, ps=9)#
mtext("Change in terrestrial use", side=2, line=1.1, cex=1)#
mtext("Change in algal use", side=1, line=1.1, cex=1)#
abline(a=0, b=-1)#
if(Save){dev.off()}
if(Save){#
	if(SaveType==".pdf"){pdf(file=paste(paste("dTerrAlgae_", Version, sep=""), ".pdf", sep=""), height=3, width=3.23)}#
	if(SaveType==".png"){png(file=paste(paste("dTerrAlgae_", Version, sep=""), ".png", sep=""), units="in", res=300, height=3, width=3.23)}#
	if(SaveType==".eps"){setEPS(); postscript(file=paste(paste("dTerrAlgae_", Version, sep=""), ".eps", sep=""), height=3, width=3.23, pointsize=10)}#
}else{#
	dev.new(height=4, width=3, pointsize=10, family="Times")#
}#
par(mfrow=c(1,1), mar=c(2.1,2,0.1,0.1), oma=c(0,0,0,0), ps=9, cex=1, mgp=c(3,0.3,0), tcl=-0.25, family="serif")#
#
aYlim <- c(min(Chosen25th[,"Algae"], na.rm=TRUE), max(Chosen75th[,"Algae"], na.rm=TRUE))*c(1.15,1.05)#
tYlim <- c(min(Chosen25th[,"All.Terrestrial"], na.rm=TRUE), max(Chosen75th[,"All.Terrestrial"], na.rm=TRUE))#
#
plot(ChosenMedDiffs[,"Algae"], ChosenMedDiffs[,"All.Terrestrial"], xlim=aYlim, xlab="", xaxt="s", ylab="", ylim=tYlim, pch=NA)#
abline(h=0, lty="dashed", col="gray")#
abline(v=0, lty="dashed", col="gray")#
#
arrows(x0=Chosen25th[,"Algae"], y0=ChosenMedDiffs[,"All.Terrestrial"], x1=Chosen75th[,"Algae"], y1=ChosenMedDiffs[,"All.Terrestrial"], angle=90, code=0, length=0.05, col="gray")#
arrows(x0=ChosenMedDiffs[,"Algae"], y0=Chosen25th[,"All.Terrestrial"], x1=ChosenMedDiffs[,"Algae"], y1=Chosen75th[,"All.Terrestrial"], angle=90, code=0, length=0.05, col="gray")#
#
points(ChosenMedDiffs[,"Algae"], ChosenMedDiffs[,"All.Terrestrial"], pch=20)#
#
ConsNames <- c("U. limi", "S. oregonensis", "Phoxinus spp.", "A. melas", "P. promelas", "Chaoborus spp.", "H. trivolvis")#
text(x=ChosenMedDiffs[,"Algae"][-c(2,4,6)], y=ChosenMedDiffs[,"All.Terrestrial"][-c(2,4,6)], labels=ConsNames[-c(2,4,6)], srt=0, xpd=NA,adj=c(1.05,-0.1), cex=1, font=3, ps=9)#
text(x=ChosenMedDiffs[,"Algae"][c(2,4,6)], y=ChosenMedDiffs[,"All.Terrestrial"][c(2,4,6)], labels=ConsNames[c(2,4,6)], srt=0, xpd=NA,adj=c(-0.01,-0.2), cex=1, font=3, ps=9)#
mtext("Change in terrestrial use", side=2, line=1.1, cex=1)#
mtext("Change in algal use", side=1, line=1.1, cex=1)#
abline(a=0, b=-1)#
if(Save){dev.off()}
